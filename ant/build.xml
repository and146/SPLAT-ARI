<?xml version="1.0"?>

<!--
 !  ANT build file
 !
 !   This file describes how to build ANT in a manner that is
 !   very broadly compatible with the Stalink build system.
 !   It is just a wrapper for the "realbuild.xml" file that came with
 !   the ANT distribution. To get started you'll need to have the
 !   bootstrap version of the "ant" command found in the local "bin"
 !   directory.
 !
 !   The main targets are:
 !
 !      build            -> compiles the source code
 !      clean            -> cleans up build products
 !      deinstall        -> does nothing. this package cannot be deinstalled
 !      dist             -> creates the local binary distribution
 !      export           -> creates the full distribution archives
 !      export-runonly   -> same as export
 !      export-source    -> same as export
 !      install          -> install distribution into Starlink tree
 !      install-runonly  -> install a runonly distribution into Starlink tree
 !      jars             -> creates the package jar file
 !      javadocs         -> does nothing package is distributed with a
 !                          complete set
 !      test             -> run JUnit tests
 !
 !   Authors:
 !      Peter W. Draper (19-AUG-2002)
 !
 !   Version:
 !      $Id: build.xml,v 1.9 2002/08/19 13:19:29 pwd Exp $
 !
 !-->

<project name="Build file for ANT" default="build" basedir=".">

  <!-- If either or both of these files exist then any properties
   !   contained within them will override those defined here.  -->
  <property file="${user.home}/.stardev.properties"/>
  <property file=".properties"/>

  <!-- Properties will also be set for all environment variables
   !   (PATH becomes "env.PATH"), generally not a good
   !   idea as names are OS dependent -->
  <property environment="env"/>

  <!--
   !  =================
   !  Global Properties
   !  =================
   !-->

  <!-- Directory for the Starlink installation (usually /star/java)-->
  <property name="star.dir" value="${basedir}/../../"/>

  <!-- Directory to install into (install target, usually /star/java)-->
  <property name="star.install" value="${star.dir}"/>

  <!-- Directory that contains the Starlink jar tree -->
  <property name="star.jar.dir" value="${star.dir}/lib"/>

  <!-- Directory that contains the locally built sources (usually
   !   /star/java/source for full distribution) -->
  <property name="star.build.dir" value="${basedir}/../"/>

  <!-- Directory that any archives should be placed into. The local
   !   directort by default -->
  <property name="star.archive.dir" value="${basedir}"/>

  <!--
   !  ================
   !  Local Properties
   !  ================
   !-->

  <!-- Define the package name and current versions -->
  <property name="Name" value="ANT"/>
  <property name="name" value="ant"/>
  <property name="version" value="1.6-2-starlink"/>

  <!-- The Java package name -->
  <property name="package.name" value="org.apache.tools.ant"/>

  <!-- Extra task options, if any -->
  <property name="chmod.fail" value="false"/>

  <!-- Directory containing the package source -->
  <property name="src.dir" value="${basedir}/src"/>

  <!-- Directory containing the java source (top of the namespace)-->
  <property name="java.dir" value="${src.dir}/main"/>

  <!-- Directory containing miscellaneous docs -->
  <property name="src.docs" value="docs"/>

  <!-- Directory containing any script required to execute or setup package-->
  <property name="script.dir" value="${src.dir}/script"/>

  <!-- Directory containing any third-party jars that should be
   !   distributed (normally these would belong in a proper package)-->
  <property name="src.jars.dir" value="${src.dir}/lib"/>

  <!-- Directories to receive the various build components -->
  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.classes" value="${build.dir}/classes"/>

  <!-- Distribution directories. Although ANT is built from soource
   !   it also comes as a third-party package so these directories
   !   serve multiple purposes.-->
  <property name="dist.dir" value="${basedir}"/>
  <property name="dist.bin" value="${dist.dir}/bin"/>
  <property name="dist.lib" value="${dist.dir}/lib"/>
  <property name="dist.src" value="${dist.dir}/src"/>
  <property name="dist.docs" value="${dist.dir}/docs"/>
  <property name="dist.etc" value="${dist.dir}/etc"/>

  <property name="dist.bin.pkg" value="${dist.bin}/${name}"/>
  <property name="dist.lib.pkg" value="${dist.lib}/${name}"/>
  <property name="dist.docs.pkg" value="${dist.docs}/${name}"/>
  <property name="dist.etc.pkg" value="${dist.etc}/${name}"/>
  <property name="dist.javadocs" value="${dist.docs}/${name}/javadocs"/>

  <property name="dist.base" value="distribution"/>

  <!-- Version for zipped/tarred export files. -->
  <property name="dist.version" value="${name}-${version}"/>

  <!-- Webstart and jar signing properties. -->
  <property name="webstart.codebase"
            value="http://starlink.jach.hawaii.edu/starjava/lib"/>
  <property name="webstart.alias" value="Starlink-UK"/>
  <property name="webstart.keystore" value="${star.build.dir}/keystore"/>
  <property name="webstart.keypass" value="Vroomfondel"/>
  <property name="webstart.storepass" value="Majikthise"/>
  <property name="webstart.starlink_logo" value="starlink_logo_med.gif"/>
  <property name="webstart.signer" value="${user.name}"/>

  <!--
   !   =================
   !   Prepare the build
   !   =================
   !
   !  Do any jobs that are required before any other target can proceed.
   !-->
  <target name="prepare">

    <tstamp>
      <format property="year" pattern="yyyy"/>
    </tstamp>

    <!-- This is a filterchain that can be used to copy-edit files
     !   that require the package version, current date and/or time -->
    <filterchain id="filters">
      <replacetokens>
        <token key="VERSION" value="${version}"/>
        <token key="DATE" value="${TODAY}"/>
        <token key="TIME" value="${TSTAMP}"/>
      </replacetokens>
    </filterchain>

  </target>

  <!--
   !   ==============
   !   Build the code
   !   ==============
   !-->
  <target name="build"
          unless="runonly.install"
          description="-> compiles the source code">

    <ant dir="${basedir}" antfile="realbuild.xml" target="build"/>

  </target>

  <!--
   !   ============================
   !   Create the package jar files
   !   ============================
   !-->
  <target name="jars"
          unless="runonly.install"
          description="-> creates the package jar file">

    <ant dir="${basedir}" antfile="realbuild.xml" target="jars"/>
    <copy todir="${dist.lib}">
       <fileset dir="${build.dir}/lib"/>
    </copy>

  </target>

  <!-- 
   !   ==================
   !   Sign the jar files
   !   ==================
   ! 
   !   Signs the jar files in lib and the installed ant.jar file.
   !-->
  <target name="sign_jars"
          depends="jars"
          description="signs jar files, post-install">

    <!-- Sign all jar files in source directory and the installed
     !   equivalents --> 
    <signjar alias="${webstart.alias}"
             keystore="${webstart.keystore}"
             keypass="${webstart.keypass}"
             storepass="${webstart.storepass}"
             maxmemory="128m">
      <fileset dir="${dist.lib}" includes="**/*.jar **/*.zip"/>
      <fileset dir="${star.jar.dir}" includes="ant*.jar"/>
      <fileset dir="${star.jar.dir}" includes="xercesImpl.jar"/>
      <fileset dir="${star.jar.dir}" includes="xml-apis.jar"/>
    </signjar>

  </target>


  <!--
   !   =================================
   !   Configures the local distribution
   !   =================================
   ! Except for the jar files, which need to be built from the source
   ! code, this package is in a "dist" state, but with the usual package
   ! specific directories not generally in use.
   !-->
  <target name="dist"
          depends="jars"
          unless="runonly.install"
          description="-> configures the local binary distribution">

  </target>

  <!--
   !   ========================
   !   Create the full releases
   !   ========================
   !
   ! Do this Starlink fashion.
   !-->
  <target name="export"
          description="-> creates the full distribution archives">

    <antcall target="create_archives">
      <param name="source.required" value="true"/>
      <param name="binary.required" value="true"/>
      <param name="archive.name" value="${dist.version}"/>
    </antcall>

  </target>

  <!--
   !   ==========================
   !   Create the source releases
   !   ==========================   !
   !-->
  <target name="export-source"
          depends="export"
          description="-> same as export target">
  </target>

  <!--
   !   ===========================
   !   Create the runonly releases
   !   ===========================
   !-->
  <target name="export-runonly"
          depends="export"
          description="-> same as export target">
  </target>

  <!--
   ! Create release archives of the various types required. Use this
   ! by an <antcall> and set the property "archive.name" to define what
   ! name to use for the outfile files. The archives are written into
   ! the directory ${star.archive.dir} (the local directory by default).
   !
   ! If the property "binary.required" is set then the files needed
   ! for a run-only release are included and if "source.required" is
   ! defined the source code is also included.
   !-->
  <target name="create_archives"
          depends="dist">

    <mkdir dir="${star.archive.dir}"/>

    <!-- Try to get everything as retained in the CVS repository-->
    <zip destfile="${star.archive.dir}/${archive.name}.zip">

      <zipfileset dir="${dist.docs}" prefix="${name}/docs"/>
      <zipfileset dir="${dist.dir}" prefix="${name}">
         <include name="*"/>
      </zipfileset>

      <zipfileset dir="${dist.bin}" prefix="${name}/bin">
        <include name="**" if="binary.required"/>
      </zipfileset>
      <zipfileset dir="${dist.lib}" prefix="${name}/lib">
        <include name="**" if="binary.required"/>
      </zipfileset>
      <zipfileset dir="${dist.etc}" prefix="${name}/etc">
        <include name="**" if="binary.required"/>
      </zipfileset>

      <zipfileset dir="${src.dir}" prefix="${name}/src">
        <include name="**" if="source.required"/>
      </zipfileset>

    </zip>

    <!-- Note: creating a tar file with empty directories doesn't
     !   work, so the directory structure may be incomplete -->
    <tar longfile="gnu" destfile="${archive.name}.tar">

      <!-- All releases have the documentation and build file -->
      <tarfileset dir="${dist.docs}" prefix="${name}/docs"/>
      <tarfileset dir="${dist.dir}" prefix="${name}">
        <include name="build.xml"/>
      </tarfileset>

      <tarfileset dir="${dist.bin}" prefix="${name}/bin">
        <include name="**" if="binary.required"/>
      </tarfileset>
      <tarfileset dir="${dist.lib}" prefix="${name}/lib">
        <include name="**" if="binary.required"/>
      </tarfileset>
      <!--<tarfileset dir="${dist.etc}" prefix="${name}/etc">
        <include name="**" if="binary.required"/>
      </tarfileset>-->

      <tarfileset dir="${src.dir}" prefix="${name}/src">
        <include name="**" if="source.required"/>
        <exclude name="local/**" if="source.required"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${star.archive.dir}/${archive.name}.tar.gz" 
          src="${archive.name}.tar"/>
    <bzip2 zipfile="${star.archive.dir}/${archive.name}.tar.bz2" 
           src="${archive.name}.tar"/>
    <delete file="${archive.name}.tar"/>

  </target>

  <!--
   !   ============================================
   !   Cleans up build and distribution directories
   !   ============================================
   !-->
  <target name="clean"
          description="-> cleans up build products">

    <delete dir="${build.dir}"/>
    <delete dir="${dist.base}" />

  </target>

  <!--
   !   ================================
   !   Install into the "Starlink" tree
   !   ================================
   !
   ! Installs a sub-set of the dist products into the standard
   ! Starlink directories. Note these are not undoable.
   !-->
  <target name="install"
          depends="prepare,dist"
          description="-> install distribution into Starlink tree">

    <!-- Installation based directories (based on "star.install")-->
    <property name="star.bin" value="${star.install}/bin"/>
    <property name="star.lib" value="${star.install}/lib"/>
    <property name="star.etc" value="${star.install}/etc"/>
    <property name="star.docs" value="${star.install}/docs"/>
    <property name="star.etc.pkg" value="${star.etc}/${name}"/>
    <property name="star.docs.pkg" value="${star.docs}/${name}"/>
    <mkdir dir="${star.install}"/>
    <mkdir dir="${star.bin}"/>
    <mkdir dir="${star.lib}"/>
    <mkdir dir="${star.etc.pkg}"/>
    <mkdir dir="${star.docs.pkg}"/>

    <copy todir="${star.bin}">
      <fileset dir="${dist.bin}"/>
    </copy>

    <chmod perm="ugo+rx" failonerror="${chmod.fail}">
      <fileset dir="${star.bin}">
        <present targetdir="${dist.bin}" present="both"/>
      </fileset>
    </chmod>

    <copy todir="${star.lib}">
      <fileset dir="${dist.lib}">
        <include name="**/*.jar"/>
        <include name="**/*.zip"/>
        <include name="**/LICENSE*"/>
      </fileset>
    </copy>

    <copy todir="${star.docs.pkg}">
      <fileset dir="${dist.docs}" excludes="${unfiltered.files}"/>
      <filterchain refid="filters"/>
    </copy>

    <copy todir="${star.docs.pkg}" filtering="false">
      <fileset dir="${dist.docs}" includes="${unfiltered.files}"/>
    </copy>

  </target>

  <!--
   !   ========================================
   !   Install runonly into the "Starlink" tree
   !   ========================================
   !
   ! Do an install using only the contents of a binary release (a
   ! source-free runonly system).
   !-->
  <target name="install-runonly"
          description="-> install a runonly distribution into Starlink tree">

     <!-- Do normal install, but with some dependencies off (may not
      !   be able to run javac and javadoc as could be used by a JRE) -->
     <antcall target="install">
      <param name="runonly.install" value="true"/>
      <param name="javadoc.notrequired" value="true"/>
    </antcall>

  </target>

  <!--
   !   ===================================
   !   De-install from the "Starlink" tree
   !   ===================================
   !
   ! Uses the content of the "${install.log}" to remove the files
   !  that were copied into place by the install target. If this fails
   !  then hopefully the log file will not be deleted!
   !-->
 <target name="deinstall"
          description="-> does nothing, only for compatibility">
  </target>

  <!--
   !   =============================
   !   Creates the API documentation
   !   =============================
   !
   !  The documentation for this package is part of the original
   !  release, so nothing to do.
   !-->
  <target name="javadocs"
          description="-> does nothing">
  </target>

  <!--
   !   ============
   !   Run testcase
   !   ============
   !-->
  <target name="test"
          description="Run the JUnit testcases">

    <ant dir="${basedir}" antfile="realbuild.xml" target="test"/>

  </target>

  <!--
   ! Get a DTD for this build file. Documentation suggests may be incomplete!
   !
   ! Use:
   !
   !    <!DOCTYPE project PUBLIC "-//ANT//DTD project//EN" "./project.dtd">
   !
   ! at head of document to include.
   !-->
  <target name="dtd">

     <antstructure output="project.dtd"/>
  </target>

</project>
