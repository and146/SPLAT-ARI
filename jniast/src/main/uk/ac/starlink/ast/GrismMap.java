/* ********************************************************
 * This file automatically generated by GrismMap.pl.
 *                   Do not edit.                         *
 **********************************************************/

package uk.ac.starlink.ast;


/**
 * Java interface to the AST GrismMap class
 *  - transform 1-dimensional coordinates using a grism dispersion equation. 
 * A GrismMap is a specialised form of Mapping which transforms
 * 1-dimensional coordinates using the spectral dispersion equation
 * described in FITS-WCS paper III "Representation of spectral
 * coordinates in FITS". This describes the dispersion produced by
 * gratings, prisms and grisms.
 * <p>
 * When initially created, the forward transformation of a GrismMap
 * transforms input "grism parameter" values into output wavelength
 * values. The "grism parameter" is a dimensionless value which is
 * linearly related to position on the detector. It is defined in FITS-WCS
 * paper III as "the offset on the detector from the point of intersection
 * of the camera axis, measured in units of the effective local length".
 * The units in which wavelength values are expected or returned is
 * determined by the values supplied for the GrismWaveR, GrismNRP and
 * GrismG attribute: whatever units are used for these attributes will
 * also be used for the wavelength values.
 * <h4>Licence</h4>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public Licence as
 * published by the Free Software Foundation; either version 2 of
 * the Licence, or (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be
 * useful,but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public Licence for more details.
 * <p>
 * You should have received a copy of the GNU General Public Licence
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
 * 02110-1301, USA
 * 
 * 
 * @see  <a href='http://star-www.rl.ac.uk/cgi-bin/htxserver/sun211.htx/?xref_GrismMap'>AST GrismMap</a>  
 */
public class GrismMap extends Mapping {
    /** 
     * Create a GrismMap.   
     * @throws  AstException  if an error occurred in the AST library
    */
    public GrismMap(  ) {
        construct(  );
    }
    private native void construct(  );

    /**
     * Get 
     * the angle of incidence of the incoming light on the grating surface.  
     * This attribute holds the angle between the incoming light and the
     * normal to the grating surface, in radians. The default value is 0.
     * 
     *
     * @return  this object's GrismAlpha attribute
     */
    public double getGrismAlpha() {
        return getD( "GrismAlpha" );
    }

    /**
     * Set 
     * the angle of incidence of the incoming light on the grating surface.  
     * This attribute holds the angle between the incoming light and the
     * normal to the grating surface, in radians. The default value is 0.
     * 
     *
     * @param  grismAlpha   the GrismAlpha attribute of this object
     */
    public void setGrismAlpha( double grismAlpha ) {
       setD( "GrismAlpha", grismAlpha );
    }

    /**
     * Get 
     *  The angle between the normal and the dispersion plane.  
     * This attribute holds the angle (in radians) between the normal to
     * the grating or exit prism face, and the dispersion plane. The
     * dispersion plane is the plane spanned by the incoming and outgoing
     * ray. The default value is 0.0.
     * 
     *
     * @return  this object's GrismEps attribute
     */
    public double getGrismEps() {
        return getD( "GrismEps" );
    }

    /**
     * Set 
     *  The angle between the normal and the dispersion plane.  
     * This attribute holds the angle (in radians) between the normal to
     * the grating or exit prism face, and the dispersion plane. The
     * dispersion plane is the plane spanned by the incoming and outgoing
     * ray. The default value is 0.0.
     * 
     *
     * @param  grismEps   the GrismEps attribute of this object
     */
    public void setGrismEps( double grismEps ) {
       setD( "GrismEps", grismEps );
    }

    /**
     * Get 
     * the grating ruling density.  
     * This attribute holds the number of grating rulings per unit length.
     * The unit of length used should be consistent with the units used
     * for attributes GrismWaveR and GrismNRP. The default value is 0.0.
     * (the appropriate value for a pure prism disperser with no grating).
     * 
     *
     * @return  this object's GrismG attribute
     */
    public double getGrismG() {
        return getD( "GrismG" );
    }

    /**
     * Set 
     * the grating ruling density.  
     * This attribute holds the number of grating rulings per unit length.
     * The unit of length used should be consistent with the units used
     * for attributes GrismWaveR and GrismNRP. The default value is 0.0.
     * (the appropriate value for a pure prism disperser with no grating).
     * 
     *
     * @param  grismG   the GrismG attribute of this object
     */
    public void setGrismG( double grismG ) {
       setD( "GrismG", grismG );
    }

    /**
     * Get 
     * the interference order.  
     * This attribute holds the interference order being considered.
     * The default value is 0.
     * 
     *
     * @return  this object's GrismM attribute
     */
    public int getGrismM() {
        return getI( "GrismM" );
    }

    /**
     * Set 
     * the interference order.  
     * This attribute holds the interference order being considered.
     * The default value is 0.
     * 
     *
     * @param  grismM   the GrismM attribute of this object
     */
    public void setGrismM( int grismM ) {
       setI( "GrismM", grismM );
    }

    /**
     * Get 
     * the refractive index at the reference wavelength.  
     * This attribute holds refractive index of the grism material at the
     * reference wavelength (given by attribute GrismWaveR). The default
     * value is 1.0.
     * 
     *
     * @return  this object's GrismNR attribute
     */
    public double getGrismNR() {
        return getD( "GrismNR" );
    }

    /**
     * Set 
     * the refractive index at the reference wavelength.  
     * This attribute holds refractive index of the grism material at the
     * reference wavelength (given by attribute GrismWaveR). The default
     * value is 1.0.
     * 
     *
     * @param  grismNR   the GrismNR attribute of this object
     */
    public void setGrismNR( double grismNR ) {
       setD( "GrismNR", grismNR );
    }

    /**
     * Get 
     * the rate of change of refractive index with wavelength.  
     * This attribute holds the rate of change of the refractive index of the
     * grism material with respect to wavelength at the reference wavelength
     * (given by attribute GrismWaveR). The default value is 0.0 (the
     * appropriate value for a pure grating disperser with no prism). The
     * units of this attribute should be consistent with those of attributes
     * GrismWaveR and GrismG.
     * 
     *
     * @return  this object's GrismNRP attribute
     */
    public double getGrismNRP() {
        return getD( "GrismNRP" );
    }

    /**
     * Set 
     * the rate of change of refractive index with wavelength.  
     * This attribute holds the rate of change of the refractive index of the
     * grism material with respect to wavelength at the reference wavelength
     * (given by attribute GrismWaveR). The default value is 0.0 (the
     * appropriate value for a pure grating disperser with no prism). The
     * units of this attribute should be consistent with those of attributes
     * GrismWaveR and GrismG.
     * 
     *
     * @param  grismNRP   the GrismNRP attribute of this object
     */
    public void setGrismNRP( double grismNRP ) {
       setD( "GrismNRP", grismNRP );
    }

    /**
     * Get 
     * angle between normal to detector plane and reference ray.  
     * This attribute gives the angle of incidence of light of the
     * reference wavelength (given by attribute GrismWaveR) onto the
     * detector. Specifically, it holds the angle (in radians) between
     * the normal to the detector plane and an incident ray at the reference
     * wavelength. The default value is 0.0.
     * 
     *
     * @return  this object's GrismTheta attribute
     */
    public double getGrismTheta() {
        return getD( "GrismTheta" );
    }

    /**
     * Set 
     * angle between normal to detector plane and reference ray.  
     * This attribute gives the angle of incidence of light of the
     * reference wavelength (given by attribute GrismWaveR) onto the
     * detector. Specifically, it holds the angle (in radians) between
     * the normal to the detector plane and an incident ray at the reference
     * wavelength. The default value is 0.0.
     * 
     *
     * @param  grismTheta   the GrismTheta attribute of this object
     */
    public void setGrismTheta( double grismTheta ) {
       setD( "GrismTheta", grismTheta );
    }

    /**
     * Get 
     * the reference wavelength.  
     * This attribute holds reference wavelength. The default value is
     * 5000 (Angstrom). The units of this attribute should be consistent with
     * those of attributes GrismNRP and GrismG.
     * 
     *
     * @return  this object's GrismWaveR attribute
     */
    public double getGrismWaveR() {
        return getD( "GrismWaveR" );
    }

    /**
     * Set 
     * the reference wavelength.  
     * This attribute holds reference wavelength. The default value is
     * 5000 (Angstrom). The units of this attribute should be consistent with
     * those of attributes GrismNRP and GrismG.
     * 
     *
     * @param  grismWaveR   the GrismWaveR attribute of this object
     */
    public void setGrismWaveR( double grismWaveR ) {
       setD( "GrismWaveR", grismWaveR );
    }

}
