/* ********************************************************
 * This file automatically generated by KeyMap.pl.
 *                   Do not edit.                         *
 **********************************************************/

package uk.ac.starlink.ast;


/**
 * Java interface to the AST KeyMap class
 *  - store a set of key/value pairs. 
 * The KeyMap class is used to store a set of values with associated keys
 * which identify the values. The keys are strings. These may be case
 * sensitive or insensitive as selected by the KeyCase attribute, and
 * trailing spaces are ignored. The value associated with a key can be
 * integer (signed 4 and 2 byte, or unsigned 1 byte), floating point
 * (single or double precision),
 * void pointer,
 * character string or AST Object pointer. Each
 * value can be a scalar or a one-dimensional vector. A KeyMap is
 * conceptually similar to a Mapping in that a KeyMap transforms an
 * input into an output - the input is the key, and the output is the
 * value associated with the key. However, this is only a conceptual
 * similarity, and it should be noted that the KeyMap class inherits from
 * the Object class rather than the Mapping class. The methods of the
 * Mapping class cannot be used with a KeyMap.
 * <h4>Licence</h4>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public Licence as
 * published by the Free Software Foundation; either version 2 of
 * the Licence, or (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be
 * useful,but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public Licence for more details.
 * <p>
 * You should have received a copy of the GNU General Public Licence
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
 * 02110-1301, USA
 * 
 * <p>
 *        In Java, you are probably better off using a {@link java.util.Map}.
 *    
 * 
 * @see  <a href='http://star-www.rl.ac.uk/cgi-bin/htxserver/sun211.htx/?xref_KeyMap'>AST KeyMap</a>  
 */
public class KeyMap extends AstObject {

    /** Type constant representing <tt>int</tt> type. */
    public static final int AST__INTTYPE = 
            getAstConstantI( "AST__INTTYPE" );

    /** Type constant representing <tt>double</tt> type. */
    public static final int AST__DOUBLETYPE =
            getAstConstantI( "AST__DOUBLETYPE" );

    /** Type constant representing <tt>String</tt> type. */
    public static final int AST__STRINGTYPE =
            getAstConstantI( "AST__STRINGTYPE" );

    /** Type constant representing <tt>AstObject</tt> type. */
    public static final int AST__OBJECTTYPE =
            getAstConstantI( "AST__OBJECTTYPE" );

    /** Type constant represening no known type. */
    public static final int AST__BADTYPE =
            getAstConstantI( "AST__BADTYPE" );
    /** 
     * Create a KeyMap.   
     * @throws  AstException  if an error occurred in the AST library
    */
    public KeyMap(  ) {
        construct(  );
    }
    private native void construct(  );

    /** 
     * Removed a named entry from a KeyMap.   
     * This function
     * removes a named entry from a KeyMap. It returns without action if the
     * KeyMap does not contain the specified key.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native void mapRemove( String key );

    /** 
     * Get the number of entries in a KeyMap.   
     * This function returns the number of entries in a KeyMap.
     * <h4>Notes</h4>
     * <br> - A function value of zero will be returned if an error has already
     * occurred, or if this function should fail for any reason.
     * 
     * @return  The number of entries in the KeyMap.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native int mapSize(  );

    /** 
     * Get the vector length of an entry in a KeyMap.   
     * This function returns the vector length of a named entry in a KeyMap,
     * (that is, how many values are associated with the entry).
     * <h4>Notes</h4>
     * <br> - A function value of zero will be returned if an error has already
     * occurred, or if this function should fail for any reason.
     * 
     * @param   key
     * The character string identifying the KeyMap entry. Trailing
     * spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @return  The length of the entry. One for a scalar, greater than one for
     * a vector. A value of zero is returned if the KeyMap does not
     * contain the named entry.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native int mapLength( String key );

    /** 
     * Check if an entry with a given key exists in a KeyMap.   
     * This function returns a flag indicating if the KeyMap contains an
     * entry with the given key.
     * <h4>Notes</h4>
     * <br> - A non-zero function value
     * is returned if the key exists but has an undefined value (that is,
     * the returned value does not depend on whether the entry has a
     * defined value or not).
     * <br> - A function value of
     * zero
     * will be returned if an error has already occurred, or if this
     * function should fail for any reason.
     * 
     * @param   key
     * The character string identifying the KeyMap entry. Trailing spaces are
     * ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @return  
     *          true iff this map contains an entry for <tt>key</tt>
     *       
     * @throws  AstException  if an error occurred in the AST library
     */
    public native boolean mapHasKey( String key );

    /** 
     * Get the key at a given index within the KeyMap.   
     * This function returns a string holding the key for the entry with
     * the given index within the KeyMap.
     * <p>
     * This function is intended primarily as a means of iterating round all
     * the elements in a KeyMap. For this purpose, the number of entries in
     * the KeyMap should first be found using
     * astMapSize
     * and this function should then be called in a loop, with the index
     * value going from
     * zero to one less than the size of the KeyMap.
     * The index associated with a given entry is determined by the SortBy
     * attribute.
     * <h4>Notes</h4>
     * <br> - The returned pointer is guaranteed to remain valid and the
     * string to which it points will not be over-written for a total
     * of 50 successive invocations of this function. After this, the
     * memory containing the string may be re-used, so a copy of the
     * string should be made if it is needed for longer than this.
     * <br> - A NULL pointer will be returned if this function is invoked
     * with the AST error status set, or if it should fail for any
     * reason.
     * @param   index
     * The index into the KeyMap. The first entry has index
     * zero, and the last has index "size-1", where "size" is the value
     * returned by the astMapSize function.
     * 
     * @return  A pointer to a null-terminated string containing the key.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native String mapKey( int index );

    /** 
     * Get the data type of an entry in a KeyMap.   
     * This function returns a value indicating the data type of a
     * named entry in a KeyMap. This is the data type which was used when the
     * entry was added to the KeyMap.
     * <h4>Notes</h4>
     * <br> - A function value of AST__BADTYPE will be returned if an error has
     * already occurred, or if this function should fail for any reason.
     * 
     * @param   key
     * The character string identifying the KeyMap entry. Trailing
     * spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @return  One of AST__INTTYPE (for integer), AST__SINTTYPE (for
     * short int),
     * AST__BYTETYPE (for unsigned bytes
     * <br> - i.e. unsigned chars
     * ) AST__DOUBLETYPE (for double
     * precision floating point), AST__FLOATTYPE (for single
     * precision floating point), AST__STRINGTYPE (for character string),
     * AST__OBJECTTYPE (for AST Object pointer), AST__POINTERTYPE (for
     * arbitrary C pointer) or AST__UNDEFTYPE (for undefined values
     * created by
     * astMapPutU).
     * AST__BADTYPE is returned if the supplied key is not found in the KeyMap.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native int mapType( String key );

    /** 
     * Store a double value.   
     * @param   key
     * A character string to be stored with the value, which can later
     * be used to identify the value. Trailing spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @param   value
     * value to store
     * @param   comment
     * A pointer to a null-terminated comment string to be stored with the
     * value. A NULL pointer may be supplied, in which case no comment is
     * stored.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native void mapPut0D( String key, double value, String comment );

    /** 
     * Store an integer value.   
     * @param   key
     * A character string to be stored with the value, which can later
     * be used to identify the value. Trailing spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @param   value
     * value to store
     * @param   comment
     * A pointer to a null-terminated comment string to be stored with the
     * value. A NULL pointer may be supplied, in which case no comment is
     * stored.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native void mapPut0I( String key, int value, String comment );

    /** 
     * Store a string value.   
     * @param   key
     * A character string to be stored with the value, which can later
     * be used to identify the value. Trailing spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @param   value
     * value to store
     * @param   comment
     * A pointer to a null-terminated comment string to be stored with the
     * value. A NULL pointer may be supplied, in which case no comment is
     * stored.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native void mapPut0C( String key, String value, String comment );

    /** 
     * Store an AstObject.   
     * @param   key
     * A character string to be stored with the value, which can later
     * be used to identify the value. Trailing spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @param   value
     * value to store
     * @param   comment
     * A pointer to a null-terminated comment string to be stored with the
     * value. A NULL pointer may be supplied, in which case no comment is
     * stored.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native void mapPut0A( String key, AstObject value, String comment );

    /** 
     * Retrieve a double value.   
     * @param   key
     * The character string identifying the value to be retrieved. Trailing
     * spaces are ignored. The supplied string is converted to upper
     * case before use if the KeyCase attribute is currently set to zero.
     * 
     * @return  
     *          object holding value stored in this map under <tt>key</tt>,
     *          or <tt>null</tt> if <tt>key</tt> was not present
     *       
     * @throws  AstException  if an error occurred in the AST library
     */
    public native Double mapGet0D( String key );

    /** 
     * Retrieve an integer value.   
     * @param   key
     * The character string identifying the value to be retrieved. Trailing
     * spaces are ignored. The supplied string is converted to upper
     * case before use if the KeyCase attribute is currently set to zero.
     * 
     * @return  
     *          object holding value stored in this map under <tt>key</tt>,
     *          or <tt>null</tt> if <tt>key</tt> was not present
     *       
     * @throws  AstException  if an error occurred in the AST library
     */
    public native Integer mapGet0I( String key );

    /** 
     * Retrieve a string value.   
     * @param   key
     * The character string identifying the value to be retrieved. Trailing
     * spaces are ignored. The supplied string is converted to upper
     * case before use if the KeyCase attribute is currently set to zero.
     * 
     * @return  
     *          object holding value stored in this map under <tt>key</tt>,
     *          or <tt>null</tt> if <tt>key</tt> was not present
     *       
     * @throws  AstException  if an error occurred in the AST library
     */
    public native String mapGet0C( String key );

    /** 
     * Retrieve an AstObject.   
     * @param   key
     * The character string identifying the value to be retrieved. Trailing
     * spaces are ignored. The supplied string is converted to upper
     * case before use if the KeyCase attribute is currently set to zero.
     * 
     * @return  
     *          object holding value stored in this map under <tt>key</tt>,
     *          or <tt>null</tt> if <tt>key</tt> was not present
     *       
     * @throws  AstException  if an error occurred in the AST library
     */
    public native AstObject mapGet0A( String key );

    /** 
     * Store a double array.   
     * @param   key
     * A character string to be stored with the values, which can later
     * be used to identify the values. Trailing spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @param   value
     * array to store
     * @param   comment
     * A pointer to a null-terminated comment string to be stored with the
     * values. A NULL pointer may be supplied, in which case no comment is
     * stored.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native void mapPut1D( String key, double[] value, String comment );

    /** 
     * Store an integer array.   
     * @param   key
     * A character string to be stored with the values, which can later
     * be used to identify the values. Trailing spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @param   value
     * array to store
     * @param   comment
     * A pointer to a null-terminated comment string to be stored with the
     * values. A NULL pointer may be supplied, in which case no comment is
     * stored.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native void mapPut1I( String key, int[] value, String comment );

    /** 
     * Store a string array.   
     * @param   key
     * A character string to be stored with the values, which can later
     * be used to identify the values. Trailing spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @param   value
     * array to store
     * @param   comment
     * A pointer to a null-terminated comment string to be stored with the
     * values. A NULL pointer may be supplied, in which case no comment is
     * stored.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native void mapPut1C( String key, String[] value, String comment );

    /** 
     * Store an AstObject array.   
     * @param   key
     * A character string to be stored with the values, which can later
     * be used to identify the values. Trailing spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @param   value
     * array to store
     * @param   comment
     * A pointer to a null-terminated comment string to be stored with the
     * values. A NULL pointer may be supplied, in which case no comment is
     * stored.
     * 
     * @throws  AstException  if an error occurred in the AST library
     */
    public native void mapPut1A( String key, AstObject[] value, String comment );

    /** 
     * Retrieve a double array.   
     * @param   key
     * The character string identifying the value to be retrieved. Trailing
     * spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @return  
     *          value stored in this map under <code>key</code> 
     *          as a double array, or null
     *       
     * @throws  AstException  if an error occurred in the AST library
     */
    public native double[] mapGet1D( String key );

    /** 
     * Retrieve an integer array.   
     * @param   key
     * The character string identifying the value to be retrieved. Trailing
     * spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @return  
     *          value stored in this map under <code>key</code> 
     *          as an integer array, or null
     *       
     * @throws  AstException  if an error occurred in the AST library
     */
    public native int[] mapGet1I( String key );

    /** 
     * Retrieve a string array.   
     * @param   key
     * The character string identifying the value to be retrieved. Trailing
     * spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @param   sleng
     * maximum length of any of the strings in the returned array;
     *             any longer strings will be truncated
     *          
     * @return  
     *          value stored in this map under <code>key</code> 
     *          as a String array, or null
     *       
     * @throws  AstException  if an error occurred in the AST library
     */
    public native String[] mapGet1C( String key, int sleng );

    /** 
     * Retrieve an array of AstObjects.   
     * @param   key
     * The character string identifying the value to be retrieved. Trailing
     * spaces are ignored.
     * The supplied string is converted to upper case before use if the
     * KeyCase attribute is currently set to zero.
     * 
     * @return  
     *          value stored in this map under <code>key</code> 
     *          as an AstObject array, or null
     *       
     * @throws  AstException  if an error occurred in the AST library
     */
    public native AstObject[] mapGet1A( String key );

}
