/* ********************************************************
 * This file automatically generated by NullRegion.pl.
 *                   Do not edit.                         *
 **********************************************************/

package uk.ac.starlink.ast;


/**
 * Java interface to the AST NullRegion class
 *  - a boundless region within a Frame. 
 * The NullRegion class implements a Region with no bounds within a Frame.
 * If the Negated attribute of a NullRegion is false, the NullRegion
 * represents a Region containing no points. If the Negated attribute of
 * a NullRegion is true, the NullRegion represents an infinite Region
 * (that is, all points in the coordinate system are inside the NullRegion).
 * <h4>Licence</h4>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public Licence as
 * published by the Free Software Foundation; either version 2 of
 * the Licence, or (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be
 * useful,but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public Licence for more details.
 * <p>
 * You should have received a copy of the GNU General Public Licence
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
 * 02110-1301, USA
 * 
 * 
 * @see  <a href='http://star-www.rl.ac.uk/cgi-bin/htxserver/sun211.htx/?xref_NullRegion'>AST NullRegion</a>  
 */
public class NullRegion extends Region {
    /** 
     * Create a NullRegion.   
     * This function creates a new NullRegion and optionally initialises its
     * attributes.
     * <p>
     * A NullRegion is a Region with no bounds. If the Negated attribute of a
     * NullRegion is false, the NullRegion represents a Region containing no
     * points. If the Negated attribute of a NullRegion is true, the NullRegion
     * represents an infinite Region containing all points within the
     * coordinate system.
     * <h4>Notes</h4>
     * <br> - A null Object pointer (AST__NULL) will be returned if this
     * function is invoked with the AST error status set, or if it
     * should fail for any reason.
     * @param  frame  A pointer to the Frame in which the region is defined. A deep
     * copy is taken of the supplied Frame. This means that any
     * subsequent changes made to the Frame using the supplied pointer
     * will have no effect the Region.
     * 
     * @param  unc  An optional pointer to an existing Region which specifies the
     * uncertainties associated with positions in the supplied Frame.
     * The uncertainty in any point in the Frame is found by shifting the
     * supplied "uncertainty" Region so that it is centred at the point
     * being considered. The area covered by the shifted uncertainty
     * Region then represents the uncertainty in the position. The
     * uncertainty is assumed to be the same for all points.
     * <p>
     * If supplied, the uncertainty Region must be of a class for which
     * all instances are centro-symetric (e.g. Box, Circle, Ellipse, etc.)
     * or be a Prism containing centro-symetric component Regions. A deep
     * copy of the supplied Region will be taken, so subsequent changes to
     * the uncertainty Region using the supplied pointer will have no
     * effect on the created Box. Alternatively,
     * a NULL Object pointer
     * may be supplied, in which case a default uncertainty of zero is
     * used.
     * 
     * @throws  AstException  if an error occurred in the AST library
    */
    public NullRegion( Frame frame, Region unc ) {
        construct( frame, unc );
    }
    private native void construct( Frame frame, Region unc );

}
