#+
#  Name:
#     JMaker.pm

#  Purpose:
#     Provide functions for generating Java source code.

#  Usage:
#     use JMaker

#  Type of module
#     Perl module.

#  Description:
#     This module provides a number of functions which can be invoked
#     by perl scripts to assist in generating Java source code.
#     It is used by the scripts which generate java source files
#     for the java interface to AST.
#
#     In general these functions produce a javadoc header, and a 
#     native member declaration.  Doing it in this way rather
#     than writing the java directly allows prologue comments extracted
#     wholesale from the original AST source code to be inserted
#     easily and consistently into the java source as javadoc comments.
#     It also allows doc comments and attribute getter/setter
#     methods to be written in a consistent way across all files.
#
#     The functions provided here are intended as a toolkit specific
#     to the task at hand - they are not comprehensive enough to
#     be able to generate all required java source.
#
#     The arguments are generally supplied as a hash with values
#     keyed by strings such as 'purpose', 'descrip', 'name' etc.

#  Author:
#     MBT: Mark Taylor (Starlink)    

#  History:
#     1-OCT-2001 (MBT):
#        Original version.
#-


package JMaker;
use Exporter;
use warnings FATAL => qw(all);

@ISA = qw( Exporter );
@EXPORT = qw(
    makeClassHeader
    makeNativeMethod
    makeNativeConstructor
    makeStaticNativeMethod
    makeJavaMethodHeader
    makeSetAttrib
    makeGetAttrib
    makeSetAttribByAxis
    makeGetAttribByAxis
    makeSetAttribByElement
    makeGetAttribByElement
    jdocize
    deSentence
);
             
use strict;

my( $cmd ) = $0;
$cmd =~ s%^.*/%%;

print "/* ********************************************************\n";
print " * This file automatically generated by $cmd.\n";
print " *                   Do not edit.                         *\n";   
print " **********************************************************/\n";
print "\n";


my( %typeLetters ) = ( 
   String  => "C",
   float   => "F",
   double  => "D",
   int     => "I",
   boolean => "B",
);

my( $htxserver ) = 
   "http://star-www.rl.ac.uk/cgi-bin/htxserver/sun211.htx/?xref_";
   

sub jdocize {
   my( $text ) = @_;
   if ( $text ) {
      $text = "\n" . $text;
      $text =~ s/\n/\n     * /g;
      $text =~ s/(\n     \* *\n)/\n     \* <p>\n/g;
      $text =~ s/(\n     \* - )/\n     \* <br> - /g;
   } else {
     $text = '';
   }
   return $text;
}

sub deSentence {
   my( $text ) = @_;
   if ( $text ) {
      if ( $text =~ /^[A-Z][a-z ]/ ) {
         substr( $text, 0, 1 ) =~ tr/A-Z/a-z/;
      }
      $text =~ s/[\.\s]*$//;
   }
   return $text;
}

sub toSentence {
   my( $text ) = @_;
   substr( $text, 0, 1 ) =~ tr/a-z/A-Z/;
   $text =~ s/[\s\.]+$//;
   return $text . ".  ";
}

sub capFirst {
   my( $name ) = @_;
   substr( $name, 0, 1 ) =~ tr/a-z/A-Z/;
   return $name;
}

sub makeNativeMethod {
   makeMethodHeader( @_, qualifiers => 'native' );
   print( ";\n\n" );
}

sub makeStaticNativeMethod {
   makeMethodHeader( @_, qualifiers => 'static native' );
   print( ";\n\n" );
}

sub makeJavaMethodHeader {
   makeMethodHeader( @_ );
}

sub makeMethodHeader {
   my( %args ) = @_;
   my( $name ) = $args{ 'name' };
   my( @params ) = @{$args{ 'params' }};
   my( $return ) = $args{ 'return' };
   my( $purpose ) = $args{ 'purpose' };
   my( $descrip ) = $args{ 'descrip' };
   my( $extra ) = $args{ 'extra' } || "";
   my( $qualifiers ) = $args{ 'qualifiers' } || "";
   if ( $qualifiers ) { $qualifiers .= " " }

   my( $startText ) = jdocize( toSentence( $purpose ) );
   my( $moreText ) = jdocize( $descrip ) . jdocize( $extra );

   print( "    /** $startText $moreText" );
   my( @plist ) = ();
   my( $param );
   foreach $param ( @params ) {
      my( $ptype ) = ${$param}{ 'type' };
      my( $pname ) = ${$param}{ 'name' };
      my( $pdescrip ) = ${$param}{ 'descrip' };
      push( @plist, "$ptype $pname" );
      if ( $pdescrip ) {
         $pdescrip =~ s/^\s*//;
         print( jdocize( "\@param   $pname\n$pdescrip" ) );
      }
   }
   my( $rtype ) = ${$return}{ 'type' };
   my( $rdescrip ) = ${$return}{ 'descrip' };
   if ( $rdescrip ) {
      print( jdocize( "\@return  $rdescrip" ) );
   }
   print( jdocize( '@throws  ' 
                 . 'AstException  if an error occurred in the AST library' ) );
   print( "\n     */\n" );
   print( "    public $qualifiers$rtype $name( " . join( ", ", @plist )
                                                 . " )" );
}

sub makeNativeConstructor {
   my( %args ) = @_;
   my( $Name ) = $args{ 'Name' };
   my( $purpose ) = $args{ 'purpose' };
   my( $descrip ) = $args{ 'descrip' };
   my( $extra ) = $args{ 'extra' } || "";
   my( @params ) = @{$args{ 'params' }};

   my( $startText ) = jdocize( toSentence( $purpose ) );
   my( $moreText ) = jdocize( $descrip ) . jdocize( $extra );

   print( "    /** $startText $moreText" );
   my( $param );
   my( @plist );
   my( @pl );
   foreach $param ( @params ) {
      my( $ptype ) = ${$param}{ 'type' };
      my( $pname ) = ${$param}{ 'name' };
      my( $pdescrip ) = ${$param}{ 'descrip' };
      push( @plist, "$ptype $pname" );
      push( @pl, $pname );
      if ( $pdescrip ) {
         print( jdocize( "\@param  $pname  $pdescrip" ) );
      }
   }
   print( jdocize( '@throws  '
                 . 'AstException  if an error occurred in the AST library' ) );
   print( "\n    */\n" );
   print( "    public $Name( " . join( ", ", @plist ) . " ) {\n" );
   print( "        construct( " . join( ", ", @pl ) . " );\n" );
   print( "    }\n" );
   print( "    private native void construct( " . join( ", ", @plist ) 
                                                . " );\n" );
   print( "\n" );
}



sub makeSetAttrib {
   my( %args ) = @_;
   my( $type ) = $args{ 'type' };
   my( $name ) = $args{ 'name' };
   my( $varname ) = $args{ 'varname' } || $name;
   my( $purpose ) = $args{ 'purpose' };
   my( $descrip ) = $args{ 'descrip' };
   my( $stringtoo ) = $args{ 'stringtoo' };
   my( $applic ) = $args{ 'applic' } 
                 ? "<h4>Class Applicability</h4>\n" . $args{ 'applic' }
                 : "";
   my( $extra ) = $args{ 'extra' } || "";

   my( $Name ) = capFirst( $name );
   my( $startText ) = jdocize( deSentence( $purpose ) || "$Name attribute" );
   my( $moreText ) = jdocize( $descrip ) 
                   . jdocize( $applic )
                   . jdocize( $extra );
   my( $setMethod ) = "set" . $typeLetters{ $type };

   print <<"__EOT__";
    /**
     * Set $startText.  $moreText
     *
     * \@param  $varname   the $Name attribute of this object
     */
    public void set$Name( $type $varname ) {
       $setMethod( "$Name", $varname );
    }

__EOT__
   if ( $stringtoo ) {
      print <<"__EOT__";
   /**
    * Set $startText. $moreText
    *
    * \@param  $varname  formatted string giving the $Name 
    *          attribute of this object
    */
   public void set$Name( String $varname ) {
      setC( "$Name", $varname );
   }

__EOT__
   }
}

sub makeGetAttrib {
   my( %args ) = @_;
   my( $type ) = $args{ 'type' };
   my( $name ) = $args{ 'name' };
   my( $purpose ) = $args{ 'purpose' };
   my( $descrip ) = $args{ 'descrip' };
   my( $applic ) = $args{ 'applic' } 
                 ? "<h4>Class Applicability</h4>\n" . $args{ 'applic' }
                 : "";
   my( $extra ) = $args{ 'extra' } || "";

   my( $Name ) = capFirst( $name );
   my( $startText ) = jdocize( deSentence( $purpose ) || "$Name attribute" );
   my( $moreText ) = jdocize( $descrip ) 
                   . jdocize( $applic )
                   . jdocize( $extra );
   my( $getMethod ) = "get" . $typeLetters{ $type };

   print <<"__EOT__";
    /**
     * Get $startText.  $moreText
     *
     * \@return  this object's $Name attribute
     */
    public $type get$Name() {
        return $getMethod( "$Name" );
    }

__EOT__
}

sub makeSetAttribByAxis {
   my( %args ) = @_;
   my( $type ) = $args{ 'type' };
   my( $name ) = $args{ 'name' };
   my( $purpose ) = $args{ 'purpose' };
   my( $descrip ) = $args{ 'descrip' };
   my( $applic ) = $args{ 'applic' } 
                 ? "<h4>Class Applicability</h4>\n" . $args{ 'applic' }
                 : "";
   my( $extra ) = $args{ 'extra' } || "";

   my( $Name ) = capFirst( $name );
   my( $startText ) = jdocize( deSentence( $purpose ) || "$Name attribute" );
   my( $moreText ) = jdocize( $descrip ) 
                   . jdocize( $applic )
                   . jdocize( $extra );
   my( $setMethod ) = "set" . $typeLetters{ $type };

   print << "__EOT__";
    /**
     * Set $startText by axis.  $moreText
     *
     * \@param  axis  index of the axis for which the attribute is to be set.
     *               Must be >= 1 and <= the value of the <code>Naxes</code>
     *               attribute.
     * \@param  $name  the $Name attribute for the indicated axis 
     *                of this object.
     * \@throws  IndexOutOfBoundsException  if <code>axis</code> is not in the
     *                                     range <code>1..Naxes</code>
     */
    public void set$Name( int axis, $type $name ) {
        int naxes = getNaxes();
        if ( axis >= 1 && axis <= naxes ) {
            $setMethod( "$Name" + "(" + axis + ")", $name );
        }
        else {
            throw new IndexOutOfBoundsException( 
                "axis " + axis + " value is not in the range 1.." + naxes );
        }
    }

__EOT__
}

sub makeGetAttribByAxis {
   my( %args ) = @_;
   my( $type ) = $args{ 'type' };
   my( $name ) = $args{ 'name' };
   my( $purpose ) = $args{ 'purpose' };
   my( $descrip ) = $args{ 'descrip' };
   my( $applic ) = $args{ 'applic' } 
                 ? "<h4>Class Applicability</h4>\n" . $args{ 'applic' }
                 : "";
   my( $extra ) = $args{ 'extra' } || "";

   my( $Name ) = capFirst( $name );
   my( $startText ) = jdocize( deSentence( $purpose ) || "$Name attribute" );
   my( $moreText ) = jdocize( $descrip ) 
                   . jdocize( $applic )
                   . jdocize( $extra );
   my( $getMethod ) = "get" . $typeLetters{ $type };

   print << "__EOT__";
    /**
     * Get $startText by axis.  $moreText
     *
     * \@param  axis  index of the axis for which the attribute is to be got.
     *               Must be >= 1 and <= the value of the <code>Naxes</code>
     *               attribute.
     * \@return       the $Name attribute for the indicated axis of this object
     * \@throws  IndexOutOfBoundsException  if <code>axis</code> is not in the
     *                                     range <code>1..Naxes</code>
     */
    public $type get$Name( int axis ) {
        int naxes = getNaxes();
        if ( axis >= 1 && axis <= naxes ) {
            return $getMethod( "$Name" + "(" + axis + ")" );
        }
        else {
            throw new IndexOutOfBoundsException(
                "axis value " + axis + " is not in the range 1.." + naxes );
        }
    }

__EOT__
}

my( $elementList ) = jdocize( q{

    The available elements are:
    <ul>
    <li> Axes: Axis lines drawn through tick marks
                using <tt>astGrid</tt>
    <li> Axis1: Axis line drawn through tick marks on axis 1
                using <tt>astGrid</tt>
    <li> Axis2: Axis line drawn through tick marks on axis 2
                using <tt>astGrid</tt>
    <li> Border: The Plot border
                drawn using <tt>astBorder</tt> or <tt>astGrid</tt>
    <li> Curves: Geodesic curves
                drawn using <tt>astCurve</tt>, <tt>astGenCurve</tt> 
                or <tt>astPolyCurve</tt>
    <li> Grid: Grid lines
                drawn using <tt>astGridLine</tt> or <tt>astGrid</tt> 
    <li> Grid1: Grid lines which cross axis 1,
                drawn using <tt>astGridLine</tt>
                or <tt>astGrid</tt>
    <li> Grid2: Grid lines which cross axis 2,
                drawn using <tt>astGridLine</tt> or <tt>astGrid</tt>
    <li> Markers: Graphical markers (symbols)
                drawn using <tt>astMark</tt>
    <li> NumLab: Numerical axis labels 
                drawn using <tt>astGrid</tt>
    <li> NumLab1: Numerical labels for axis 1
                drawn using <tt>astGrid</tt>
    <li> NumLab2: Numerical labels for axis 2
                drawn using <tt>astGrid</tt>
    <li> Strings: Text strings
                drawn using <tt>astText </tt>
    <li> TextLab: Descriptive axis labels
                drawn using <tt>astGrid</tt>
    <li> TextLab1: Descriptive label for axis 1
                drawn using <tt>astGrid</tt>
    <li> TextLab2: Descriptive label for axis 2
                drawn using <tt>astGrid</tt>
    <li> Ticks: Tick marks (both major and minor)
                drawn using <tt>astGrid</tt>
    <li> Ticks1: Tick marks (both major and minor) for axis 1 
                drawn using <tt>astGrid</tt>
    <li> Ticks2: Tick marks (both major and minor) for axis 2
                drawn using <tt>astGrid</tt>
    <li> Title: The Plot title
                drawn using <tt>astGrid</tt>
    </ul>
} );

sub makeSetAttribByElement {
   my( %args ) = @_;
   my( $type ) = $args{ 'type' };
   my( $name ) = $args{ 'name' };
   my( $purpose ) = $args{ 'purpose' };
   my( $descrip ) = $args{ 'descrip' };
   my( $extra ) = $args{ 'extra' } || "";

   my( $Name ) = capFirst( $name );
   my( $startText ) = jdocize( deSentence( $purpose ) || "$Name attribute" );
   my( $moreText ) = jdocize( $descrip );
   my( $extraText ) = jdocize( $extra );
   my( $setMethod ) = "set" . $typeLetters{ $type };

   print <<"__EOT__";
    /**
     * Set $startText by graphical element.  $moreText $elementList $extraText
     *
     * \@param  element  name of the graphical element for which the attribute
     *                  is to be set
     * \@param  $name  the $Name attribute for the indicated element of this
     *                 object
     */
    public void set$Name( String element, $type $name ) {
        if ( element == null || element.equals( "" ) ) {
            $setMethod( "$Name", $name );
        }
        else {
            $setMethod( "$Name" + "(" + element + ")", $name );
        }
    }

__EOT__
}

sub makeGetAttribByElement {
   my( %args ) = @_;
   my( $type ) = $args{ 'type' };
   my( $name ) = $args{ 'name' };
   my( $purpose ) = $args{ 'purpose' };
   my( $descrip ) = $args{ 'descrip' };
   my( $extra ) = $args{ 'extra' } || "";

   my( $Name ) = capFirst( $name );
   my( $startText ) = jdocize( deSentence( $purpose ) || "$Name attribute" );
   my( $moreText ) = jdocize( $descrip );
   my( $extraText ) = jdocize( $extra );
   my( $getMethod ) = "get" . $typeLetters{ $type };

   print <<"__EOT__";
    /**
     * Get $startText by graphical element.  $moreText $elementList $extraText
     * 
     * \@param  element  name of the graphical element for which the attribute
     *                  is to be got
     * \@return the $Name attribute for the indicated element of this object
     */
    public $type get$Name( String element ) {
        if ( element == null || element.equals( "" ) ) {
            return $getMethod( "$Name" );
        }
        else {
            return $getMethod( "$Name" + "( " + element + ")" );
        }
    }

__EOT__
}

   
sub makeClassHeader {
   my( %args ) = @_;
   my( $Name ) = $args{ 'Name' };
   my( $purpose ) = $args{ 'purpose' };
   my( $descrip ) = $args{ 'descrip' };
   my( $version ) = $args{ 'version' } || "";
   my( $author ) = $args{ 'author' } || "";
   my( $extra ) = $args{ 'extra' } || "";

   my( $astname ) = $Name;
   $astname =~ s/^Ast//;
   my( $startText ) = $purpose 
      ? jdocize( " - " . deSentence( $purpose ) . "." ) : "";
   my( $moreText ) = jdocize( $descrip ) . jdocize( $extra );
   $startText =~ s/^    //mg;
   $moreText =~ s/^    //mg;
   # my( $authorText ) = $author ? "\n * \@author   $author" : "";
   my( $authorText ) = "";
   # my( $versionText ) = $version ? "\n * \@version  $version" : "";
   my( $versionText ) = "";
   my( $seeText ) = "\n * \@see  <a href='$htxserver$astname'>AST $astname</a>";

   print <<__EOT__;

/**
 * Java interface to the AST $astname class$startText $moreText
 * $seeText $authorText $versionText
 */
__EOT__
}

1;

# $Id$
