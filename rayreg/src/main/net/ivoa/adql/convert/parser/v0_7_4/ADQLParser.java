/* Generated By:JavaCC: Do not edit this line. ADQLParser.java */
package net.ivoa.adql.convert.parser.v0_7_4;

import net.ivoa.adql.convert.ADQLs2DOMParser;

import java.io.* ;
import java.util.ArrayList;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;

import javax.xml.transform.TransformerException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;

public class ADQLParser extends ADQLs2DOMParser implements ADQLParserConstants {

    public static void main( String args[] )
        throws TransformerException
    {

        ADQLParser p = null ;
        if ( args.length < 1  ) {
            p = new ADQLParser(System.in) ;
        }
        else {
            try {
                p = new ADQLParser(new DataInputStream(
                                new FileInputStream(args[0]))) ;
            }
            catch (FileNotFoundException e) {
                p = new ADQLParser(System.in) ;
            }
        } // else ends here

        p.parseSelect() ;
        System.out.println("Parse Successful") ;

    } // main ends here

    private boolean defineSTCR = false;
    private boolean defineSTCC = false;

    public final static String ADQL_NS = "http://www.ivoa.net/xml/ADQL/v0.7.4";
    public final static String ADQL_PREFIX = "ad";
    public final static String STCR_NS = "urn:nvo-region";
    public final static String STCR_PREFIX = "reg";
    public final static String STCC_NS = "urn:nvo-coords";
    public final static String STCC_PREFIX = "stc";

    public ADQLParser() {
        super();
    }

    protected Element createADQLElement(String name) {
        if (nsmode == MODE_ALWAYS_QUALIFIED) name = ADQL_PREFIX + ":" + name;
        return doc.createElementNS(ADQL_NS, name);
    }

    private Element createSTCRElement(String name) {
        defineSTCR = true;
//        if (nsmode == MODE_ALWAYS_QUALIFIED) name = STCR_PREFIX + ":" + name;
        name = STCR_PREFIX + ":" + name;
        return doc.createElementNS(STCR_NS, name);
    }

    private Element createSTCCElement(String name) {
        defineSTCC = true;
        if (nsmode == MODE_ALWAYS_QUALIFIED) name = STCC_PREFIX + ":" + name;
        return doc.createElementNS(STCC_NS, name);
    }

    private Element createRootSelect() {
        Element root = createADQLElement("Select");
        root.setAttribute("xmlns:ad", ADQL_NS);
        if (defineSTCR) root.setAttribute("xmlns:" + STCR_PREFIX, STCR_NS);
        if (defineSTCC) root.setAttribute("xmlns:" + STCC_PREFIX, STCC_NS);
        root.setAttribute("xmlns:xsi", XSI_NS);
        if (nsmode == MODE_DEFAULT_NS) root.setAttribute("xmlns", ADQL_NS);
        doc.appendChild(root);
        return root;
    }

    private Element getBinaryExpr(String name, boolean setXSIType,
                                  Element arg1, Element arg2, String op)
    {
        Element out = createADQLElement(name);
        if (setXSIType) setXSITypeAttr(out, "binaryExprType");
        out.setAttribute("Oper", op);
        // doc.renameNode(arg1, ADQL_NS, ADQL_PREFIX + ":Arg");
        // doc.renameNode(arg2, ADQL_NS, ADQL_PREFIX + ":Arg");
        out.appendChild(arg1);
        out.appendChild(arg2);
        return out;
    }

    private static void setXSITypeAttr(Element on, String type) {
        on.setAttributeNS(XSI_NS, "xsi:type", ADQL_PREFIX + ':' + type);
    }

    public Element parseSelect() throws TransformerException {
        try {
            return Select();
        }
        catch (ParseException ex) {
            throw new TransformerException(ex);
        }
    }

    public Element parseWhere() throws TransformerException {
        try {
            return Where("Where");
        }
        catch (ParseException ex) {
            throw new TransformerException(ex);
        }
    }

  final public String MathFunctionName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_abs:
      jj_consume_token(K_abs);
      break;
    case K_ceiling:
      jj_consume_token(K_ceiling);
      break;
    case K_degrees:
      jj_consume_token(K_degrees);
      break;
    case K_exp:
      jj_consume_token(K_exp);
      break;
    case K_floor:
      jj_consume_token(K_floor);
      break;
    case K_log10:
      jj_consume_token(K_log10);
      break;
    case K_log:
      jj_consume_token(K_log);
      break;
    case K_pi:
      jj_consume_token(K_pi);
      break;
    case K_rand:
      jj_consume_token(K_rand);
      break;
    case K_round:
      jj_consume_token(K_round);
      break;
    case K_square:
      jj_consume_token(K_square);
      break;
    case K_sqrt:
      jj_consume_token(K_sqrt);
      break;
    case K_truncate:
      jj_consume_token(K_truncate);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return token.image.toUpperCase();}
    throw new Error("Missing return statement in function");
  }

  final public String AggregateFunctionName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AVG:
      jj_consume_token(K_AVG);
      break;
    case K_COUNT:
      jj_consume_token(K_COUNT);
      break;
    case K_MAX:
      jj_consume_token(K_MAX);
      break;
    case K_MIN:
      jj_consume_token(K_MIN);
      break;
    case K_SUM:
      jj_consume_token(K_SUM);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return token.image.toUpperCase();}
    throw new Error("Missing return statement in function");
  }

  final public String TrigonometricFunctionName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_asin:
      jj_consume_token(K_asin);
      break;
    case K_acos:
      jj_consume_token(K_acos);
      break;
    case K_atan:
      jj_consume_token(K_atan);
      break;
    case K_atan2:
      jj_consume_token(K_atan2);
      break;
    case K_cos:
      jj_consume_token(K_cos);
      break;
    case K_sin:
      jj_consume_token(K_sin);
      break;
    case K_tan:
      jj_consume_token(K_tan);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return token.image.toUpperCase();}
    throw new Error("Missing return statement in function");
  }

  final public Element FunctionOfOneVar(String name, boolean setXSIType) throws ParseException {
    boolean isMath=false;
    boolean isAgg=false;
    boolean isTrig=false;
    Element arg;
    String  fname;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_abs:
    case K_ceiling:
    case K_degrees:
    case K_exp:
    case K_floor:
    case K_log:
    case K_log10:
    case K_pi:
    case K_rand:
    case K_round:
    case K_square:
    case K_sqrt:
    case K_truncate:
      fname = MathFunctionName();
                                                isMath =true;
      break;
    case K_AVG:
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_SUM:
      fname = AggregateFunctionName();
                                                isAgg  =true;
      break;
    case K_asin:
    case K_acos:
    case K_atan:
    case K_atan2:
    case K_cos:
    case K_sin:
    case K_tan:
      fname = TrigonometricFunctionName();
                                                isTrig =true;
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(71);
    arg = ScalarExpression("Arg");
    jj_consume_token(72);
           Element f = null;
           f  = createADQLElement(name);
           if (setXSIType) {
               if (isMath) {
                   setXSITypeAttr(f, "mathFunctionType");
               } else if (isAgg) {
                   setXSITypeAttr(f, "aggregateFunctionType");
               } else if (isTrig) {
                   setXSITypeAttr(f, "trigonometricFunctionType");
               }
           }
           f.setAttribute("Name", fname);
           f.appendChild(arg);
           {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Element AliasSelectionItem(String name, boolean setXSIType) throws ParseException {
    Element exp;  // ScalarExpressionType 
    String as = null;
    exp = ScalarExpression(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      jj_consume_token(S_IDENTIFIER);
              as = token.image;
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
        if (as != null) {
            Element a = createADQLElement(name);
            if (setXSIType) setXSITypeAttr(a, "aliasSelectionItemType");
            exp = renameADQLElement(exp, "Expression", null);
            a.appendChild(exp);
            a.setAttribute("As", as);
            exp = a;
        }
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Attr AllOrDistinct(String name) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
      jj_consume_token(K_ALL);
      break;
    case K_DISTINCT:
      jj_consume_token(K_DISTINCT);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        // Note the inconsistent use of case here
        Attr out = doc.createAttribute(name);
        if (token.image.toUpperCase().equals("ALL")) {
            out.setValue("All");
        } else {
            out.setValue("DISTINCT");
        }
        {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final public Element AllSelectionItem(String name, boolean setXSIType) throws ParseException {
   Element all;
    jj_consume_token(73);
        all = createADQLElement(name);
        if (setXSIType) setXSITypeAttr(all, "allSelectionItemType");
        {if (true) return all;}
    throw new Error("Missing return statement in function");
  }

  final public Element ArchiveTable(String name, boolean setXSIType) throws ParseException {
    String archive=null, table=null, alias=null;
    jj_consume_token(S_IDENTIFIER);
                    archive=token.image;
    jj_consume_token(74);
    jj_consume_token(S_IDENTIFIER);
                    table=token.image;
    jj_consume_token(S_IDENTIFIER);
                    alias=token.image;
        Element a = createADQLElement(name);
        if (setXSIType) setXSITypeAttr(a, "archiveTableType");
        a.setAttribute("Archive", archive);
        a.setAttribute("Name", table);
        a.setAttribute("Alias", alias);
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Element Atom(String name, boolean setXSIType) throws ParseException {
    Element l;
    l = Literal("Literal", true);
        Element a = createADQLElement(name);
        if (setXSIType) setXSITypeAttr(a, "atomType");
        a.appendChild(l);
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Element BetweenPred(String name, boolean setXSIType) throws ParseException {
     boolean not=false;
     Element arg0, arg1,arg2;
    arg0 = ScalarExpression("Arg");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
              not=true;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    arg1 = ScalarExpression("Arg");
    jj_consume_token(K_AND);
    arg2 = ScalarExpression("Arg");
        Element b = createADQLElement(name);
        if (not) {
            if (setXSIType) setXSITypeAttr(b, "notBetweenPredType");
        } else {
            if (setXSIType) setXSITypeAttr(b, "betweenPredType");
        }
        b.appendChild(arg0);
        b.appendChild(arg1);
        b.appendChild(arg2);
        {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Element ClosedExpr(String name, boolean setXSIType) throws ParseException {
     Element arg;
    jj_consume_token(71);
    arg = ScalarExpression("Arg");
    jj_consume_token(72);
        Element c = createADQLElement(name);
        if (setXSIType) setXSITypeAttr(c, "closedExprType");
        c.appendChild(arg);
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Element ClosedSearch(String name, boolean setXSIType) throws ParseException {
    Element s;
    jj_consume_token(71);
    s = Search(name);
    jj_consume_token(72);
        Element c = createADQLElement(name);
        if (setXSIType) setXSITypeAttr(c, "closedSearchType");
        c.appendChild(s);
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Element ColumnReference(String name, boolean setXSIType) throws ParseException {
    String table;
    String cname;
    jj_consume_token(S_IDENTIFIER);
                    table=token.image;
    jj_consume_token(75);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    case 73:
      jj_consume_token(73);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                            cname=token.image;
        Element c = createADQLElement(name);
        if (setXSIType) setXSITypeAttr(c, "columnReferenceType");
        c.setAttribute("Table", table);
        c.setAttribute("Name", cname);
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Element ComparisonPred(String name, boolean setXSIType) throws ParseException {
    String divider;
    Element last;
    Element arg1, arg2;
    arg1 = ScalarExpression("Arg");
    divider = ComparisonDivider();
    arg2 = ScalarExpression("Arg");
         Element c = createADQLElement(name);
         Matcher like =
             Pattern.compile(".*LIKE",
                             Pattern.CASE_INSENSITIVE).matcher(divider);
         Matcher not =
           Pattern.compile("NOT.*", Pattern.CASE_INSENSITIVE).matcher(divider);
         if (like.matches()) {
             arg2 = renameADQLElement(arg2, "Pattern", null);
             if (setXSIType) {
                 if (not.matches()) {
                     setXSITypeAttr(c, "notLikePredType");
                 } else {
                     setXSITypeAttr(c, "likePredType");
                 }
             }
         } else {
             if (setXSIType) setXSITypeAttr(c, "comparisonPredType");
             c.setAttribute("Comparison", divider);
         }
         c.appendChild(arg1);
         c.appendChild(arg2);
         {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public String ComparisonDivider() throws ParseException {
    String value="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
      value = Comparison();
      break;
    case K_LIKE:
    case K_NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
              value = "NOT ";
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
                                          value += token.image;
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String Comparison() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 76:
      jj_consume_token(76);
      break;
    case 77:
      jj_consume_token(77);
      break;
    case 78:
      jj_consume_token(78);
      break;
    case 79:
      jj_consume_token(79);
      break;
    case 80:
      jj_consume_token(80);
      break;
    case 81:
      jj_consume_token(81);
      break;
    case 82:
      jj_consume_token(82);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public Element DropTable(String name, boolean setXSIType) throws ParseException {
    jj_consume_token(S_IDENTIFIER);
        Element dt = createADQLElement(name);
        if (setXSIType) setXSITypeAttr(dt, "dropTableType");
        dt.setAttribute("Name", token.image);
        {if (true) return dt;}
    throw new Error("Missing return statement in function");
  }

  final public Element From(String name) throws ParseException {
     ArrayList list = new ArrayList();
     Element got;
    jj_consume_token(K_FROM);
    got = FromTable("Table", true);
                                               list.add(got);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_1;
      }
      jj_consume_token(83);
      got = FromTable("Table", true);
                                               list.add(got);
    }
           Element f = createADQLElement(name);
           for(int i=0; i < list.size(); i++) {
              f.appendChild((Element) list.get(i));
           }
           {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Element FromTable(String name, boolean setXSIType) throws ParseException {
    Element ft;
    if (jj_2_1(2)) {
      ft = ArchiveTable(name, setXSIType);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case 88:
        ft = Table(name, setXSIType);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return ft;}
    throw new Error("Missing return statement in function");
  }

  final public Element GroupBy(String name) throws ParseException {
     ArrayList list = new ArrayList();
     Element cr;
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    cr = ColumnReference("Column", false);
                                            list.add(cr);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_2;
      }
      jj_consume_token(83);
      cr = ColumnReference("Column", false);
                                                list.add(cr);
    }
          Element gb = createADQLElement(name);
          for(int i=0; i < list.size(); i++) {
              gb.appendChild((Element) list.get(i));
          }
          {if (true) return gb;}
    throw new Error("Missing return statement in function");
  }

  final public Element Having(String name) throws ParseException {
     Element st;
    jj_consume_token(K_HAVING);
    st = Search("Condition");
           Element h = createADQLElement(name);
           h.appendChild(st);
           {if (true) return h;}
    throw new Error("Missing return statement in function");
  }

  final public Element IncludeTable(String name, boolean setXSIType) throws ParseException {
    jj_consume_token(S_IDENTIFIER);
         Element it = createADQLElement(name);
         if (setXSIType) setXSITypeAttr(it, "includeTableType");
         it.setAttribute("Name", token.image);
         {if (true) return it;}
    throw new Error("Missing return statement in function");
  }

  final public Element IntersectionSearch(String name, boolean setXSIType) throws ParseException {
    Element arg1, arg2;
    arg1 = IntersectionElement(name, true);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      jj_consume_token(K_AND);
      arg2 = IntersectionElement("Condition", true);
          arg1 = renameADQLElement(arg1, "Condition", null);
//          doc.renameNode(arg1, ADQL_NS, ADQL_PREFIX + ":Condition");
          Element is = createADQLElement(name);
          if (setXSIType) setXSITypeAttr(is, "intersectionSearchType");
          is.appendChild(arg1);
          is.appendChild(arg2);
          arg1 = is;
    }
           {if (true) return arg1;}
    throw new Error("Missing return statement in function");
  }

  final public Element IntersectionElement(String name, boolean setXSIType) throws ParseException {
    Element s;
    if (jj_2_2(2147483647)) {
      s = ClosedSearch(name, true);
    } else if (jj_2_3(2147483647)) {
      s = BetweenPred(name, true);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        s = InverseSearch(name, true);
        break;
      case K_AVG:
      case K_COUNT:
      case K_MAX:
      case K_MIN:
      case K_SUM:
      case K_asin:
      case K_acos:
      case K_atan:
      case K_atan2:
      case K_cos:
      case K_sin:
      case K_tan:
      case K_abs:
      case K_ceiling:
      case K_degrees:
      case K_exp:
      case K_floor:
      case K_log:
      case K_log10:
      case K_pi:
      case K_rand:
      case K_round:
      case K_square:
      case K_sqrt:
      case K_truncate:
      case S_REAL:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case 71:
      case 85:
      case 86:
        s = ComparisonPred(name, true);
        break;
      case K_REGION:
        s = RegionSearch(name, true);
        break;
      case K_XMATCH:
        s = XMatch(name, true);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Element InverseSearch(String name, boolean setXSIType) throws ParseException {
    Element s;
    jj_consume_token(K_NOT);
    s = Search("Condition");
          Element is = createADQLElement(name);
          if (setXSIType) setXSITypeAttr(is, "inverseSearchType");
          is.appendChild(s);
          {if (true) return is;}
    throw new Error("Missing return statement in function");
  }

  final public Element Literal(String name, boolean setXSIType) throws ParseException {
    Element l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_REAL:
    case S_INTEGER:
      l = Number(name, true);
      break;
    case S_CHAR_LITERAL:
      l = XString(name, true);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Element Number(String name, boolean setXSIType) throws ParseException {
   Element num = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_REAL:
      jj_consume_token(S_REAL);
          num = createADQLElement(name);
          if (setXSIType) setXSITypeAttr(num, "realType");
          num.setAttribute("Value", token.image);
          {if (true) return num;}
      break;
    case S_INTEGER:
      jj_consume_token(S_INTEGER);
          num = createADQLElement(name);
          if (setXSIType) setXSITypeAttr(num, "integerType");
          num.setAttribute("Value", token.image);
          {if (true) return num;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OrderDirection() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
      jj_consume_token(K_ASC);
      break;
    case K_DESC:
      jj_consume_token(K_DESC);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                             {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public Element OrderExpression(String name) throws ParseException {
     ArrayList list = new ArrayList();
     Element o;
    jj_consume_token(K_ORDER);
    jj_consume_token(K_BY);
    o = Order("Item");
                                list.add(o);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_4;
      }
      jj_consume_token(83);
      o = Order("Item");
                                    list.add(o);
    }
          Element oe = createADQLElement(name);
          for(int i=0; i < list.size(); i++) {
              oe.appendChild((Element) list.get(i));
          }
          {if (true) return oe;}
    throw new Error("Missing return statement in function");
  }

  final public Element Order(String name) throws ParseException {
    Element s  = null;
    Element oo = null;
    s = ScalarExpression("Expression");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      oo = OrderOption("Order");
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
          Element o = createADQLElement(name);
          o.appendChild(s);
          if (oo != null) o.appendChild(oo);
          {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Element OrderOption(String name) throws ParseException {
    String od;
    od = OrderDirection();
          Element oo = createADQLElement(name);
          oo.setAttribute("Direction", od);
          {if (true) return oo;}
    throw new Error("Missing return statement in function");
  }

  final public Element RegionSearch(String name, boolean setXSIType) throws ParseException {
    String literal;
    jj_consume_token(K_REGION);
    jj_consume_token(71);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_CHAR_LITERAL:
      jj_consume_token(S_CHAR_LITERAL);
      break;
    case S_QUOTED_IDENTIFIER:
      jj_consume_token(S_QUOTED_IDENTIFIER);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                              literal = token.image;
    jj_consume_token(72);
          // Get rid of quotes
          literal = literal.substring(1, literal.length()-1);
          Pattern p = Pattern.compile(" ");
          String[] flds = p.split(literal);
          if (flds.length != 5) {
              {if (true) throw new ParseException("Error parsing region literal:"+literal);}
          }

          if (! flds[0].toUpperCase().equals("CIRCLE")  ||
              ! flds[1].toUpperCase().equals("J2000")) {
              {if (true) throw new ParseException("Unsupported region type, or coordinate system.  Only CIRCLE J2000 supported. "+flds[0]+":"+flds[1]);}
          }

          Element rs = createADQLElement(name);
          if (setXSIType) setXSITypeAttr(rs, "regionSearchType");

          Element ct = createADQLElement("Region");
          ct.setAttributeNS(XSI_NS, "xsi:type", STCR_PREFIX + ":circleType");
          rs.appendChild(ct);

          Element cen = createSTCRElement("Center");
          if (nsmode == MODE_DEFAULT_NS) cen.setAttribute("xmlns", STCC_NS);
          ct.appendChild(cen);

          Element el = createSTCCElement("Pos2Vector");
          cen.appendChild(el);
          Element child = createSTCCElement("Name");
          el.appendChild(child);
          Node txt = doc.createTextNode("RA Dec");
          child.appendChild(txt);
          child = createSTCCElement("CoordValue");
          el.appendChild(child);
          el = child;
          child = createSTCCElement("Value");
          el.appendChild(child);
          el = child;
          child = createSTCCElement("double");
          el.appendChild(child);
          txt = doc.createTextNode(flds[2]);
          child.appendChild(txt);
          child = createSTCCElement("double");
          el.appendChild(child);
          txt = doc.createTextNode(flds[3]);
          child.appendChild(txt);

          double radius;
          if (flds[4].endsWith("\"")) {
              radius =
                Double.parseDouble(flds[4].substring(0, flds[4].length()-1))/60;
          } else if (flds[4].endsWith("'")) {
              radius =
                Double.parseDouble(flds[4].substring(0, flds[4].length()-1));
          } else {
              radius = Double.parseDouble(flds[4]);
          }
          Element rad = createSTCRElement("Radius");
          txt = doc.createTextNode(Double.toString(radius));
          rad.appendChild(txt);
          ct.appendChild(rad);

          {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public Element SelectionItem(String name) throws ParseException {
    Element s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AVG:
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_SUM:
    case K_asin:
    case K_acos:
    case K_atan:
    case K_atan2:
    case K_cos:
    case K_sin:
    case K_tan:
    case K_abs:
    case K_ceiling:
    case K_degrees:
    case K_exp:
    case K_floor:
    case K_log:
    case K_log10:
    case K_pi:
    case K_rand:
    case K_round:
    case K_square:
    case K_sqrt:
    case K_truncate:
    case S_REAL:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case 71:
    case 85:
    case 86:
      s = AliasSelectionItem(name, true);
      break;
    case 73:
      s = AllSelectionItem(name, true);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Element SelectionLimit(String name) throws ParseException {
    jj_consume_token(K_TOP);
    jj_consume_token(S_INTEGER);
             int x = Integer.parseInt(token.image);
             if (x < 0) {
                 {if (true) throw new ParseException("Requested row limit is negative");}
             }
             Element sl = createADQLElement(name);
             sl.setAttribute("Top", Integer.toString(x));
             {if (true) return sl;}
    throw new Error("Missing return statement in function");
  }

  final public Element SelectionList(String name) throws ParseException {
    ArrayList list = new ArrayList();
    Element si;
    si = SelectionItem("Item");
                                    list.add(si);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_5;
      }
      jj_consume_token(83);
      si = SelectionItem("Item");
                                         list.add(si);
    }
          Element sl = createADQLElement(name);
          for(int i=0; i < list.size(); i++) {
              sl.appendChild((Element) list.get(i));
          }
          {if (true) return sl;}
    throw new Error("Missing return statement in function");
  }

  final public Element SelectionOption(String name) throws ParseException {
     Attr allordistinct;
    allordistinct = AllOrDistinct("Option");
           Element so = createADQLElement(name);
           so.setAttributeNode(allordistinct);
           {if (true) return so;}
    throw new Error("Missing return statement in function");
  }

  final public Element Select() throws ParseException {
    Element allow    = null;
    Element restrict = null;
    Element sel      = null;
    Element from     = null;
    Element where    = null;
    Element group    = null;
    Element having   = null;
    Element order    = null;
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
      allow = SelectionOption("Allow");
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_TOP:
      restrict = SelectionLimit("Restrict");
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    sel = SelectionList("SelectionList");
    from = From("From");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      where = Where("Where");
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GROUP:
      group = GroupBy("GroupBy");
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_HAVING:
      having = Having("Having");
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      order = OrderExpression("OrderBy");
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 84:
      jj_consume_token(84);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           Element s = createRootSelect();
           if (allow != null) s.appendChild(allow);
           if (restrict != null) s.appendChild(restrict);
           if (sel != null) s.appendChild(sel);
           if (from != null) s.appendChild(from);
           if (where != null) s.appendChild(where);
           if (group != null) s.appendChild(group);
           if (having != null) s.appendChild(having);
           if (order != null) s.appendChild(order);
           {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Element ScalarExpression(String name) throws ParseException {
     Element s;
    s = PlusExpr(name);
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Element PlusExpr(String name) throws ParseException {
     Element arg1, arg2;
     String op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AVG:
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_SUM:
    case K_asin:
    case K_acos:
    case K_atan:
    case K_atan2:
    case K_cos:
    case K_sin:
    case K_tan:
    case K_abs:
    case K_ceiling:
    case K_degrees:
    case K_exp:
    case K_floor:
    case K_log:
    case K_log10:
    case K_pi:
    case K_rand:
    case K_round:
    case K_square:
    case K_sqrt:
    case K_truncate:
    case S_REAL:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case 71:
      arg1 = MultExpr(name, true);
      label_6:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          jj_consume_token(85);
          break;
        case 86:
          jj_consume_token(86);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                    op = token.image;
        arg2 = MultExpr("Arg", true);
              arg1 = renameADQLElement(arg1, "Arg", null);
              Element be = getBinaryExpr(name, true, arg1, arg2, op);
              arg1 = be;
      }
          {if (true) return arg1;}
      break;
    case 85:
    case 86:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 85:
        jj_consume_token(85);
        break;
      case 86:
        jj_consume_token(86);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                    op = token.image;
      arg1 = MultExpr(name, true);
          // Handle unary +/- for numeric constants.
          if (matchesXSIType(arg1, ADQL_PREFIX + ":AtomType")) {
              Element lit = getChildByTag(arg1, "Literal");
              if (lit != null &&
                  (matchesXSIType(lit,ADQL_PREFIX + ":IntegerType") ||
                   matchesXSIType(lit,ADQL_PREFIX + ":RealType")) )
              {
                  if (op.equals("-")) {
                      String val = arg1.getAttribute("Value");
                      if (val != null) {
                          if (val.trim().startsWith("-")) {
                              val = val.trim().substring(1);
                          } else if (val.trim().startsWith("+")) {
                              val = "-" + val.trim().substring(1);
                          } else {
                              val = "-" + val.trim();
                          }
                          arg1.setAttribute("Value", val);
                      }
                  }
              }
          } else {

              Element un = createADQLElement(name);
              setXSITypeAttr(un, "unaryType");
              un.setAttribute("Oper", op);
              un.appendChild(arg1);
              arg1 =  un;
          }
      label_7:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          jj_consume_token(85);
          break;
        case 86:
          jj_consume_token(86);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                            op = token.image;
        arg2 = MultExpr("Arg", true);
                  arg1 = renameADQLElement(arg1, "Arg", null);
//                  doc.renameNode(arg1, ADQL_NS, ADQL_PREFIX + ":Arg");
                  Element be = getBinaryExpr(name, true, arg1, arg2, op);
                  arg1 = be;
      }
          {if (true) return arg1;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Element MultExpr(String name, boolean setXSIType) throws ParseException {
     Element arg1, arg2;
     String op;
    arg1 = UnitExpr(name, true);
    label_8:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        jj_consume_token(73);
        break;
      case 87:
        jj_consume_token(87);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                       op = token.image;
      arg2 = UnitExpr("Arg", true);
          arg1 = renameADQLElement(arg1, "Arg", null);
          Element be = getBinaryExpr(name, true, arg1, arg2, op);
          arg1 = be;
    }
          {if (true) return arg1;}
    throw new Error("Missing return statement in function");
  }

  final public Element UnitExpr(String name, boolean setXSIType) throws ParseException {
     Element s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_REAL:
    case S_INTEGER:
    case S_CHAR_LITERAL:
      s = Atom(name, true);
      break;
    case 71:
      s = ClosedExpr(name, true);
      break;
    case S_IDENTIFIER:
      s = ColumnReference(name, true);
      break;
    case K_AVG:
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_SUM:
    case K_asin:
    case K_acos:
    case K_atan:
    case K_atan2:
    case K_cos:
    case K_sin:
    case K_tan:
    case K_abs:
    case K_ceiling:
    case K_degrees:
    case K_exp:
    case K_floor:
    case K_log:
    case K_log10:
    case K_pi:
    case K_rand:
    case K_round:
    case K_square:
    case K_sqrt:
    case K_truncate:
      s = FunctionOfOneVar(name, true);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Element Search(String name) throws ParseException {
    Element s;
    s = UnionSearch(name, true);
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Element XString(String name, boolean setXSIType) throws ParseException {
    jj_consume_token(S_CHAR_LITERAL);
          Element lit = createADQLElement(name);
          if (setXSIType) setXSITypeAttr(lit, "stringType");

          String val = token.image;
          val = val.substring(1,val.length()-1);
          Matcher m = Pattern.compile("''").matcher(val);
          val = m.replaceAll("'");

          lit.setAttribute("Value", val);
          {if (true) return lit;}
    throw new Error("Missing return statement in function");
  }

  final public Element Table(String name, boolean setXSIType) throws ParseException {
    String table, alias;
    String temp="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 88:
      jj_consume_token(88);
          temp="#";
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    jj_consume_token(S_IDENTIFIER);
                                      table=token.image;
    jj_consume_token(S_IDENTIFIER);
                                                                          alias=token.image;
         Element t = createADQLElement(name);
         if (setXSIType) setXSITypeAttr(t, "tableType");
         t.setAttribute("Name", table);
         t.setAttribute("Alias", alias);
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Element UnionSearch(String name, boolean setXSIType) throws ParseException {
    Element arg1, arg2;
    arg1 = IntersectionSearch(name, true);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_9;
      }
      jj_consume_token(K_OR);
      arg2 = IntersectionSearch("Condition", true);
                  arg1 = renameADQLElement(arg1, "Condition", null);
//                  doc.renameNode(arg1, ADQL_NS, ADQL_PREFIX + ":Condition");
                  Element us = createADQLElement(name);
                  if (setXSIType) setXSITypeAttr(us, "unionSearchType");
                  us.appendChild(arg1);
                  us.appendChild(arg2);
                  arg1 = us;
    }
          {if (true) return arg1;}
    throw new Error("Missing return statement in function");
  }

  final public Element Where(String name) throws ParseException {
     Element cond;
    jj_consume_token(K_WHERE);
    cond = Search("Condition");
           Element w = createADQLElement(name);
           w.appendChild(cond);
           {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  final public Element XMatch(String name, boolean setXSIType) throws ParseException {
     ArrayList list;
     String    c;
     Element   n;
    jj_consume_token(K_XMATCH);
    jj_consume_token(71);
    list = XMatchList("Table");
    jj_consume_token(72);
    c = Comparison();
    n = Number("Sigma",true);
          Element x = createADQLElement(name);
          if (setXSIType) setXSITypeAttr(x, "XMatchType");
          for(int i=0; i < list.size(); i++) {
             x.appendChild((Element) list.get(i));
          }

          Node txt = doc.createTextNode(c);
          Element nature = createADQLElement("Nature");
          nature.appendChild(txt);
          x.appendChild(nature);

          x.appendChild(n);

          {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList XMatchList(String name) throws ParseException {
     ArrayList list = new ArrayList();
     Element x;
    x = XMatchTableAlias(name);
                                         list.add(x);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_10;
      }
      jj_consume_token(83);
      x = XMatchTableAlias(name);
                                         list.add(x);
    }
         {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Element XMatchTableAlias(String name) throws ParseException {
    Element x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 89:
      jj_consume_token(89);
      x = DropTable(name, true);
      break;
    case S_IDENTIFIER:
      x = IncludeTable(name, true);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(K_XMATCH)) return true;
    if (jj_scan_token(71)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_60()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(S_REAL)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_17()) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(K_NOT)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(75)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(83)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    if (jj_3R_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(K_REGION)) return true;
    if (jj_scan_token(71)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(74)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  public ADQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0xc0000000,0x0,0xc0000000,0x100,0x2020,0x400000,0x0,0x400000,0x600000,0x0,0x0,0x0,0x0,0x40,0xc0400000,0x0,0x0,0x1200,0x0,0x1200,0x0,0xc0000000,0x0,0x2020,0x8000000,0x20000000,0x10000,0x20000,0x2000000,0x1,0x0,0x0,0x0,0xc0000000,0x0,0xc0000000,0x0,0x1000000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1f3fc00,0x7,0x3f8,0x1f3ffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1ff3ffff,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x19f3ffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x19f3ffff,0x0,0x19f3ffff,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x204,0x0,0x7f000,0x7f000,0x80000,0x1000004,0x80000,0x0,0x6000a4,0x20,0x0,0x0,0x80000,0x0,0x60,0x6002a4,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x600000,0x600000,0x600000,0x6000a4,0x800200,0xa4,0x1000000,0x0,0x80000,0x2000004,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ADQLParser(java.io.InputStream stream) {
    this();
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ADQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ADQLParser(java.io.Reader stream) {
    this();
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ADQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ADQLParser(ADQLParserTokenManager tm) {
    this();
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ADQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[90];
    for (int i = 0; i < 90; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 90; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
