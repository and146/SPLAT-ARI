#!/bin/sh

#  Note JVM seems to depend on /bin/sh signature, do not remove.

#  mk-like script for wrapping build of JNI shareable library

#  Export "local" definitions to the environment for use by make.
      export BLD_SHR
      export CC
      export FC
      export CFLAGS
      export SHARE
      export JAVA_INCLUDE
      export LDFLAGS

#  Java system exports (set by build.xml).
      export JAVA_SYSTEM
      export JAVA_HOME
      export STARJAVA_LIB

      echo "Running MK script..."

#  Check that the SYSTEM environment variable is defined.
      if test "$SYSTEM" = ""; then
         echo "mk: Please define the environment variable SYSTEM to identify"
         echo "    your computer system (the prologue in the mk script file"
         echo "    contains more information if you require it)."

#  If OK, test for each recognised system.
      else
         case "$SYSTEM" in

#  DEC Alpha:
#  =========
#  DEC Alpha machines running OSF1.
#  -------------------------------
            alpha_OSF1)
               BLD_SHR='f() ld -shared -o $$1 $$2 $$3 -lfor -lFutil -lUfor -lm -lots -lc; f'
               CC='cc'
               CFLAGS='-I. $(ADDINCS) -I$(JAVA_INCLUDE) -I$(JAVA_SYSTEM_INCLUDE) -I$(STAR_INC) -O -pthread'
               SHARE='.so'
               echo "mk: Environment variables defined for $SYSTEM system"
               ;;

#  SUN Sparcstations and PCs running SunOS.
#  ----------------------------------------
            sun4_Solaris)
               if test "$JAVA_SYSTEM" = "x86"; then
                  BLD_SHR='f() $(FC) -G -o $$1 $$2 -Bstatic -lfui -lfai -lfsu -lsunmath -Bdynamic -lm -lpthread -lc; f'
                  JAVA_SYSTEM="solaris"
               else
                  BLD_SHR='f() $(FC) -G -o $$1 $$2 -Bstatic -L/opt/SUNWspro/WS6U2/lib -lF77 -lM77 -lsunmath -Bdynamic -lm -lcx -lc; f'
               fi
               CC='cc'
               FC=${FC:=f77}
               CFLAGS='-I. $(ADDINCS) -I$(JAVA_INCLUDE) -I$(JAVA_SYSTEM_INCLUDE) -I$(STAR_INC) -O -K PIC'
               SHARE='.so'
               echo "mk: Environment variables defined for $SYSTEM system"
               ;;

#  PC systems:
#  ==========
#  Intel PC running Linux.
#  ----------------------
            ix86_Linux)
               BLD_SHR='f() { $(FC) -shared -o $$1 $$2 -lm -lgcc -lc;}; f'
               CC='gcc'
               FC=${FC:=g77}
               CFLAGS='-I. $(ADDINCS) -I$(JAVA_INCLUDE) -I$(JAVA_SYSTEM_INCLUDE) -I$(STAR_INC) -O -fPIC'
               SHARE='.so'
               echo "mk: Environment variables defined for $SYSTEM system"
               ;;

#  Mac OS X systems:
#  =================
#  Mac PPC & Intel
#    Note that Mac fortran compilers tend not to understand -arch
#  ---------------
            MacOSX)
               LDFLAGS=${LDFLAGS:=}
               if test "$JAVA_SYSTEM" = "x86_64"; then
                  LDFLAGS="$LDFLAGS -m64"
               fi
               export LDFLAGS
               BLD_SHR='f() { $(FC) $(LDFLAGS) -framework JavaVM -dynamiclib -install_name $(STARJAVA_LIB)/`basename $$1` -single_module -undefined dynamic_lookup -o $$1 $$2 -lm -lgcc -lc; }; f'
               CC='gcc'
               FC=${FC:=g77}
               CFLAGS='-I/System/Library/Frameworks/JavaVM.framework/Headers -arch $(JAVA_SYSTEM) -I. $(ADDINCS) -I$(JAVA_INCLUDE) -I$(JAVA_SYSTEM_INCLUDE) -I$(STAR_INC) -g -fPIC'
               SHARE='.jnilib'
               JAVA_INCLUDE='$(JAVA_HOME)/Headers'
               echo "mk: Environment variables defined for $SYSTEM system"
               ;;

#  Issue a warning if SYSTEM is not recognised.
            *)
               SOURCE_VARIANT='unknown'
               echo "mk: WARNING: value of SYSTEM = $SYSTEM not recognised..."
               echo "             ...assuming default system characteristics"
               echo '             ...setting SOURCE_VARIANT to "unknown"'
               ;;
         esac

#  Invoke make with the appropriate environment variables set to override
#  default macros defined in the makefile.
         echo make -e $*
         make -e $*
      fi
