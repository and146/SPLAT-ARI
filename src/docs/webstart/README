
     Webstart notes
     ==============

 Overview
 --------

 To find out more about webstart look at the SUN support page:

    http://java.sun.com/products/javawebstart/

 Basically webstart is a way of delivering applications to the user's
 desktop using the infrastructure of the WWW. These are superficially
 much like applets, but also give you the power to launch full-featured
 applications, including full access to local files, and access to
 shareable libraries. This latter feature is essential for us as we
 need JNIAST and, to a lesser degree, JNIHDS, which produce a lot
 of basic functionality.

 Webstart provides the ability to download updates to an application
 each time a user starts it (provided we are careful about how we
 regenerate our releases, no changes to the source code should mean no
 changes to the jar files), so we can release and release and release
 as needed, occasionally putting out stable releases for those who do
 not want or need the bleeding edge of our application developments.

 Note that webstart is not a suitable way of providing a development
 system, although our infrastructure is updated along with the
 applications, it is not available in a useful way. Developers will
 still need to use CVS to get the latest versions.

    - Resources

 A fundamental point to bear in mind about webstart is that all
 resources must be located in jar files. This is includes all icons, 
 demo and help files, and even shareable libraries. So for effective
 use of webstart our applications will need to get resources using the
 Class.getResource() method, and deal with a stream of some kind. If should
 be possible to find out if an application is running under webstart so
 that suitable tuning can be applied for cases where resources cannot
 be made available this way (for instance NDFs cannot be accessed
 directly in a jar file).

    - Class loading

 Another gotcha when developing applications is the what classloader
 to use. The main classloader can only see the J2SE classes, not any 
 other classes that you may have downloaded, so you need to get access
 to the classloader that created some local objects. The usual way to
 do this when accessing a class using reflection is:

      this.getClass().forName("some.class");

 rather than Class.forName("some.class"). In a static context
 the only way you play the same game is by asking the local Thread for
 its classloader.

      Class.forName("some.class", true,
                    Thread.currentThread().getContextClassLoader() );

  
 How it works
 ------------

 You need to install webstart on your local machine. For windows this
 is a click download, but for UNIX, it is a bit more work. Follow the
 instructions provided. One thing to look out for is getting your
 web server and browser to understand the webstart mime-type 
 "application/x-java-jnlp-file". If this isn't setup then webstart
 files will not be understood.

 Webstart configuration files (JNLP files) are written in XML and have
 file extension ".jnlp". Here's one from SPLAT.

 <?xml version="1.0"?>
 <jnlp spec="1.0+" codebase="http://www.starlink.ac.uk/starjava/splat"
       href="splat.jnlp">
    <information>
        <title>Starlink SPLAT - A Spectral Analysis Tool</title>
        <vendor>Starlink UK</vendor>
        <homepage href="http://www.starlink.ac.uk/splat"/>
        <description>Starlink SPLAT - Webstart edition</description>
        <icon href="splat_splash.gif" kind="splash"/>
        <icon href="starlink_logo_med.gif"/>
        <offline-allowed/>
     </information>
     <security>
        <all-permissions/>
     </security>
     <resources>
        <j2se version="1.4+"/>
        <jar href="splat/splat.jar" main="true"/>
        <extension href="splat-parts.jnlp" name="SPLAT-PARTS"/>
        <extension href="treeview-parts.jnlp" name="TREEVIEW-PARTS"/>
     </resources>
     <application-desc main-class="uk.ac.starlink.splat.SplatMain"/>
 </jnlp>

 This was generated by the SPLAT ANT build file. The important parts
 are <security/>, <resources/> and <application-desc/>.

 The <security/> part asks for <all-permissions/> which means it wants
 access to local files. This is a problematic part as this kind of
 access requires that all jar files are signed (to verify their
 provenance). Initially when our applications start a warning to not
 run the application under any circumstances is shown as we do not
 have officially signed jar files. 

 The <resources/> part names the jar files that this application
 needs and identifies the jar file that contains the main class.
 Note that this includes the <extension/> tag. This points at another
 JNLP file that also contains <resources/>. In turn this file may 
 also contain other <extensions/> and so on. The <extension/>
 mechanism allows us to re-use our package structure without having to
 know the full list of jar files that we really depend on (i.e it
 works like the jar-file extension classpath mechanism).

 The <application/> tag reveals that this JNLP file specifies an
 application that should be started using the main jar file identified
 and the named class. Another possible tag is <component-desc/> which
 would mean this was just a set of components for download. Typically
 such a JNLP file would specify an <extension/>, i.e. an infrastructure
 library.

 Once you have such a file you can just use webstart to download it
 from a server (UNIX, don't know if this works under Windows):

   javaws http://www.starlink.ac.uk/starjava/splat/splat.jnlp

 Or you can embedded that URL in a HTML page, provided your browser
 understands how to start webstart.
 
 The downloaded files are cached in a ~/.javaws directory, and
 webstart remembers the applications that you've downloaded (so when
 you revisit that URL it checks if things have been updated and
 downloads any modified jar files). You can also see a list of
 downloads by just running up "javaws" without a URL.


 The build system
 ----------------

 Most of the support needed for producing a set of webstart
 applications and extensions is done by the build files. These have a
 target "webstart" that creates the JNLP file needed for each package
 (this target will need maintenance as the list of package
 dependencies changes and is naturally activated by the "jar" target)
 they also sign all jar files using the "keystore" found in the source
 directory. 
 
 The JNLP files are created in the package "lib" directory and will
 eventually be installed in the main "lib" directory. They all have
 the same codebase, which is defined by the property
 ${webstart.codebase}. This should be set to the base URL of the
 system you're setting up. By default I've assumed this will be at
 RAL:
 
     http://www.starlink.ac.uk/starjava

 (this URL should point at the equivalent of /star/starjava/lib).
 A good place for developers to set their own codebase is in the 
 ~/.stardev.properties file.

 The main build file contains code to generate a new keystore for
 signing jar files. This will need re-generating from time to time as
 the keys expire. To do this the existing keystore will need removing
 and the "keystore" target should be run. 

 I guess regenerating this (or getting a properly authorised key for
 webstart is a job for RAL). The passwords used in the system are
 notional and should be used for default purposes only. Changing
 them system wide is simple, just build from the source directory with
 new passwords entered in the build file, or use overrides in the
 ~/.stardev.properties file.

 Applications-v-components. Our class and third party libraries
 map naturally to components, but some of our applications are also
 re-usuable components (SPLAT by Treeview for instance), a JNLP file
 cannot be both an application and a component at the same time. 
 
 In this case the full dependencies are named in a separate JNLP file,
 "Application-PARTS", which the application JNLP file references. Note
 that <extension/> interdependency doesn't allow for circular lists,
 unlike the jar-file classpath mechanism, so any such loops in the
 dependencies must be tracked down and removed. Applications 
 that depend on each other should make this clear in the application
 JNLP file, not the component JNLP file for this reason.

 Problems
 --------

 Jar file signing. To get around the obvious problems I expect we
 could import our own keys into webstart and use that (maybe as part
 of the "jre" package, webstart is present by default now), or pay
 someone on the webstart official list for a key, or put up with the
 way it works now.

 Multiply signed jar files. Jar files in the same package must be
 signed by the same authority. Also jar files that have been signed
 already may not be signed again, except by the same key, or that
 might be alias (solution to this is do not sign them again, or unpack
 and re-pack the jar file removing the META content). This clearly
 only effects third-party jar files at present (but may affect us if
 we start playing around with signing).

 Incremental builds. We need to only modify jar files that we really
 need to, otherwise each build (like the nightly one) will be
 completely downloaded. One other possibility is to use "jardiff", but
 that may not work. 

 <extension/> dependencies. Each package maintainer must keep the
 dependency lists up to date, I would have liked to do this from the
 .properties jar files, but it wasn't possible (could extend ANT to do
 this, but that would be hard work, I have already introduced some
 Roxes ANT tasks to create the JNLP files).

 JNIAST and JNIHDS. These now have jar files containing shareable
 libraries for each architecture committed to CVS, rather than
 following the usual method of being architecture specific and 
 performing a rebuild each time. There is a special "webstart_jars"
 target in each for creating these jar files for the current
 architecture (the idea being you'd then re-commit these to CVS).

 One possibility to tidy up this mess, and make it possible to do
 architecture-free builds, is to stop JNIAST and JNIHDS from
 re-building their JNI libraries by default and making the default
 build action just use these pre-builts, which are updated from time
 to time (when AST or HDS, or the C library changes require it).

 ANT. This is used by Treeview and needs to be signed too. Because it 
 cannot be signed before ANT is installed, this must be done
 afterwards using the "ant sign_ant" target of the main jar file.
 
 JAI. Currently it is assumed that webstart uses a JRE with this
 installed as an extension. We should probably offer it as a package.


 Peter W. Draper 14th November 2003
