     /*                  StarSpaceDemo                     */
     /*  This places StarTaskRequests into the JavaSpace   */
     /*  then takes them out and services them             */
     /*  This is to be replaced by separate StarTaskSetter */
     /*  and StarTaskRunner                                */              
     /* ---------------------------------------------------*/

     package uk.ac.starlink.startask;
     
     // JavaSpacesUtil package
     import uk.ac.starlink.jiniutils.SpaceAccessor;

     // Jini core packages
     import net.jini.core.lease.*;

     // Jini extension package
     import net.jini.space.JavaSpace;
     
     // Starlink PCS
     import uk.ac.starlink.jpcs.*;     

/** A simple demonstration of JavaSpaces
*/ 
     public class StarSpaceDemo {

/** A now-redundant forerunner of the
*   {@link StarTaskSetter}/{@link StarTaskRunner} system,
*   this places StarTaskRequests into the JavaSpace then takes them out and
*   services them itself.
*   <p>
*   The JavaSpace to be used is specified by a property file specified by the 
*   System property "uk.ac.starlink.startask.spacePropertyFile" (default
*   <code>star_space.prop</code>).
*   <p>
*   The requests are generated by a {@link StarTaskRequestGenerator} given the
*   arguments array, so that:
*   <ul>
*   <li>0 arguments is an error</li>
*   <li>1 argument is the name of a file containing command lines</li>
*   <li>&gt;1 arguments is taken as a single command line.</li>
*   </ul>
*   <p>
*   Command lines have the form: <i>Service task parameters...</i>
*   where: 
*   <dl>
*   <dt><i>Service</i></dt>
*   <dd> is the Starlink service class e.g. Kappa</dd>
*         <dt> <i>task</i></dt>
*   <dd> is the task method of the service class e..g. stats</dd>
*          <dt><i>parameters...</i></dt>
*   <dd> are the parameters, if any, for the task.</dd>
*   </dl>
*   <p>
*   If the command lines are read from a file,
*   <ul>
*   <li># introduces a comment line.</li>
*   <li>blank lines are ignored.</li>
*   <li>command lines may be continued on more than one line by escaping the
*     return with \.</li>
*   <li>{ introduces a set of commands which may be done in parallel
*     - the returned StarTaskRequest has the waitFlag set false.</li>
*   <li>} ends a set of parallel commands
*     - a StarTaskRequest with null service, task and parameter fields but with
*     the waitFlag set true is returned. The client should then wait for all
*     preceding requests to be serviced.</li>
*   </ul>
*/
         public static void main(String[] args) {
         
             System.out.println("START");
          
/* Get the space properties filename */
             String spacePropertyFile =
              System.getProperty( "uk.ac.starlink.startask.spacePropertyFile" );
             if( ( spacePropertyFile == null )
              || ( spacePropertyFile.length() == 0 ) ) {
                spacePropertyFile = "star_space.prop";
            } 
                      
             // try block
             try {

                 // Get JavaSpace     
System.out.println("Get JavaSpace");
                 SpaceAccessor newSpaceAccessor = new SpaceAccessor(
                    spacePropertyFile );
                 JavaSpace space = newSpaceAccessor.getSpace();
                 // Create a template
                 StarTaskRequest template = new StarTaskRequest();

/* Create StarTaskRequest(s) and place in the JavaSpace */
                 StarTaskRequestGenerator strg =
                  new StarTaskRequestGenerator( args );
                 
                 StarTaskRequest str = strg.nextRequest();
                 
                 while( str != null ) {

/* Send StarTaskRequest into space */
                    space.write( str, null, Lease.FOREVER );

/* Read StarTaskRequest and run it */  
                    StarTaskRequest request =
                      (StarTaskRequest)space.take(
                       template, null ,Long.MAX_VALUE );
                    if( request != null ) {
/* Display the StarTaskRequest */
                       System.out.println( "\nStarTaskRequest is:" );
                       request.display();
                 
                       TaskReply tr = request.shellRunTask();
                       tr.getMsg().flush();
                     } else {
                       System.out.println( "No StarTaskRequests found" );
                     }
                     
                     str = strg.nextRequest();
                 }
                    
            
             // Catch block
             } catch(Exception e) {
                 e.printStackTrace();
             }
             
             System.out.println("END");
             System.exit(0);
             }
         }         
