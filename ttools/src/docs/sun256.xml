<?xml version="1.0"?>
<!DOCTYPE sun SYSTEM "docs.dtd" [

  <!-- Define some character constants. -->
  <!ENTITY column.id.char '$'>
  <!ENTITY indirection.char '@'>
  <!ENTITY ucd.prefix 'ucd$'>
  <!ENTITY utype.prefix 'utype$'>
  <!ENTITY param.prefix 'param$'>

  <!-- Define automatically generated text entities. -->
  <!ENTITY jel.func.docs SYSTEM "jel-javadocs.xml">

  <!-- Define external URLs. -->
  <!ENTITY URL.J2SE_DOCS "http://java.sun.com/j2se/1.5.0/docs/">
  <!ENTITY URL.STIL_JAVADOCS
           "http://www.starlink.ac.uk/stil/javadocs/uk/ac/starlink/table/">

  <!ENTITY flag-verbose '
     <dt><code>-v[erbose]</code></dt>
     <dd><p>May cause more information about progress to be written as
         the command runs.
         </p></dd>'>

  <!-- Short descriptions for each command. -->
  <!ENTITY % purpose-defs SYSTEM "purpose-defs.xml">
  %purpose-defs;

  <!-- Description of processing filters. -->
  <!ENTITY filter-docs SYSTEM 'filter-docs.xml'>

  <!-- Description of output modes. -->
  <!ENTITY mode-docs SYSTEM 'mode-docs.xml'>

  <!-- Description of graphical output modes. -->
  <!ENTITY paintmode-docs SYSTEM 'paintmode-docs.xml'>

  <!-- Summary paragraphs containing usage for each commmand. -->
  <!ENTITY calc-summary SYSTEM 'calc-summary.xml'>
  <!ENTITY coneskymatch-summary SYSTEM 'coneskymatch-summary.xml'>
  <!ENTITY funcs-summary SYSTEM 'funcs-summary.xml'>
  <!ENTITY pixfoot-summary SYSTEM 'pixfoot-summary.xml'>
  <!ENTITY pixsample-summary SYSTEM 'pixsample-summary.xml'>
  <!ENTITY plot2d-summary SYSTEM 'plot2d-summary.xml'>
  <!ENTITY plot3d-summary SYSTEM 'plot3d-summary.xml'>
  <!ENTITY plothist-summary SYSTEM 'plothist-summary.xml'>
  <!ENTITY regquery-summary SYSTEM 'regquery-summary.xml'>
  <!ENTITY server-summary SYSTEM 'server-summary.xml'>
  <!ENTITY sqlclient-summary SYSTEM 'sqlclient-summary.xml'>
  <!ENTITY sqlskymatch-summary SYSTEM 'sqlskymatch-summary.xml'>
  <!ENTITY sqlupdate-summary SYSTEM 'sqlupdate-summary.xml'>
  <!ENTITY taplint-summary SYSTEM 'taplint-summary.xml'>
  <!ENTITY tapquery-summary SYSTEM 'tapquery-summary.xml'>
  <!ENTITY tapresume-summary SYSTEM 'tapresume-summary.xml'>
  <!ENTITY tcat-summary SYSTEM 'tcat-summary.xml'>
  <!ENTITY tcatn-summary SYSTEM 'tcatn-summary.xml'>
  <!ENTITY tcopy-summary SYSTEM 'tcopy-summary.xml'>
  <!ENTITY tcube-summary SYSTEM 'tcube-summary.xml'>
  <!ENTITY tjoin-summary SYSTEM 'tjoin-summary.xml'>
  <!ENTITY tloop-summary SYSTEM 'tloop-summary.xml'>
  <!ENTITY tmatch1-summary SYSTEM 'tmatch1-summary.xml'>
  <!ENTITY tmatch2-summary SYSTEM 'tmatch2-summary.xml'>
  <!ENTITY tmatchn-summary SYSTEM 'tmatchn-summary.xml'>
  <!ENTITY tmulti-summary SYSTEM 'tmulti-summary.xml'>
  <!ENTITY tmultin-summary SYSTEM 'tmultin-summary.xml'>
  <!ENTITY tpipe-summary SYSTEM 'tpipe-summary.xml'>
  <!ENTITY tskymatch2-summary SYSTEM 'tskymatch2-summary.xml'>
  <!ENTITY votcopy-summary SYSTEM 'votcopy-summary.xml'>
  <!ENTITY votlint-summary SYSTEM 'votlint-summary.xml'>
  
  <!-- Raw usage messages for some commands. -->
  <!ENTITY stilts-usage SYSTEM 'stilts-usage.xml'>
  <!ENTITY tcopy-usage SYSTEM 'tcopy-usage.xml'>
  <!ENTITY tcopy-in-usage SYSTEM 'tcopy-in-usage.xml'>

  <!-- Usage messages for match engines. -->
  <!ENTITY matcher-sky-usage SYSTEM 'matcher-sky-usage.xml'>
  <!ENTITY matcher-skyerr-usage SYSTEM 'matcher-skyerr-usage.xml'>
  <!ENTITY matcher-skyellipse-usage SYSTEM 'matcher-skyellipse-usage.xml'>
  <!ENTITY matcher-sky3d-usage SYSTEM 'matcher-sky3d-usage.xml'>
  <!ENTITY matcher-exact-usage SYSTEM 'matcher-exact-usage.xml'>
  <!ENTITY matcher-1d-usage SYSTEM 'matcher-1d-usage.xml'>
  <!ENTITY matcher-2d-usage SYSTEM 'matcher-2d-usage.xml'>
  <!ENTITY matcher-2d_anis-usage SYSTEM 'matcher-2d_anisotropic-usage.xml'>
  <!ENTITY matcher-2d_err-usage SYSTEM 'matcher-2d_err-usage.xml'>
  <!ENTITY matcher-2d_ellipse-usage SYSTEM 'matcher-2d_ellipse-usage.xml'>
  <!ENTITY matcher-sky.1d-usage SYSTEM 'matcher-sky.1d-usage.xml'>

  <!-- Automatically generated plot example text. -->
  <!ENTITY plot2d-examples SYSTEM 'plot2d-examples.xml'>
  <!ENTITY plot3d-examples SYSTEM 'plot3d-examples.xml'>
  <!ENTITY plothist-examples SYSTEM 'plothist-examples.xml'>
]>

<sun>

<docinfo>
<title>STILTS - Starlink Tables Infrastructure Library Tool Set</title>

<authorlist>
<author id="mbt"
        email="m.b.taylor@bristol.ac.uk"
        webpage="http://www.star.bristol.ac.uk/~mbt/"
        affiliation="University of Bristol"
        >Mark Taylor</author>
</authorlist>

<docnumber>256</docnumber>

<docdate>1 July 2013</docdate>

<contactlist>
<contact>STILTS web page:
         <webref url="http://www.starlink.ac.uk/stilts/"/></contact>
<contact>Author email:
         <webref url="mailto:m.b.taylor@bristol.ac.uk"
                 >m.b.taylor@bristol.ac.uk</webref></contact>
<contact>Mailing list:
         <webref url="mailto:topcat-user@bristol.ac.uk"
                 >topcat-user@bristol.ac.uk</webref></contact>
</contactlist>

</docinfo>

<!-- ................................................................. -->
<docbody>

<abstract>

<px>STILTS is a set of command-line tools for processing tabular data. 
It has been designed for, but is not restricted to, use on astronomical
data such as source catalogues.  
It contains both generic (format-independent) table processing tools and 
tools for processing VOTable documents.  Facilities offered include
crossmatching,
format conversion, 
format validation, 
column calculation and rearrangement, 
row selection,
sorting,
plotting,
statistical calculations
and metadata display.
Calculations on cell data can be performed using a powerful and 
extensible expression language.
</px>

<px>The package is written in pure Java and based on 
<webref url="http://www.starlink.ac.uk/stil/">STIL</webref>,
the Starlink Tables Infrastructure Library.
This gives it high portability, support for many data formats
(including FITS, VOTable, text-based formats and SQL databases),
extensibility and scalability.  Where possible the tools are
written to accept streamed data so the size of tables which can 
be processed is not limited by available memory.
As well as the tutorial and reference information in this document,
detailed on-line help is available from the tools themselves.
</px>

<px>STILTS is available under the GNU General Public Licence.
</px>

</abstract>

<sect>
<subhead><title>Introduction</title></subhead>

<p>STILTS provides a number of command-line applications which can
be used for manipulating tabular data.
Conceptually it sits between, and uses many of the same classes as, 
the packages 
<webref url="http://www.starlink.ac.uk/stil/">STIL</webref>,
which is a set of Java APIs providing table-related functionality, and 
<webref url="http://www.starlink.ac.uk/topcat">TOPCAT</webref>,
which is a graphical application providing the user with
an interactive platform for exploring one or more tables.
This document is mostly self-contained - it covers some of the
same ground as the STIL and TOPCAT user documents 
(<docxref doc="sun252"/> and <docxref doc="sun253"/> respectively).
</p>

<p>Currently, this package consists of commands in the following categories:
<dl>
<dt>Generic table manipulation</dt>
<dd><p>
    <ref id="tcopy"><code>tcopy</code></ref>,
    <ref id="tpipe"><code>tpipe</code></ref>,
    <ref id="tmulti"><code>tmulti</code></ref>,
    <ref id="tmultin"><code>tmultin</code></ref>,
    <ref id="tcat"><code>tcat</code></ref>,
    <ref id="tcatn"><code>tcatn</code></ref>,
    <ref id="tloop"><code>tloop</code></ref>,
    <ref id="tjoin"><code>tjoin</code></ref> and
    <ref id="tcube"><code>tcube</code></ref>
    (see <ref id="pipes" plaintextref="yes"/>).
    </p></dd>
<dt>Crossmatching</dt>
<dd><p>
    <ref id="tmatch1"><code>tmatch1</code></ref>,
    <ref id="tmatch2"><code>tmatch2</code></ref>,
    <ref id="tmatchn"><code>tmatchn</code></ref> and
    <ref id="tskymatch2"><code>tskymatch2</code></ref>
    (see <ref id="match" plaintextref="yes"/>).
    </p></dd>
<dt>Plotting</dt>
<dd><p>
    <ref id="plot2d"><code>plot2d</code></ref>,
    <ref id="plot3d"><code>plot3d</code></ref> and
    <ref id="plothist"><code>plothist</code></ref>
    (see <ref id="plot" plaintextref="yes"/>).
    </p></dd>
<dt>Sky Pixel Operations</dt>
<dd><p>
    <ref id="pixfoot"><code>pixfoot</code></ref> and
    <ref id="pixsample"><code>pixsample</code></ref>.
    </p></dd>
<dt>VOTable</dt>
<dd><p>
    <ref id="votcopy"><code>votcopy</code></ref> and
    <ref id="votlint"><code>votlint</code></ref>.
    </p></dd>
<dt>Virtual Observatory access</dt>
<dd><p>
    <ref id="coneskymatch"><code>coneskymatch</code></ref>,
    <ref id="tapquery"><code>tapquery</code></ref>
    <ref id="tapresume"><code>tapresume</code></ref>
    <ref id="taplint"><code>taplint</code></ref> and
    <ref id="regquery"><code>regquery</code></ref>.
    </p></dd>
<dt>SQL databases</dt>
<dd><p>
    <ref id="sqlclient"><code>sqlclient</code></ref>,
    <ref id="sqlupdate"><code>sqlupdate</code></ref> and
    <ref id="sqlskymatch"><code>sqlskymatch</code></ref>.
    </p></dd>
<dt>Miscellaneous</dt>
<dd><p>
    <ref id="calc" plaintextref="yes"><code>calc</code></ref>,
    <ref id="funcs" plaintextref="yes"><code>funcs</code></ref> and
    <ref id="server" plaintextref="yes"><code>server</code></ref>.
    </p></dd>
</dl>
See <ref id="classified"/> for an expanded version of this list.
</p>

<p>There are many ways you might want to use these tools;
here are a few possibilities:
<dl>

<dt>In conjunction with TOPCAT</dt>
<dd><p>you can identify a set of processing steps using TOPCAT's interactive
    graphical facilities, and construct a script using the commands
    provided here which can perform the same steps on many 
    similar tables without further user intervention.
    </p></dd>

<dt>Format conversion</dt>
<dd><p>If you have a separate table processing engine and you want to 
    be able to output the results in a somewhat different form, 
    for instance converting it from FITS to VOTable or from
    TABLEDATA-encoded to BINARY-encoded VOTable, or to perform 
    some more scientifically substantial operation such as 
    changing units or coordinate systems, substituting bad values etc,
    you can pass the results through one of the tools here.
    Since on the whole operation is streaming, such conversion can 
    easily and efficiently be done on the fly.
    </p></dd>

<dt>Server-side operations</dt>
<dd><p>The tools provided here are suitable for use on servers, either
    to generate files as part of a web service (perhaps along the 
    lines of the <label>Format conversion</label> item above)
    or as configurable components in a server-based workflow system.
    The <ref id="server"><code>server</code></ref> command may help,
    but is not required, for use in these situations.
    </p></dd>

<dt>Quick look</dt>
<dd><p>You might want to examine the metadata, or a few rows,
    or a statistical summary of a table 
    without having to load the whole thing into TOPCAT or some other
    table viewer application.
    </p></dd>

</dl>
</p>

</sect>

<sect id="stilts-cmd">
<subhead><title>The <code>stilts</code> command</title></subhead>

<p>All the functions available in this package can be used from
a single command, which is usually referred to in this document 
simply as "<code>stilts</code>".  Depending on how you have installed
the package, you may just type "<code>stilts</code>",
or something like
<verbatim>
   java -jar some/path/stilts.jar
</verbatim>
or
<verbatim>
   java -classpath topcat-lite.jar uk.ac.starlink.ttools.Stilts
</verbatim>
or something else - 
this is covered in detail in <ref id="invoke"/>.
</p>

<p>In general, the form of a command is
<verbatim><![CDATA[
   stilts <stilts-flags> <task-name> <task-args>
]]></verbatim>
The forms of the parts of this command are described in the following
subsections, and details of each of the available tasks along with
their arguments are listed in the
<ref id="cmdUsage" plaintextref="yes">command reference</ref> 
at the end of this document.
Some of the commands are highly configurable and have a variety of 
parameters to define their operation.  
In many cases however, it's not complicated to use them.
For instance, to convert the data in a FITS table to VOTable format
you might write:
<verbatim><![CDATA[
   stilts tcopy cat.fits cat.vot
]]></verbatim>
</p>


<subsect id="stilts-flags">
<subhead><title>Stilts flags</title></subhead>

<p>Some flags are common to all the tasks in the STILTS package,
and these are specified after the <code>stilts</code> invocation itself
and before the task name.  They generally have the same effect 
regardless of which task is running.  These generic flags are as
follows:
<dl>
<dt><code>-help</code></dt>
<dd><p>Prints a usage message for the <code>stilts</code> command 
    itself and exits.  The message contains a listing of all the
    known tasks.
    </p></dd>

<dt><code>-version</code></dt>
<dd><p>Prints the STILTS version number and exits.
    </p></dd>

<dt><code>-verbose</code></dt>
<dd><p>Causes more verbose information to be written during operation.
    Specifically, what this does is to boost the logging level by 
    one notch.  It may be specified multiple times to increase verbosity
    further.
    </p></dd>

<dt><code>-memory</code></dt>
<dd><p>Encourages the command to use java heap memory for caching
    large amounts of data rather than using temporary disk files.
    The default is to use memory for small tables, and disk for large ones.
    This flag is in most cases equivalent to specifying the system
    property <code>-Dstartable.storage=memory</code>.
    </p></dd>

<dt><code>-disk</code></dt>
<dd><p>Encourages the command to use temporary files on disk for caching
    table data.
    The default is to use memory for small tables, and disk for large ones.
    Using this flag may help if you are running out of memory.
    This flag is in most cases equivalent to specifying the system
    property <code>-Dstartable.storage=disk</code>.
    </p></dd>

<dt><code>-debug</code></dt>
<dd><p>Sets up output suitable for debugging.  The most visible consequence
    of this is that if an error occurs then a full stacktrace is output, 
    rather than just a user-friendly report.
    </p></dd>

<dt><code>-prompt</code></dt>
<dd><p>Most of the STILTS commands have a number of parameters which
    will assume sensible defaults if you do not give them explicit
    values on the command line.  If you use the <code>-prompt</code> flag,
    then you will be prompted for every parameter you have not 
    explicitly specified to give you an opportunity to enter a value
    other than the default.
    </p></dd>

<dt><code>-batch</code></dt>
<dd><p>Some parameters will prompt you for their values, even if they 
    offer legal defaults.  If you use the <code>-batch</code> flag,
    then you won't be prompted at all.
    </p></dd>

<dt><code>-bench</code></dt>
<dd><p>Outputs the elapsed time taken by the task to standard error on
    successful completion.
    </p></dd>

<dt><code>-memgui</code></dt>
<dd><p>Displays a graphical window while the command is running which
    summarises used and available heap memory.
    May be useful for profiling or understanding resource constraints.
    </p></dd>

<dt><code>-checkversion &lt;vers&gt;</code></dt>
<dd><p>Requires that the version is exactly as given by the string
    <code>&lt;vers&gt;</code>.  If it is not, STILTS will exit with
    an error.  This can be useful when executing in certain controlled
    environments to ensure that the correct version of the application
    is being picked up.
    </p></dd>

<dt><code>-stdout &lt;file&gt;</code></dt>
<dd><p>Sends all normal output from the run to the given file.
    By default this goes to the standard output stream.
    Supplying an empty string or "<code>-</code>" for <code>&lt;file&gt;</code>
    will restore this default behaviour.
    </p></dd>

<dt><code>-stderr &lt;file&gt;</code></dt>
<dd><p>Sends all error output from the run to the given file.
    By default this goes to the standard error stream.
    Supplying an empty string or "<code>-</code>" for <code>&lt;file&gt;</code>
    will restore this default behaviour.
    </p></dd>

</dl>
</p>

<p>If you are submitting an error report, please include the result of
running <code>stilts -version</code> and the output of the troublesome
command with the <code>-debug</code> flag specified.
</p>

</subsect>

<subsect id="task-name">
<subhead><title>Task Names</title></subhead>

<p>The <code>&lt;task-name&gt;</code> part of the command line is the
name of one of the tasks listed in <ref id="cmdUsage"/> - currently 
the available tasks are:
<ul>
<li><code>calc</code></li>
<li><code>funcs</code></li>
<li><code>coneskymatch</code></li>
<li><code>pixfoot</code></li>
<li><code>pixsample</code></li>
<li><code>plot2d</code></li>
<li><code>plot3d</code></li>
<li><code>plothist</code></li>
<li><code>regquery</code></li>
<li><code>server</code></li>
<li><code>sqlclient</code></li>
<li><code>sqlskymatch</code></li>
<li><code>sqlupdate</code></li>
<li><code>taplint</code></li>
<li><code>tapquery</code></li>
<li><code>tapresume</code></li>
<li><code>tcat</code></li>
<li><code>tcatn</code></li>
<li><code>tcopy</code></li>
<li><code>tcube</code></li>
<li><code>tjoin</code></li>
<li><code>tloop</code></li>
<li><code>tmatch1</code></li>
<li><code>tmatch2</code></li>
<li><code>tmatchn</code></li>
<li><code>tmulti</code></li>
<li><code>tmultin</code></li>
<li><code>tpipe</code></li>
<li><code>tskymatch2</code></li>
<li><code>votcopy</code></li>
<li><code>votlint</code></li>
</ul>
</p>

</subsect>

<subsect id="task-args">
<subhead><title>Task Arguments</title></subhead>

<p>The <code>&lt;task-args&gt;</code> part of the command line is a
list of parameter assignments, 
each giving the value of one of the named parameters belonging to 
the task which is specified in the <code>&lt;task-name&gt;</code> part.
</p>

<p>The general form of each parameter assignment is
<verbatim><![CDATA[
   <param-name>=<param-value>
]]></verbatim>
If you want to set the parameter to the null value, which is legal for
some but not all parameters, use the special string "<code>null</code>".
In some cases you can optionally leave out the <code>&lt;param-name&gt;</code>
part of the assignment (i.e. the parameter is positionally determined); 
this is indicated in the task's usage description if the parameter
is described like <code>[&lt;param-name&gt;=]&lt;param-value&gt;</code>
rather than <code>&lt;param-name&gt;=&lt;param-value&gt;</code>.
If the <code>&lt;param-value&gt;</code> contains spaces or other special
characters, then in most cases, such as from the Unix shell, you will
have to quote it somehow.  How this is done depends on your platform,
but usually surrounding the whole value in single quotes will do the trick.
</p>

<p>Tasks may have many parameters, and you don't have to set all of
them explicitly on the comand line.  For a parameter which you don't
set, two things can happen.  In many cases, it will default to some
sensible value.  Sometimes however, you may be prompted for the value
to use.
In the latter case, a line like this will be written to the terminal:
<verbatim>
   matcher - Name of matching algorithm [sky]:
</verbatim>
This is prompting you for the value of the parameter named 
<code>matcher</code>.  "Name of matching algorithm" is a short 
description of what that parameter does.  "<code>sky</code>" is
the default value (if there is no default, no value will appear
in square brackets).
At this point you can do one of four things:
<ul>
<li>Hit return - this will select the default value if there is one.
    If there is no default, this is equivalent to entering 
    "<code>null</code>".</li>
<li>Enter a value for the parameter explicitly.
    The special value "<code>null</code>" means the null value,
    which is legal for some, but not all parameters.
    If the value you enter is not legal, you will see an error 
    message and you will be invited to try again. </li>
<li>Enter "<code>help</code>" or a question mark "<code>?</code>".
    This will output a message
    giving a detailed description of the parameter
    and prompt you again.</li>
<li>Bail out by hitting ctrl-C or whatever is usual on your platform.</li>
</ul>
Under normal circumstances, most parameters which have a legal default
value will default to it if they are not set on the command line,
and you will only be prompted for those where there is no default or
the program thinks there's a good chance you might not want to use it.
You can influence this however using flags to the <code>stilts</code>
command itself (see <ref id="stilts-flags"/>). 
If you supply the <code>-prompt</code> flag, then you will be prompted
for every parameter you have not explicitly set.  If you supply
<code>-batch</code> on the other hand, you won't be prompted for 
any parameters (and if you fail to set any without legal default
values, the task will fail).
</p>

<p>If you want to see the actual values of the parameters for a task
as it runs,
including prompted values and defaulted ones 
which you haven't specified explicitly,
you can use the <code>-verbose</code> flag after the <code>stilts</code>
command:
<verbatim><![CDATA[
   % stilts -verbose tcopy cat.fits cat.vot ifmt=fits
   INFO: tcopy in=cat.fits out=cat.vot ifmt=fits ofmt=(auto)
]]></verbatim>
</p>

<p>Extensive help is available from <code>stilts</code> 
itself about task and its parameters, as described in the next section.
</p>

</subsect>

<subsect>
<subhead><title>Getting Help</title></subhead>

<p>As well as the command descriptions in this document
(especially the reference section <ref id="cmdUsage"/>)
you can get help for STILTS usage from the command itself.
Typing
<verbatim>
   stilts -help
</verbatim>
results in this output:
<verbatim>&stilts-usage;</verbatim>
</p>

<p>For help on the individual tasks, including their parameter lists,
you can supply the word <code>help</code>
after the task name, so for instance
<verbatim>
   stilts tcopy help
</verbatim>
results in
<verbatim>&tcopy-usage;</verbatim>
</p>

<p>Finally, you can get help on any of the parameters of a task
by writing <code>help=&lt;param-name&gt;</code>, like this:
<verbatim>
   stilts tcopy help=in
</verbatim>
gives
<verbatim>&tcopy-in-usage;</verbatim>
If you use "<code>*</code>" instead of a parameter name in this usage, 
help for all the parameters will be printed.  Note that in most shells
you will probably need to quote the asterisk, so you should write
<verbatim>
   stilts tcopy help='*'
</verbatim>
</p>

<p>In some cases, as described in <ref id="task-args"/>, you will
be prompted for the value of a parameter with a line something like this:
<verbatim>
   matcher - Name of matching algorithm [sky]:
</verbatim>
In this case, if you enter "<code>help</code>" or a question mark,
then the parameter help entry will be printed to the screen, and 
the prompt will be repeated.
</p>

<p>For more detailed descriptions of the tasks, which includes
explanatory comments and examples as well as the information above,
see the full task descriptions in the
<ref id="cmdUsage" plaintextref="yes">Command Reference</ref>.
</p>

</subsect>

</sect>


<sect id="invoke">
<subhead><title>Invocation</title></subhead>

<p>There are a number of ways of invoking the <code>stilts</code> command,
depending on how you have installed the package.
This section describes how to invoke it from the command line.
An alternative, using it from Jython (the Java implementation of
the Python language), is described in <ref id="jystilts"/>.
</p>

<p>If you're using a Unix-like operating system,
the easiest way is to use the <code>stilts</code> script.
If you have a full starjava installation it is in the 
<code>starjava/bin</code> directory.
Otherwise you can download it separately from wherever you got your
STILTS installation in the first place, or find it 
at the top of the <code>stilts.jar</code> or <code>topcat-*.jar</code>
that contains your STILTS installation, so do something like
<verbatim>
   unzip stilts.jar stilts
   chmod +x stilts
</verbatim>
to extract it (if you don't have <code>unzip</code>, 
try <code>jar xvf stilts.jar stilts</code>).
<code>stilts</code> is a simple shell script which just invokes java with the
right classpath and the supplied arguments.
</p>

<p>To run using the <code>stilts</code> script, first make sure that
both the <code>java</code> 
executable and the <code>stilts</code> script itself are on your path,
and that the <code>stilts.jar</code> or <code>topcat-*.jar</code>
jar file is in the same directory as <code>stilts</code>.
Then the form of invocation is:
<verbatim><![CDATA[
   stilts <java-flags> <stilts-flags> <task-name> <task-args>
]]></verbatim>
A simple example would be:
<verbatim>
   stilts votcopy format=binary t1.xml t2.xml
</verbatim>
in this case, as often, there are no <code>&lt;java-flags&gt;</code> or
<code>&lt;stilts-flags&gt;</code>.
If you use the <code>-classpath</code>
argument or have a CLASSPATH environment variable set, 
then classpath elements thus specified will be added to the classpath
required to run the command.
The examples in the 
command descriptions below use this form for convenience.
</p>

<p>If you don't have a Unix-like shell available however,
you will need to invoke
Java directly with the appropriate classes on your classpath.
If you have the file <code>stilts.jar</code>, in most cases you can 
just write:
<verbatim><![CDATA[
   java <java-flags> -jar stilts.jar <stilts-flags> <task-name> <task-args>
]]></verbatim>
which in practice would look something like
<verbatim>
   java -jar /some/where/stilts.jar votcopy format=binary t1.xml t2.xml
</verbatim>
</p>

<p>In the most general case, Java's <code>-jar</code> flag might be
no good, for one of the following reasons:
<ol>
<li>You have the classes in some form other than the <code>stilts.jar</code>
    file (such as <code>topcat-full.jar</code>)</li>
<li>You need to specify some extra classes on the classpath, which is
    required e.g. for use with 
    <ref id="jdbcConfig" plaintextref="yes">JDBC</ref> 
    or if you are 
    <ref id="jelExtend" plaintextref="yes">extending the commands</ref>
    using your own classes at runtime</li>
</ol>
In this case, you will need an invocation of this form:
<verbatim><![CDATA[
   java <java-flags> -classpath <class-path> 
        uk.ac.starlink.ttools.Stilts <stilts-flags> <task-name> <task-args>
]]></verbatim>
The example above in this case would look something like:
<verbatim>
   java -classpath /some/where/topcat-full.jar uk.ac.starlink.ttools.Stilts 
        votcopy format=binary t1.xml t2.xml
</verbatim>
</p>

<p>Finally, as a convenience, it is possible to run STILTS from a
<webref url="http://www.starlink.ac.uk/topcat/">TOPCAT</webref> 
installation by using its <code>-stilts</code> flag, like this:
<verbatim><![CDATA[
   topcat <java-flags> -stilts <stilts-flags> <task-name> <task-args>
]]></verbatim>
This is possible because TOPCAT is built on top of STILTS, so contains
a superset of its code.
</p>

<p>The 
<code>&lt;stilts-flags&gt;</code>,
<code>&lt;task-name&gt;</code> and
<code>&lt;task-args&gt;</code> 
parts of these invocations are explained in <ref id="stilts-cmd"/>,
and the 
<code>&lt;class-path&gt;</code> and
<code>&lt;java-flags&gt;</code>
parts are explained in the following subsections.
</p>

<subsect id="jvmClasspath">
<subhead><title>Class Path</title></subhead>

<p>The classpath is the list of places that Java looks to find
the bits of compiled code that it uses to run an application.
Depending on how you have done your installation the core STILTS
classes could be in various places, but they are probably in a
file with one of the names 
<code>stilts.jar</code>,
<code>topcat-lite.jar</code> or
<code>topcat-full.jar</code>.
The full pathname of one of these files can therefore be used as
your classpath.  In some cases these files are self-contained and
in some cases they reference other jar files in the filesystem -
this means that they may or may not continue to work if you 
move them from their original location.
</p>

<p>Under certain circumstances the tools might need additional classes,
for instance:
<ul>
<li>JDBC drivers (see <ref id="jdbcConfig"/>)</li>
<li>Providing extended algebraic functions 
    (see <ref id="jelExtend"/>)</li>
<li>Installing I/O handlers for new table formats
    (see <docxref doc="sun252" loc="pluggableIO"/>)</li>
</ul>
In this case the classpath must contain a list of all the jar files in which
the required classes can be found, separated by colons (unix) or
semicolons (MS Windows).  Note that even if all your jar files
are in a single directory you can't use the name of
that directory as a class path - you must name each jar file,
separated by colons/semicolons.
</p>

</subsect>

<subsect id="jvmArgs">
<subhead><title>Java Flags</title></subhead>

<p>In most cases it is not necessary to specify any additional 
arguments to the Java runtime, but it can be useful in certain
circumstances.  The two main kinds of options you might want to
specify directly to Java are these:

<dl>

<dt>System properties</dt>
<dd><p>System properties are a way of getting information into the
    Java runtime from the outside, rather like environment variables.
    There is a list of the ones which have significance to STILTS 
    in <ref id="sysProperties"/>.  You can set them from the 
    command line using a flag of the form <code>-Dname=value</code>.
    So for instance to ensure that temporary files are written to
    the <code>/home/scratch</code> directory, you could use the flag
    <verbatim>
   -Djava.io.tmpdir=/home/scratch
    </verbatim>
    </p></dd>

<dt>Memory size</dt>
<dd><p>Java runs with a fixed amount of 'heap' memory; this is 
    typically 64Mb by default.  
    If one of the tools fails with a message that says it's out of memory
    then this has proved too small for the job in hand.  You can increase the 
    heap memory with the <code>-Xmx</code> flag.  To set the heap 
    memory size to 256 megabytes, use the flag
    <verbatim>
   -Xmx256M
    </verbatim>
    (don't forget the 'M' for megabyte).  You will probably find
    performance is dreadful if you specify a heap size larger than 
    the physical memory of the machine you're running on.
    </p></dd>

</dl>
</p>

<p>You can specify other options to Java such as tuning and profiling
flags etc, but if you want to do that sort of thing 
you probably don't need me to tell you about it.
</p>

<p>If you are using the <code>stilts</code> command-line script,
any flags to it starting <code>-D</code> or <code>-X</code> are passed
directly to the <code>java</code> executable.  
You can pass other flags to Java with the <code>stilts</code> script's
<code>-J</code> flag; for instance:
<verbatim>
   stilts -Xmx4M -J-verbose:gc calc 'mjdToIso(0)'
</verbatim>
is equivalent to
<verbatim>
   java -Xmx4M -verbose:gc -jar stilts.jar calc 'mjdToIso(0)'
</verbatim>
</p>

</subsect>


<subsect id="sysProperties">
<subhead><title>System Properties</title></subhead>

<p>System properties are a way of getting information into the
Java runtime - they are a bit like environment variables.
There are two ways to set them when using STILTS: either
on the command line using arguments of the form
<code>-Dname=value</code> (see <ref id="jvmArgs"/>)
or in a file in your home directory named 
<code>.starjava.properties</code>, in the form of a
<code>name=value</code> line.
Thus submitting the flag
<verbatim>
   -Dvotable.strict=true
</verbatim>
on the command line is equivalent to having the following in your
<code>.starjava.properties</code> file:
<verbatim>
   #  Force strict interpretation of the VOTable standard.
   votable.strict=true
</verbatim>
</p>

<p>The following system properties have special significance to STILTS:
<dl>

<dt><code>http.proxyHost</code></dt>
<dd><p>Can be used to force HTTP access to go via a named proxy;
    may be required if you are attempting access to remote data or services
    from behind a firewall configured to block direct HTTP connections.
    See java documentation for this property for more details.
    </p></dd>

<dt><code>java.awt.headless</code></dt>
<dd><p>May need to be set to "<code>true</code>" if running the 
    plotting tasks on a headless server.  
    You only need to worry about this if you see error messages
    complaining about headlessness.
    </p></dd>

<dt><code>java.io.tmpdir</code></dt>
<dd><p>The directory in which STILTS will write any temporary files it needs.
    This is usually only done if the <code>-disk</code> flag has been
    specified (see <ref id="stilts-flags"/>).
    </p></dd>

<dt><code>jdbc.drivers</code></dt>
<dd><p>Can be set to a (colon-separated) list of JDBC driver classes
    using which SQL databases can be accessed
    (see <ref id="jdbcConfig"/>).
    </p></dd>

<dt><code>jel.classes</code></dt>
<dd><p>Can be set to a (colon-separated) list of classes containing
    static methods which define user-provided
    functions for synthetic columns or subsets.
    (see <ref id="jelExtend"/>).
    </p></dd>

<dt><code>mark.workaround</code></dt>
<dd><p>If set to "true", this will work around a bug in the 
    <code>mark()</code>/<code>reset()</code> methods of some java
    <code>InputStream</code> classes.  These are rather common,
    including in Sun's J2SE system libraries.
    Use this if you are seeing errors that say something like
    "<code>Resetting to invalid mark</code>".
    Currently defaults to "false".</p></dd>

<dt><code>service.maxparallel</code></dt>
<dd><p>Raises the maximum number of concurrent queries that may be made
    during a multi-cone operation.
    You should only increase this value <strong>with great care</strong>
    since you risk overloading servers and becoming unpopular with
    data centres.
    As a rule, you should only increase this value if you have
    obtained permission from the data centres whose services
    on which you will be using the increased parallelism.
    </p></dd>

<dt><code>star.basicauth.user</code></dt>
<dt><code>star.basicauth.password</code></dt>
<dd><p>If set, these will provide username and password for HTTP Basic
    Authentication.  Any time the application attempts to access an
    HTTP URL and is met by a 401 Unauthorized response, it will try again
    supplying these user credentials.  This is a rather blunt instrument,
    since the same identity is supplied regardless of which URL is being
    accessed, but it may be of some use in accessing basic-authentication
    protected services.
    </p></dd>

<dt><code>startable.readers</code></dt>
<dd><p>Can be set to a (colon-separated) list of custom table format input
    handler classes (see <docxref doc="sun252" loc="pluggableIO"/>).
    </p></dd>

<dt><code>startable.storage</code></dt>
<dd><p>Can be set to determine the default storage policy.
    Setting it to "<code>disk</code>" has basically the same effect as
    supplying the "<code>-disk</code>" argument on the command line
    (see <ref id="stilts-flags"/>).
    Other possible values are "<code>adaptive</code>", "<code>memory</code>",
    "<code>sideways</code>" and "<code>discard</code>";
    see <docxref doc="sun252" loc="storagePolicy"/>.
    The default is "<code>adaptive</code>", which means storing smaller
    tables in memory, and larger ones on disk.
    </p></dd>

<dt><code>startable.writers</code></dt>
<dd><p>Can be set to a (colon-separated) list of custom table format output
    handler classes (see <docxref doc="sun252" loc="pluggableIO"/>).
    </p></dd>

<dt><code>votable.namespacing</code></dt>
<dd><p>Determines how namespacing is handled in input VOTable documents.
    Known values are 
    "<code>none</code>" (no namespacing, xmlns declarations
    in VOTable document will probably confuse parser),
    "<code>lax</code>" (anything that looks like it is probably a VOTable
    element will be treated as a VOTable element) and
    "<code>strict</code>" (VOTable elements must be properly declared in one
    of the correct VOTable namespaces).
    May also be set to the classname of a
    <code>uk.ac.starlink.votable.Namespacing</code> implementation.
    The default is "<code>lax</code>".
    </p></dd>

<dt><code>votable.strict</code></dt>
<dd><p>Set <code>true</code> for strict enforcement of the VOTable standard
    when parsing VOTables.  This prevents the parser from working round
    certain common errors, such as missing <code>arraysize</code>
    attributes on <code>FIELD</code> or <code>PARAM</code> 
    elements with <code>datatype="char"</code>.
    False by default.
    </p></dd>

<dt><code>votable.version</code></dt>
<dd><p>Selects the version of the VOTable standard which output VOTables
    will conform to by default.
    May take the values "<code>1.0</code>", "<code>1.1</code>",
    "<code>1.2</code>" or "<code>1.3</code>".
    By default, version 1.2 VOTables are written.
    </p></dd>

</dl>
</p>

</subsect>

<subsect id="jdbcConfig">
<subhead><title>JDBC Configuration</title></subhead>

<p>This section describes additional configuration which must be
done to allow the commands to access SQL-compatible relational databases
for reading  or writing tables.
If you don't need to talk to SQL-type databases,
you can ignore the rest of this section.
The steps described here are the standard ones
for configuring JDBC (which sort-of stands for Java Database Connectivity),
described in more detail on
<webref url="&URL.J2SE_DOCS;guide/jdbc/">Sun's JDBC web page</webref>.
</p>

<p>To use STILTS with SQL-compatible databases you must:
<ul>
<li>Have access to an SQL-compatible database locally or over the network</li>
<li>Have a JDBC driver appropriate for that database</li>
<li>Install that driver for use with STILTS</li>
<li>Know the format the driver uses for URLs to access database tables</li>
<li>Have appropriate privileges on the database to perform the
    desired operations</li>
</ul>
Installing the driver consists of two steps:
<ol>
<li>Ensure that the classpath you are using includes this driver class
    as described in <ref id="jvmClasspath"/></li>
<li>Set the <code>jdbc.drivers</code> system property to the name of the
    driver class as described in <ref id="sysProperties"/></li>
</ol>
</p>

<p>These steps are all standard for use of the
<webref url="&URL.J2SE_DOCS;guide/jdbc/">JDBC</webref> system.
See <docxref doc="sun252" loc="jdbcConfig"/> for information
about JDBC drivers known to work with STIL (the short story is
that at least MySQL and PostreSQL will work).
</p>

<p>Here is an example of using <code><ref id="tcopy">tcopy</ref></code>
to write the results
of an SQL query on a table in a MySQL database as a VOTable:
<verbatim><![CDATA[
   stilts -classpath /usr/local/jars/mysql-connector-java.jar \
          -Djdbc.drivers=com.mysql.jdbc.Driver \
          tcopy \
          in="jdbc:mysql://localhost/db1#SELECT id, ra, dec FROM gsc WHERE mag < 9" \
          ofmt=votable gsc.vot
]]></verbatim>
or invoking Java directly:
<verbatim><![CDATA[
   java -classpath stilts.jar:/usr/local/jars/mysql-connect-java.jar \
        -Djdbc.drivers=com.mysql.jdbc.Driver \
        uk.ac.starlink.ttools.Stilts tcopy \
        in="jdbc:mysql://localhost/db1#SELECT id, ra, dec FROM gsc WHERE mag < 9" \
        ofmt=votable out=gsc.vot
]]></verbatim>
You have to exercise some care to get the arguments
in the right order here - see <ref id="invoke"/>.
</p>

<p>Alternatively, you can set some of this up beforehand to make the
invocation easier.  If you set your CLASSPATH environment variable
to include the driver jar file (and the STILTS classes if you're 
invoking Java directly rather than using the scripts), and if you
put the line
<verbatim>
   jdbc.drivers=com.mysql.jdbc.Driver
</verbatim>
in the <code>.starjava.properties</code> file in your home directory,
then you could avoid having to give the <code>-classpath</code> and 
<code>-Djdbc.drivers</code> flags respectively.
</p>

</subsect>

</sect>


<sect id="jystilts">
<subhead><title>JyStilts - STILTS from Python</title></subhead>

<p>Most of the discussions and examples in this document describe
using STILTS as a standalone java application from the command line;
in this case, scripting can be achieved by executing one STILTS
command, followed by another, followed by another, perhaps controlled
from a shell script, with intermediate results stored in files.
</p>

<p>However, it is also possible to invoke STILTS commands from within
the <webref url="http://www.jython.org/">Jython</webref> environment.
Jython is a pure-java implementation of the widely-used
<webref url="http://www.python.org/">Python</webref> scripting language.
Using Jython is almost exactly the same as using the more usual C-based Python,
except that it is not possible to use extensions which use C code.
This means that if you are familiar with Python programming,
it is very easy to string STILTS commands together in Jython.
</p>

<p>This approach has several advantages over the conventional command-line
usage:
<ul>
<li>You can make use of python programming constructions like 
    loops, functions and variables</li>
<li>Intermediate processing stages can be kept in memory (in a python variable)
    rather than having to write them out to a file and read them in for the
    next command; this can be much more efficient</li>
<li>Because of the previous point, there are separate read, filter,
    processing and write commands, which means command lines can be
    shorter and less confusing</li>
<li>The java startup overhead (typically a couple of seconds) happens only
    once when entering jython, not once for every STILTS command</li>
</ul>
Note however that you will <em>not</em> be able to introduce JyStilts
commands into your larger existing Python programs if those rely on
C-based extensions, such as NumPy and SciPy, since JyStilts will only
run in JPython, while C-based extensions will only run in CPython.
(See however 
<webref url="http://jnumerical.sourceforge.net/index.html"
        >JNumeric</webref> for some of the Numpy functionality from Jython.)
</p>

<p>Usage from jython has syntax which is similar to command-line STILTS,
but with a few changes.
The following functions are defined by JyStilts:
<ul>
<li>A function <code>tread</code>, which reads a table from a
    file or URL and turns it into a table object in jython
    </li>
<li>A table method <code>write</code> which takes a table object and
    writes it to file
    </li>
<li>A table method for each STILTS <ref id="filterSteps">filter</ref>
    (e.g. <code>cmd_head</code>, <code>cmd_select</code>,
          <code>cmd_addcol</code>)
    </li>
<li>A table method for each STILTS <ref id="outModes">output mode</ref>
    (e.g. <code>mode_out</code>, <code>mode_meta</code>,
          <code>mode_samp</code>),
    </li>
<li>A function for each STILTS <ref id="cmdUsage">task</ref> 
    (e.g. <code>tmatch2</code>, <code>tcat</code>, <code>plot2d</code>)
    </li>
<li>A number of table methods which make table objects integrate nicely into
    the python environment</li>
</ul>
Reasonably detailed documentation for these is provided in the 
usual Python way ("<em>doc strings</em>"), 
and can be accessed using the Python "<code>help</code>" command, however
for full documentation and examples you should refer to this document.
</p>

<p>In JyStilts the input, processing, filtering and output are 
done in separate steps, unlike in command-line STILTS where they all
have to be combined into a single line.  This can make the
flow of execution easier to follow.
A typical sequence will involve:
<ol>
<li>Reading one or more tables from file using
    the <code>tread</code> function</li>
<li>Perhaps filtering the input table(s) using one or more of the 
    <code>cmd_*</code> filter methods</li>
<li>Performing core processing such as crossmatching</li>
<li>Perhaps filtering the result using one or more of the
    <code>cmd_*</code> filter methods</li>
<li>If running interactively, perhaps examining the intermediate results
    using one of the <code>mode_*</code> output modes</li>
<li>Writing the final result to a file using the <code>write</code> method</li>
</ol>
</p>

<p>Here is an example command line invocation for crossmatching two tables:
<verbatim>
   stilts tskymatch2 in1=survey.fits \
                     icmd1='addskycoords fk4 fk5 RA1950 DEC1950 RA2000 DEC2000' \
                     in2=mycat.csv ifmt2=csv \
                     icmd2='select VMAG>18' \
                     ra1=ALPHA dec1=DELTA ra2=RA2000 dec2=DEC2000 \
                     error=10 join=2not1 \
                     out=matched.fits
</verbatim>
and here is what it might look like in JyStilts:
<verbatim><![CDATA[
   >>> import stilts
   >>> t1 = stilts.tread('survey.fits')
   >>> t1 = t1.cmd_addskycoords(t1, 'fk4', 'fk5', 'RA1950', 'DEC1950', 'RA2000', 'DEC2000')
   >>> t2 = stilts.tread('mycat.csv', 'csv')
   >>> t2 = t2.cmd_select('VMAG>18')
   >>> tm = stilts.tskymatch2(in1=t1, in2=t2, ra1='ALPHA', dec1='DELTA',
   ...                        error=10, join='2not1')
   >>> tm.write('matched.fits')
]]></verbatim>
</p>

<p>When running interactively, it can be convenient to examine the intermediate
results before processing or writing as well, for instance:
<verbatim><![CDATA[
   >>> tm.mode_count()
   columns: 19   rows: 2102
   >>> tm.cmd_keepcols('ID ALPHA DELTA').cmd_head(4).write()
   +--------+---------------+-----------+
   | ID     | ALPHA         | DELTA     |
   +--------+---------------+-----------+
   | 262    | 149.82439     | -0.11249  |
   | 263    | 150.14438     | -0.11785  |
   | 265    | 149.92944     | -0.11667  |
   | 273    | 149.93185     | -0.12566  |
   +--------+---------------+-----------+
]]></verbatim>
</p>

<p>More detail about how to run JyStilts and its usage 
is given in the following subsections.
</p>

<subsect id="jyrun">
<subhead><title>Running JyStilts</title></subhead>

<p>The easiest way to run JyStilts is to download the standalone
<code>jystilts.jar</code> file from the STILTS web page,
and simply run
<verbatim>
    java -jar jystilts.jar   
</verbatim>
This file includes jython itself and all the STILTS and JyStilts classes.
To use the JyStilts commands, you will need to import the stilts
module using a line like "<code>import stilts</code>"
from Jython in the usual Python way.
</p>

<p>Alternatively, you can run JyStilts from an existing Jython installation
using just the <code>stilts.jar</code> file.
First, make sure that Jython is installed;
it is available from <webref url="http://www.jython.org/"/>,
and comes as a self-installing jar file.
JyStilts has been tested, and appears to work, on versions
2.5.0 and 2.5.1; it's recommended to use the latest version
if you don't have some reason to use one of the others.
Some earlier versions of JyStilts worked with jython 2.2.1, 
but that no longer seems to be the case; it might be possible
to reinstate this if there is some pressing need.
</p>

<p>To use JyStilts, you then just need to
start jython with the <code>stilts.jar</code> file on your classpath,
for instance like this:
<verbatim>
    jython -J-classpath /some/where/stilts.jar
</verbatim>
or (C-shell):
<verbatim>
    setenv CLASSPATH /some/where/stilts.jar
    jython
</verbatim>
</p>

<p>Optionally, you can extract the <code>stilts.py</code> module 
from the stilts.jar file 
(using a command like "<code>unzip stilts.jar stilts.py</code>")
and put it in a directory on your jython 
<code>sys.path</code> (e.g. <code>jythondir/Lib</code>);
this may cause jython to compile it to bytecode (<code>stilts$py.class</code>)
and thus improve startup time.
Note that in this case you will still need the <code>stilts.jar</code> 
file on your classpath as above.
</p>

</subsect>

<subsect>
<subhead><title>Table I/O</title></subhead>

<p>The <code>tread</code> function reads tables from an external location
into JyStilts.  Its arguments are as follows:
<verbatim>
   tread(location, fmt='(auto)', random=False)
</verbatim>
and its return value is a <ref id="jytable">table object</ref>,
which can be interrogated directly, or used in other JyStilts commands.
Usually, the location argument should be a string which gives the
filename or URL at which a table can be found.
You can alternatively use a readable python file (or file-like) object for 
the location, but be aware that this may be less efficient on memory.
As with command-line STILTS, the <code>fmt</code> argument
is one of the options in <ref id="inFormats"/>, but may be
left as the default if the format auto-detectable,
which currently means if the file is in VOTable, FITS or CDF format.
The <code>random</code> argument can be used to ensure that the returned file
has random (i.e. not sequential-only) access;
for some table formats the default way of reading them in means that
their rows can only be accessed in sequence.
Depending on what processing you are doing, that may or may not be
satisfactory.
</p>

<p>Examples of reading a table are:
<verbatim><![CDATA[
   >>> import stilts
   >>> t1 = stilts.tread('cat.fits')
   >>> t2 = stilts.tread(open('cat.fits', 'rb'))           # less efficient
   >>> t3 = stilts.tread('data.csv', fmt='ascii', random=True)
]]></verbatim>
</p>

<p>The most straightforward way to write a table
(presumably the result of one or a sequence of JyStilts commands) 
is using the <code>write</code> table method:
<verbatim>
   write(self, location=None, fmt='(auto)')
</verbatim>
The <code>location</code> gives either a string which is a filename,
or a writable python file (or file-like) object.
Again, use of a filename is preferred as it may(?) be more efficient.
If no location is supplied, the table will be written to standard output
(useful for inspection, but a bad idea for binary formats or very large tables).
The <code>fmt</code> argument is one of the output formats in 
<ref id="outFormats"/>, but may be left as the default if the
format can be guessed from the filename.
</p>

<p>Examples of writing a table are:
<verbatim><![CDATA[
   >>> table.write('out.fits')
   >>> table.write(open('out.fits', 'wb'))       #  less efficient?
   >>> table.write('catalogue.dat', fmt='csv')
   >>> table.write()                             #  display to stdout
]]></verbatim>
</p>

<p>Often it's convenient to combine examining the table with filtering
steps, for instance:
<verbatim><![CDATA[
   >>> table.every(100).write()
]]></verbatim>
would write only every hundredth row, and
<verbatim><![CDATA[
   >>> (table.cmd_sorthead(10, 'BMAG')
   ...       .cmd_select('!NULL_VMAG')
   ...       .cmd_keepcols('BMAG VMAG')
   ...       .write())
]]></verbatim>
would write only the BMAG and VMAG columns 
for the ten rows in which VMAG is non-null with the lowest BMAG values.
</p>

<p>You can also read and write multiple tables, if you use a table
format for which that is appropriate.
This generally means FITS (which can store tables in multiple extensions)
or VOTable (which can store multiple TABLE elements in one document).
This is done using the <code>treads</code> and <code>twrites</code> functions.
The functions look like this:
<verbatim><![CDATA[
   treads(location, fmt='(auto)', random=False)
   twrites(tables, location=None, fmt='(auto)')
]]></verbatim>
These are similar to the <code>tread</code> and <code>twrite</code> functions,
except that <code>treads</code> returns a list of tables rather than
a single table, and <code>twrites</code>'s <code>tables</code> argument is
an iterable over tables rather than a single table.
Here is an example of reading multiple tables from a multi-extension FITS
file, counting the rows in each, and then writing them out to a multi-TABLE
VOTable file:
<verbatim><![CDATA[
   import stilts
   tables = stilts.treads('multi.fits')
   print([t.getRowCount() for t in tables])
   stilts.twrites(tables, 'multi.vot', fmt='votable')
]]></verbatim>
</p>

</subsect>

<subsect id="jytable">
<subhead><title>Table objects</title></subhead>

<p>The tables read by the <code>tread</code> function and produced
by operating on them within JyStilts have a number of methods
defined on them.
These are explained below.
</p>

<p>First, a number of special methods are defined which allow a table to
behave in python like a sequence of rows:
<dl>
<dt><code>__iter__</code></dt>
<dd><p>This special method means that the table can be treated as an
    <em>iterable</em>, so that for instance
    "<code>for row in table:</code>" will iterate over all rows.
    </p></dd>
<dt><code>__len__</code> <em>(random-access tables only)</em></dt>
<dd><p>This special method means that you can use the expression
    "<code>len(table)</code>" to count the number of rows.
    This method is not available for tables with sequential access only.
    </p></dd>
<dt><code>__getitem__</code> <em>(random-access tables only)</em></dt>
<dd><p>Returns a row at a given index in the table.
    This special method means that you can use indexing expressions like
    "<code>table[3]</code>" or <code>table[0:10]</code> to obtain the
    row or rows corresponding to a given row index or slice.
    This method is not available for tables with sequential access only.
    </p></dd>
<dt><code>__add__</code>, <code>__mul__</code>, <code>__rmul__</code></dt>
<dd><p>These special methods allow the addition and multiplication 
    operators "<code>+</code>" and and "<code>*</code>" to be used with
    the sense of concatenation.
    Thus "<code>table1+table2</code>" will produce a new table with the
    rows of <code>table1</code> followed by the rows of <code>table2</code>.
    Note this will only work if both tables have compatible columns.
    Similarly "<code>table*3</code>" would produce a table like
    <code>table</code> but with all its rows repeated three times.
    </p></dd>
</dl>
In all of these cases, each row object that is accessed is a tuple
of the column values for that row of the table.
The tuple items (table cells) may be accessed using a key which is
a numeric index or slice in the usual way,
or with a key which is a column name, or one of the ColumnInfo objects
returned by <code>columns()</code>.
</p>

<p>Sometimes, the result of a table operation will be a table which
does not have random access.  For such tables you can iterate over
the rows, but not get their row values by indexing.
Non-random-access tables are also peculiar in that <code>getRowCount</code>
returns a negative value.
To take a table which may not have random access and make it capable
of random access, use the <ref id="random"><code>random</code></ref>
filter: "<code>table=table.cmd_random()</code>".
</p>

<p>To a large extent it is possible to duplicate the functions of the
various STILTS commands by writing your own python code based on these
python-friendly table access methods.
Note however that such python-based processing is likely to be
<em>much</em> slower than the STILTS equivalents.
If performance is important to you, you should try in most cases
to use the various <code>cmd_*</code> commands etc for table processing.
</p>

<p>Second, some additional utility methods are defined:
<dl>
<dt><code>columns()</code></dt>
<dd><p>Returns a tuple of the column descriptors for the table.
    Each item in the tuple is an instance of the
    <webref url="&URL.STIL_JAVADOCS;ColumnInfo.html">ColumnInfo</webref> class;
    useful methods include <code>getName()</code>,
    <code>getUnitString()</code>, <code>getUCD()</code>.
    <code>str(column)</code> will return its name.
    </p></dd>
<dt><code>coldata(key)</code></dt>
<dd><p>Returns a sequence of the values for the given column.
    The sequence will have the same number of elements as the number of rows
    in the table.  The <code>key</code> argument may be either an integer
    column index (if negative, counts backwards from the end),
    or the column name or info object.
    The returned value will always be iterable (has <code>__iter__</code>),
    but will only be indexable 
    (has <code>__len__</code> and <code>__getitem__</code>) if the table
    is random access.
    </p></dd>
<dt><code>parameters()</code></dt>
<dd><p>Returns a name to value mapping of the table parameters
    (per-table metadata).
    This does not include all the available information about those
    parameters, for instance unit and UCD information is not included.
    For more detailed information, use the <code>StarTable</code> methods.
    Note that as currently implemented, changing the values in the
    returned mapping will not change the actual table parameter values.
    </p></dd>
<dt><code>write(location=None, fmt=None)</code></dt>
<dd><p>Outputs the table.
    The optional <code>location</code> argument gives a filename
    or writable file object,
    and the optional <code>fmt</code> argument gives a format, one of
    the options listed in <ref id="inFormats"/>.
    If <code>location</code> is not supplied, output is to standard output,
    so in an interactive session it will be printed to the terminal.
    If <code>fmt</code> is not supplied, an attempt will be made to guess
    a suitable format based on the location.
    </p></dd>
</dl>
</p>

<p>Third, a set of <code>cmd_*</code> methods corresponding to the
STILTS filters are available;
these are described in <ref id="jyfilter"/>.
</p>

<p>Fourth, a set of <code>mode_*</code> methods corresponding to the
STILTS output modes are available;
these are described in <ref id="jymode"/>.
</p>

<p>Finally, tables are also instances of the 
<webref url="&URL.STIL_JAVADOCS;StarTable.html">StarTable</webref>
interface defined by
<webref url="http://www.starlink.ac.uk/stil/">STIL</webref>,
which is the table I/O layer underlying STILTS.
The full documentation can be found in the user manual and javadocs
on the STIL page, and all the java methods can be used from JyStilts,
but in most cases there are more pythonic equivalents provided,
as described above.
</p>

<p>Here are some examples of these methods in use:
<verbatim><![CDATA[
   >>> import stilts
   >>> xsc = stilts.tread('/data/table/2mass_xsc.xml')  # read table
   >>> xsc.mode_count()                                 # count rows and cols
   columns: 6   rows: 1646844
   >>> print xsc.columns()                              # full info on columns
   (id(String), ra(Double)/degrees, dec(Double)/degrees, jmag(Double)/mag, hmag(Double)/mag, kmag(Double)/mag)
   >>> print [str(col) for col in xsc.columns()]        # column names only
   ['id', 'ra', 'dec', 'jmag', 'hmag', 'kmag']
   >>> row = xsc[1000000]                               # examine millionth row
   >>> print row
   (u'19433000+4003190', 295.875, 40.055286, 14.449, 13.906, 13.374)
   >>> print row[0]                                     # cell by index
   19433000+4003190
   >>> print row['ra'], row['dec']                      # cells by col name
   295.875 40.055286
   >>> print len(xsc)                                   # count rows
   1646844
   >>> print len(xsc+xsc)                               # concatenate
   3293688
   >>> print len(xsc*100)
   164684400
   >>> for row in xsc:                  # select rows using python commands
   ...     if row[4] - row[3] > 3.0:
   ...         print row[0]
   ... 
   11165243+2925509
   20491597+5119089
   04330238+0858101
   01182715-1013248
   11244075+5218078
   >>>                                  # same thing using stilts (50x faster)
   >>> (xsc.cmd_select('hmag - jmag > 3.0')
   ...     .cmd_keepcols('id')
   ...     .write())
   +------------------+
   | id               |
   +------------------+
   | 11165243+2925509 |
   | 20491597+5119089 |
   | 04330238+0858101 |
   | 01182715-1013248 |
   | 11244075+5218078 |
   +------------------+
]]></verbatim>
</p>

<p>The following are all ways to obtain the value of a given cell
in the table from the previous example.
<verbatim>
    xsc.getCell(99, 0)
    xsc[99][0]
    xsc[99]['id']
    xsc.coldata(0)[99]
    xsc.coldata('id')[99]
</verbatim>
Some of these methods may be more efficient than others.
Note that none of these methods will work if the table has sequential-only
access.
</p>

</subsect>

<subsect id="jyfilter">
<subhead><title>Table filter commands (<code>cmd_*</code>)</title></subhead>

<p>The STILTS table filters documented in <ref id="filterSteps"/> 
are available in JyStilts as table methods
which start with the "<code>cmd_</code>" prefix.
The return value when calling the method on a table object is 
another table object.
The arguments, which are the same as those required for the command-line
version, are supplied as a list of unnamed arguments of the 
<code>cmd_*</code> function.  In general the arguments are strings,
but numbers are accepted where appropriate.
Use the python <code>help</code> command to see the usage of each method.
</p>

<p>So, to use the <ref id="tail"><code>tail</code></ref> filter to
select only the last ten lines of a table, you can write:
<verbatim>
   table.cmd_tail(10)
</verbatim>
To set units of "Hz" for some columns using the 
<ref id="colmeta"><code>colmeta</code></ref> filter write:
<verbatim>
   table.cmd_colmeta('-units', 'Hz', 'AFREQ BFREQ CFREQ')
</verbatim>
Note that where a filter argument is a space-separated list
it must appear as a single argument in the filter invocation,
just as in command-line STILTS.
</p>

<p>The filter commands are also available as module functions.
This means that 
<verbatim>
   stilts.cmd_head(table, 10)
</verbatim>
and
<verbatim>
   table.cmd_head(10)
</verbatim>
have exactly the same meaning.  It's a matter of taste which you prefer.
</p>

</subsect>

<subsect id="jymode">
<subhead><title>Table output modes (<code>mode_*</code>)</title></subhead>

<p>The STILTS table output modes documented in <ref id="outModes"/>
are available in JyStilts as table methods
which start with the "<code>mode_</code>" prefix.
These methods have no return value, but cause something to happen,
in some cases output to be written to standard output.
Some of these methods have named arguments, others have no arguments.
Use the python <code>help</code> command to see the usage of each method.
</p>

<p>These methods are straightforward to use.
The following example calculates statistics for a table and
writes the results to standard output:
<verbatim><![CDATA[
   >>> table.mode_stats()
]]></verbatim>
and this one attempts to send the table via the SAMP communications 
protocol to a running instance of TOPCAT:
<verbatim><![CDATA[
   >>> table.mode_samp(client='topcat')
]]></verbatim>
</p>

<p>The output modes are also available as module functions.
This means that
<verbatim><![CDATA[
   stilts.mode_samp(table, client='topcat')
]]></verbatim>
and
<verbatim><![CDATA[
   table.mode_samp(client='topcat)
]]></verbatim>
have exactly the same meaning.  It's a matter of taste which you prefer.
</p>

</subsect>

<subsect id="jytask">
<subhead><title>Tasks</title></subhead>

<p>The STILTS tasks documented in <ref id="cmdUsage"/>
can be used under their usual names if they are imported from the
<code>stilts</code> module.
STILTS parameters as are supplied as named arguments of the python
functions.  In general they are either table objects for table input
parameters or strings, but in some cases python arrays are accepted,
and numbers may be used where appropriate.
The STILTS input format (<code>ifmt</code>, <code>istream</code>),
filter (<code>cmd</code>/<code>icmd</code>/<code>ocmd</code>)
and output mode (<code>omode</code>) parameters are not used however;
instead perform filtering directly on the table inputs and outputs
using the python <code>cmd_*</code> and <code>mode_*</code>
table methods or functions.
</p>

<p>Here is an example of concatenating two similar tables together
and writing the result:
<verbatim><![CDATA[
   >>> from stilts import tread, tcat
   >>> t1 = tread('data1.csv', fmt='csv')
   >>> t2 = tread('data2.csv', fmt='csv')
   >>> t12 = tcat([t1,t2], seqcol='seq')
   >>> t12.write('t12.csv', fmt='csv')
]]></verbatim>
</p>

<p>Note that for those tasks which have a parameter named "<code>in</code>"
in command-line STILTS, it has been renamed as "<code>in_</code>" for
the python version, to avoid a name clash with the python reserved word.
In most cases, the <code>in</code> parameter is the first, mandatory
parameter in any case, and so can be referenced by position as in the
previous example (we could have written "<code>tcat(in_=[t1,t2])</code>"
instead).
</p>

</subsect>

<subsect id="jyfuncs">
<subhead><title>Calculation Functions</title></subhead>

<p>The various functions from the expression language 
listed in <ref id="staticMethods"/> are available directly from JyStilts.
Each of the subsections in that section is a class in the <code>stilts</code>
module namespace, with unbound functions representing the functions.
</p>

<p>This means you can use them like this:
<verbatim><![CDATA[
    >>> import stilts
    >>> print stilts.Times.mjdToIso(54292)
    2007-07-11T00:00:00
]]></verbatim>
or like this:
<verbatim><![CDATA[
    >>> from stilts import CoordsDegrees
    >>> dist = CoordsDegrees.skyDistanceDegrees(ra1, dec1, ra2, dec2)
]]></verbatim>
</p>

</subsect>

</sect>


<sect id="io">
<subhead><title>Table I/O</title></subhead>

<p>Most of the tools in this package either read one or more tables as input, 
or write one or more tables as output, or both.
This section explains what kind of tables the tools can read and write,
and how you tell them where to find the tables to operate on.
</p>

<p>In most cases input and output table specifications are given
by parameters with the following names (or similar ones):
<dl>
<dt><code>in</code></dt>
<dd><p>Location of the input table</p></dd>
<dt><code>ifmt</code></dt>
<dd><p>Format of the input table</p></dd>
<dt><code>out</code></dt>
<dd><p>Location of the output table</p></dd>
<dt><code>ofmt</code></dt>
<dd><p>Format of the output table</p></dd>
</dl>
The values of these parameters are discussed in more detail below.
</p>

<subsect>
<subhead><title>Table Locations</title></subhead>

<p>The location of tables for input and output are usually given using
the <code>in</code> and <code>out</code> parameters respectively.
These are often, but not always, filenames.  The possibilities are these:
<dl>
<dt>Filename</dt>
<dd><p>Very often, you will simply specify a filename as location, and
    the tool will just read from/write to it in the usual way.
    </p></dd>

<dt>URL</dt>
<dd><p>Tables can be read from URLs directly, and in some cases written
    to them as well.  Some non-standard URL protocols are supported 
    as well as the usual ones.  The list is:
    <dl>
    <dt><code>http:</code></dt>
    <dd><p>Read from HTTP resources.</p></dd>
    <dt><code>ftp:</code></dt>
    <dd><p>Read from anonymous FTP resources.</p></dd>
    <dt><code>file:</code></dt>
    <dd><p>Read from local files; not particularly useful since you can
        do much the same using just the filename.</p></dd>
    <dt><code>jar:</code></dt>
    <dd><p>Specialised protocol for looking inside Java Archive files -
        see <webref url="&URL.J2SE_DOCS;api/java/net/JarURLConnection.html"
                    >JarURLConnection</webref> documentation.</p></dd>
    <dt><code>myspace:</code></dt>
    <dd><p>Accesses files in the AstroGrid "MySpace" virtual file store.
        These URLs look something like 
        "<code>myspace:/survey/iras_psc.xml</code>",
        and can access files in the myspace are that the user is currently
        logged into.
        These URLs can be used for both input and output of tables.
        To use them you must have an AstroGrid account and the AstroGrid
        WorkBench or similar must be running; if you're not currently
        logged in a dialogue will pop up to ask you for name and 
        password.</p></dd>
    <dt><code>ivo:</code></dt>
    <dd><p>Understands ivo-type URLs which signify files in the
        AstroGrid "MySpace" virtual file store.  
        These URLs look something like
        "<code>ivo://uk.ac.le.star/filemanager#node-2583</code>".
        These URLs can be used for both input and output of tables.
        To use them you must have an AstroGrid account and the AstroGrid
        WorkBench or similar must be running; if you're not currently
        logged in a dialogue will pop up to ask you for name and 
        password.</p></dd>
    <dt><code>jdbc:</code></dt>
    <dd><p>Used for communicating with SQL-compliant relational databases.
        These are a bit different to normal URLs -
        see section <ref id="jdbcConfig"/>.</p></dd>
    </dl>
    </p></dd>

<dt>Minus sign ("<code>-</code>")</dt>
<dd><p>The special location "-" (minus sign) indicates standard input 
    (for reading) or standard output (for writing).
    This allows you to use STILTS commands in a normal Unix pipeline.
    </p></dd>
</dl>
</p>

<p>In any of these cases, for input locations compression is taken care
of automatically.  That means that you can give the filename or URL
of a file which is compressed using <code>gzip</code>, <code>bzip2</code>
or Unix <code>compress</code> and the program will uncompress it on the fly.
</p>

</subsect>


<subsect>
<subhead><title>Table Formats</title></subhead>

<p>The generic table commands in STILTS 
(currently <ref id="tpipe"><code>tpipe</code></ref>,
           <ref id="tcopy"><code>tcopy</code></ref>,
           <ref id="tmulti"><code>tmulti</code></ref>,
           <ref id="tmultin"><code>tmultin</code></ref>,
           <ref id="tcat"><code>tcat</code></ref>,
           <ref id="tcatn"><code>tcatn</code></ref>,
           <ref id="tloop"><code>tloop</code></ref>,
           <ref id="tjoin"><code>tjoin</code></ref>,
           <ref id="tcube"><code>tcube</code></ref>,
           <ref id="tmatch1"><code>tmatch1</code></ref>,
           <ref id="tmatch2"><code>tmatch2</code></ref>,
           <ref id="tmatchn"><code>tmatchn</code></ref>,
           <ref id="tskymatch2"><code>tskymatch2</code></ref>,
           <ref id="pixfoot"><code>pixfoot</code></ref>,
           <ref id="pixsample"><code>pixsample</code></ref>,
           <ref id="plot2d"><code>plot2d</code></ref>,
           <ref id="plot3d"><code>plot3d</code></ref>,
           <ref id="plothist"><code>plothist</code></ref>,
           <ref id="coneskymatch"><code>coneskymatch</code></ref>,
           <ref id="sqlskymatch"><code>sqlskymatch</code></ref>,
           <ref id="tapquery"><code>tapquery</code></ref>,
           <ref id="tapresume"><code>tapresume</code></ref> and
           <ref id="regquery"><code>regquery</code></ref>)
have no native format for table storage, they can process
data in a number of formats equally well.  
STIL has its own model of what a table
consists of, which is basically:
<ul>
<li>Some per-table metadata (parameters)</li>
<li>A number of columns</li>
<li>Some per-column metadata</li>
<li>A number of rows, each containing one entry per column</li>
</ul>
Some table formats have better facilities for storing this sort of
thing than others, and when performing conversions STILTS does 
its best to translate between them, but it can't perform the
impossible: for instance there is nowhere in a Comma-Separated Values 
file to store descriptions of column units, 
so these will be lost when converting from VOTable to CSV formats.
</p>

<p>The formats the package knows about are dependent on the input and
output handlers currently installed.  The ones installed by default
are listed in the following subsections.  More may be added in the 
future, and it is possible to install new ones at runtime - see 
the <docxref doc="sun252">STIL documentation</docxref> for details.
</p>

<p>Some formats can be used to hold multiple tables in a single file,
and others can only hold a single table per file.
</p>

<subsubsect id="inFormats">
<subhead><title>Input Formats</title></subhead>

<p>Some of the tools in this package ask you to specify the format
of input tables using the <code>ifmt</code> parameter.
The following list gives the values usually allowed for this
(matching is case-insensitive):
<dl>

<dt><code>fits</code></dt>
<dd><p>FITS format - FITS binary or ASCII tables can be read.
    For commands which take a single input table, by default the 
    first table HDU in the file will used, but this can
    be altered for multi-extension FITS files by supplying
    an identifier after a '#' sign.
    The identifier can be either an HDU index or the extension name
    (EXTNAME header, possibly followed by "-" and the EXTVER header),
    so "table.fits#3" means the third HDU extension, and
    "table.fits#UV_DATA" means the HDU with the value "UV_DATA" for its
    EXTNAME header card.
    </p></dd>

<dt><code>colfits</code></dt>
<dd><p>Column-oriented FITS format.  This is where a table is stored as
    a BINTABLE extension which contains a single row, each cell of the
    row containing a whole column of the table it represents.
    This has different performance characteristics from normal FITS tables;
    in particular it may be considerably more efficient for very large, and
    especially very wide tables where not all of the columns are required
    at any one time.
    Only available for uncompressed files on disk.
    </p></dd>

<dt><code>votable</code></dt>
<dd><p>VOTable format - any legal version 1.0, 1.1, 1.2 or 1.3 format 
    VOTable documents, and many illegal ones, can be read.
    For commands which take a single input table, by default the first
    <code>TABLE</code> element in the document is used, but this can be
    altered by supplying the 0-based index after a '<code>#</code>' sign, 
    so "table.xml#4" means the fifth <code>TABLE</code> element in the document.
    </p></dd>

<dt><code>cdf</code></dt>
<dd><p>NASA Common Data Format.
    CDF is described at <webref url="http://cdf.gsfc.nasa.gov/"/>.
    </p></dd>

<dt><code>ascii</code></dt>
<dd><p>Plain text file with one row per column 
    in which columns are separated by whitespace.
    </p></dd>

<dt><code>csv</code></dt>
<dd><p>Comma-Separated Values format, 
    using approximately the conventions used by MS Excel.
    </p></dd>

<dt><code>tst</code></dt>
<dd><p>Tab-Separated Table format,
    as used by Starlink's GAIA and ESO's SkyCat amongst other tools.
    </p></dd>

<dt><code>ipac</code></dt>
<dd><p>IPAC Table Format.
    </p></dd>

<dt><code>wdc</code></dt>
<dd><p>World Datacentre Format (experimental).
    </p></dd>

</dl>
For more details on these formats, see the descriptions in 
<docxref doc="sun253" loc="inFormats"/>.
</p>

<p>In some cases (when using VOTable or FITS format tables) the 
tools can detect the table format automatically, and no explicit 
specification is necessary.  If this isn't the case and you omit
the format specification, the tool will fail with a suitable error
message.  It is always safe to specify the format explicitly;
this will be slightly more efficient,
and may lead to more helpful error messages in the case that the
table can't be read correctly.
</p>

</subsubsect>

<subsubsect id="outFormats">
<subhead><title>Output Formats</title></subhead>

<p>Some of the tools ask you to specify the format of output tables
using the <code>ofmt</code> parameter.
The following list gives the values usually allowed for this;
in some cases as you can see there are several variants of a given format.
You can abbreviate these names, and the first match in the list below
will be used, so for instance specifying <code>votable</code> is equivalent
to specifying <code>votable-tabledata</code> and <code>fits</code> 
is equivalent to <code>fits-plus</code>.
Matching is case-insensitive.

<dl>

<dt><code>fits-plus</code></dt>
<dd><p>FITS file; primary HDU contains a VOTable representation
    of the metadata, subsequent extensions contain one or more 
    FITS binary tables (behaves the same as <code>fits-basic</code>
    for most purposes)</p></dd>

<dt><code>fits-basic</code></dt>
<dd><p>FITS file; primary HDU is data-less, subsequent extensions
    contain a FITS binary table</p></dd>

<dt><code>colfits-plus</code></dt>
<dd><p>FITS file containing a BINTABLE with a single row; each cell of
    the row contains a whole column's worth of data.
    The primary HDU also contains a VOTable representation of the metadata.
    </p></dd>

<dt><code>colfits-basic</code></dt>
<dd><p>FITS file containing a BINTABLE with a single row; each cell of
    the row contains a whole column's worth of data.  The primary HDU
    contains nothing.
    </p></dd>

<dt><code>votable-tabledata</code></dt>
<dd><p>VOTable document with TABLEDATA (pure XML) encoding</p></dd>

<dt><code>votable-binary-inline</code></dt>
<dd><p>VOTable document with BINARY-encoded data inline within a 
    <code>STREAM</code> element.
    If VOTable 1.3 output is in force
    (see <code>votable.version</code> system property),
    <code>votable-binary2-inline</code> is provided instead.</p></dd>

<dt><code>votable-binary-href</code></dt>
<dd><p>VOTable document with BINARY-encoded data in a separate file
    (only if not writing to a stream).
    If VOTable 1.3 output is in force
    (see <code>votable.version</code> system property),
    <code>votable-binary2-href</code> is provided instead.</p></dd>

<dt><code>votable-fits-href</code></dt>
<dd><p>VOTable document with FITS-encoded data in a separate file
    (only if not writing to a stream)</p></dd>

<dt><code>votable-fits-inline</code></dt>
<dd><p>VOTable document with FITS-encoded data inline within a 
    <code>STREAM</code> element</p></dd>

<dt><code>ascii</code></dt>
<dd><p>Simple space-separated ASCII file format</p></dd>

<dt><code>text</code></dt>
<dd><p>Human-readable plain text (with headers and column boundaries marked
    out)</p></dd>

<dt><code>csv</code></dt>
<dd><p>Comma-Separated Value format.  
    The first line is a header which contains the column names.</p></dd>

<dt><code>csv-noheader</code></dt>
<dd><p>Comma-Separated Value format with no header line.</p></dd>

<dt><code>ipac</code></dt>
<dd><p>IPAC Table Format.</p></dd>

<dt><code>tst</code></dt>
<dd><p>Tab-Separated Table format.</p></dd>

<dt><code>html</code></dt>
<dd><p>Standalone HTML document containing a <code>TABLE</code> element</p></dd>

<dt><code>html-element</code></dt>
<dd><p>HTML <code>TABLE</code> element</p></dd>

<dt><code>latex</code></dt>
<dd><p>LaTeX <code>tabular</code> environment</p></dd>

<dt><code>latex-document</code></dt>
<dd><p>LaTeX standalone document containing a <code>tabular</code>
    environment</p></dd>
   
<dt><code>mirage</code></dt>
<dd><p>Mirage input format</p></dd>

</dl>
For more details on these formats, see the descriptions in 
<docxref doc="sun253" loc="outFormats"/>.
</p>

<p>In some cases the tools may guess what output format you want
by looking at the extension of the output filename you have specified.
</p>

</subsubsect>

</subsect>

</sect>


<sect id="pipes">
<subhead><title>Table Pipelines</title></subhead>

<p>Several of the tasks available in STILTS take one or more input tables,
do something or other with them, and produce one or more output tables.
This is a pretty obvious way to go about things, and in the most
straightforward case that's exactly what happens: you name one
or more input tables,
specify the processing parameters, and name an output table;
the task then reads the input tables from disk, does the processing
and writes the output table to disk.
</p>

<p>However, many of the tasks in STILTS allow you to do pre-processing
of the input tables before the main job, post-processing of the
output table after the main job, and to decide what happens to 
the final tabular result, without any intermediate storage of the data.  
Examples of the kind of pre-processing
you might want to do are to rearrange the columns so that they
have the right units for the main task, or replace 'magic' values
such as -999 with genuine blank values; the kind of post-processing
you might want to do is to sort the rows in the output table or
delete some of the columns you're not interested in.
As for the destination of the final table, you might want to 
write it to disk, but equally you might not want to store it anywhere,
but only be interested in counting the number of rows, or seeing
the minima/maxima of a few of the columns, or you might want to
send it straight to TOPCAT or some other table viewing application
for interactive analysis.
</p>

<p>Clearly, you could achieve the same effect by running multiple
applications: preprocess your 
original input tables to write intermediate files on disk, 
run the main processing application which reads those files
from disk and writes a new output file,
run another application to postprocess the output file and
write a new final output file,
and finally do something with this such as counting the rows in it
or viewing it in TOPCAT.
However, by doing it all within a single task instead,
no intermediate results have to be stored,
and the whole sequence can be very much more efficient.
You can think of this (if it helps) like a Unix pipeline, 
except what is being streamed from the start to the end of the
pipe is not bytes, but table metadata and data.
In most cases, the table data is streamed through the pipeline a
row at a time, meaning that the amount of memory required is small
(though in some cases, for instance row sorting and crossmatching, 
this is not possible).
</p>

<p>Tasks which allow this pre/post-processing, or "filtering",
have parameters with names like "<code>cmd</code>" which you
use to specify processing steps.
Tasks with multiple input tables
(<ref id="tmatch2"><code>tmatch2</code></ref>,
 <ref id="tskymatch2"><code>tskymatch2</code></ref>,
 <ref id="tcatn"><code>tcatn</code></ref>,
 <ref id="tjoin"><code>tjoin</code></ref>)
may have parameters named <code>icmd1</code>, <code>icmd2</code>, ...
for preprocessing the different input tables and
<code>ocmd</code> for postprocessing the output table.
<ref id="tpipe"><code>tpipe</code></ref> does nothing except
filtering, so there is no distinction between pre- and post-processing,
and its filter parameter is just named <code>cmd</code>.
<code>tpipe</code> additionally has a <code>script</code>
parameter which allows you to use a text file to write the
commands in, to prevent the command line getting too long.
In both cases there is a parameter named <code>omode</code>
which defines the "output mode", that is, what happens to the
post-processed output table that comes out of the end of the pipeline.
</p>

<p><ref id="filterSteps"/> lists the processing steps available,
and explains how to use them,
<ref id="col-id"/> and <ref id="colid-list"/> describe the syntax
used in some of these filter commands for specifying columns,
and <ref id="outModes"/> describes the available output modes.
See the examples in the
<ref id="cmdUsage">command reference</ref>,
and particularly the
<ref id="tpipeExamples" plaintextref="yes"><code>tpipe</code> examples</ref>,
for some examples putting all this together.
</p>

<subsect id="filterSteps">
<subhead><title>Processing Filters</title></subhead>

<p>This section lists the filter commands which can be used for 
table pipeline processing, in conjunction with <code>cmd</code>-
or <code>script</code>-type parameters.
</p>

<p>You can string as many of these together as you like.
On the command line, you can repeat the <code>cmd</code>
(or <code>icmd1</code>, or <code>ocmd</code>...) parameter 
multiple times, or use one <code>cmd</code> parameter and
separate different filter specifiers with semicolons ("<code>;</code>").
The effect is the same.
</p>

<p>It's important to note that each command in the sequence of
processing steps acts on the table at that point in the sequence.
Thus either of the two identical invocations:
<verbatim>
   stilts tpipe cmd='delcols 1; delcols 1; delcols 1'
   stilts tpipe cmd='delcols 1' cmd='delcols 1' cmd='delcols 1'
</verbatim>
has the same effect as
<verbatim>
   stilts tpipe cmd='delcols "1 2 3"'
</verbatim>
since in the first case the columns are shifted left after
each one is deleted, so the table seen by each step has one fewer
column than the one before.
Note also the use of quotes in the latter of the examples above,
which is necessary so that the <code>&lt;colid-list&gt;</code>
of the <code>delcols</code> command is interpreted as one argument not
three separate words.
</p>

<p>The available filters are described in the following subsections.
</p>

&filter-docs;

</subsect>

<subsect id="col-id">
<subhead><title>Specifying a Single Column</title></subhead>

<p>If an argument is specified in the help text for a 
command with the symbol <code>&lt;col-id&gt;</code>
it means you must give a string which identifies one of the
existing columns in a table.
</p>

<p>There are three ways you can specify a column in this context:
<dl>
<dt>Column Name</dt>
<dd><p>The name of the column may be used if it contains no spaces
    and doesn't start with a minus character ('<code>-</code>').
    It is usually matched case insensitively.  If multiple columns
    have the same name, the first one that matches is selected.
    </p></dd>

<dt>Column Index or &column.id.char;ID</dt>
<dd><p>The index of the column may always be used; this is a useful
    fallback if the column name isn't suitable for some reason.
    The first column is '1', the second is '2' and so on.
    You may alternatively use the forms 
    '&column.id.char;1', '&column.id.char;2' etc.
    </p>
    <p>Tip: if counting which column has which index is giving you a
    headache, running <code>tpipe</code> with <code>omode=meta</code> or 
    <code>omode=stats</code> on the table may help.
    </p></dd>

<dt>Column &ucd.prefix; specifier</dt>
<dd><p>If the column has a
    <webref url="http://www.ivoa.net/Documents/latest/UCD.html"
            >Unified Content Descriptor</webref>
    (this will usually only be the case for VOTable or possibly FITS format
    tables) you can refer to it using an identifier of the form
    "<code>&ucd.prefix;&lt;ucd-spec&gt;</code>".  Depending on the version of
    UCD scheme used, UCDs can contain various punctuation marks such
    as underscores, semicolons and dots; for the purpose of this syntax
    these should all be represented as underscores ("<code>_</code>").
    So to identify a column which has the UCD "<code>phot.mag;em.opt.R</code>",
    you should use the identifier "<code>&ucd.prefix;phot_mag_em_opt_r</code>".
    Matching is not case-sensitive.  Futhermore, a trailing underscore
    acts as a wildcard, so that the above column could also be referenced
    using the identifier "<code>&ucd.prefix;phot_mag_</code>".  If multiple 
    columns have UCDs which match the given identifer, the first one
    will be used.
    </p></dd>

<dt>Column &utype.prefix; specifier</dt>
<dd><p>If the column has a <label>Utype</label>
    (this will usually only be the case for VOTable or possibly FITS format
    tables) you can refer to it using an identifier of the form
    "<code>&utype.prefix;&lt;utype-spec&gt;</code>".
    Utypes may contain various punctuation marks such as colons and dots;
    for the purpose of this syntax these should all be represented as
    underscores ("<code>_</code>").
    So to identify a column which has the Utype 
    "<code>ssa:Access.Format</code>",
    you should use the identifier 
    "<code>&utype.prefix;ssa_Access_format</code>".
    Matching is not case-sensitive.
    If multiple columns have Utypes which match the given identifier,
    the first one will be used.
    </p></dd>
</dl>
</p>

</subsect>

<subsect id="colid-list">
<subhead><title>Specifying a List of Columns</title></subhead>

<p>If an argument is specified in the help text for a command
with the symbol <code>&lt;colid-list&gt;</code> it means you 
must give a string which identifies a list of zero, one or more
of the existing columns in a table.
The string you specify is a separated into separate tokens by
whitespace, which means that you will normally 
have to surround it in single or double quotes to ensure
that it is treated as a single argument and not several of them.
</p>

<p>Each token in the <code>&lt;colid-list&gt;</code> string may be one of
the following:
<dl>
<dt>Column Name</dt>
<dd><p>The name of a column may be used if it contains no spaces
    and doesn't start with a minus character ('<code>-</code>').
    It is usually matched case insensitively.  If multiple 
    columns have the same name, the first one that matches is selected.
    </p></dd>

<dt>Column Index or &column.id.char;ID</dt>
<dd><p>The index of the column may always be used; this is a useful
    fallback if the column name isn't suitable for some reason.
    The first column is '1', the second is '2' and so on.
    You may alternatively use the forms 
    '&column.id.char;1', '&column.id.char;2' etc.
    </p>
    <p>Tip: if counting which column has which index is giving you a
    headache, running <code>tpipe</code> with <code>omode=meta</code> or 
    <code>omode=stats</code> on the table may help.
    </p></dd>

<dt>Wildcard Expression</dt>
<dd><p>You can use a simple form of wildcard expression which expands
    to any columns in the table whose names match the pattern.
    Currently, the only special character is an asterisk '<code>*</code>'
    which matches any sequence of characters.  To match an unknown
    sequence at the start or end of the string an asterisk must be
    given explicitly.  Other than that, matching is usually 
    case insensitive.  The order of the expanded list is the same
    as the order in which the columns appear in the table.
    </p>

    <p>Thus "<code>col*</code>" will match columns named 
    <code>col1</code>, <code>Column2</code> and <code>COL_1024</code>,
    but not <code>decOld</code>.
    "<code>*MAG*</code>" will match columns named
    <code>magnitude</code>, <code>ABS_MAG_U</code> and <code>JMAG</code>.
    "<code>*</code>" on its own 
    expands to a list of all the columns of the table in order.
    </p></dd>
</dl>
</p>

<p>Specifying a list which contains a given column more than once is
not usually an error, but what effect it has depends on the 
function you are executing.
</p>

</subsect>

<subsect id="outModes">
<subhead><title>Output Modes</title></subhead>

<p>This section lists the output modes which can be used as
the value of the <code>omode</code> parameter of 
<code><ref id="tpipe">tpipe</ref></code> and other commands.
Typically, having produced a result table by pipeline processing 
an input one, you will write it out by specifying 
<code>omode=out</code> (or not using the <code>omode</code> parameter at all -
<code>out</code> is the default).  However, you can do other things
such as calculate statistics, display metadata, etc.  In some of
these cases, additional parameters are required.  The different 
output modes, with their associated parameters, are described in
the following subsections.
</p>

&mode-docs;

</subsect>


</sect>


<sect id="match">
<subhead><title>Crossmatching</title></subhead>

<p>STILTS offers flexible and efficient facilities for crossmatching tables.
Crossmatching is identifying different rows, which may be in the
same or different tables, that refer to the same item.
In an astronomical context such an item is usually, 
though not necessarily, an astronomical source or object.
This operation corresponds to what in database terminology 
is called a <em>join</em>.
</p>

<p>There are various complexities to specifying such a match.
In the first place you have to define what is the condition that
must be satisfied for two rows to be considered matching.
In the second place you must decide what happens if, for a given row,
more than one match can be found.  Finally, you have to decide what
to do having worked out what the matched rows are; the result will
generally be presented as a new output table, but there are various
choices about what columns and rows it will consist of.
Some of these issues are discussed in this section, and others
in the reference sections on the tools themselves in <ref id="cmdUsage"/>.
</p>

<p>Matching can in general be a computationally intensive process.
The algorithm used by the <code>tmatch*</code> tasks in STILTS, 
except in pathological cases, scales as <m>O(N log(N))</m> or thereabouts,
where <m>N</m> is the total number of rows in all the tables being matched.
No preparation (such as sorting) is required on the tables prior to
invoking the matching operation.
It is reasonably fast; for instance an RA, Dec positional match
of two 10<sup>5</sup>-row catalogues takes of the order of 60 seconds
on current (2005 laptop) hardware.  Attempting matches with large tables can 
lead to running out of memory; the calculation just mentioned required a
java heap size of around 200Mb (<code>-Xmx200M</code>).
<!--
   stilts -Xmx200M tmatch2 \
      in1=2dfgrs_ngp.fits \
      in2=2dfgrs_spectro.fits \
      icmd1='addskycoords -inunit rad -outunit deg fk5 fk5 \
                          RA2000 DEC2000 RA DEC' \
      icmd2='addskycoords -inunit rad -outunit deg fk5 fk5 \
                          RA2000 DEC2000 RA DEC' \
      matcher=sky params=3 values1='RA DEC' values2='RA DEC' \
      join=1and2 find=best \
      ocmd='addcol RA_DIFF ra_1-ra_2; addcol DEC_DIFF dec_1-dec_2' \
      omode=stats
 -->
</p>

<p>In the current release of STILTS the following tasks are provided
for crossmatching between local tables:
<dl>
<dt><ref id="tmatch2"><code>tmatch2</code></ref></dt>
<dd><p>Generic crossmatching between two tables.
    </p></dd>

<dt><ref id="tskymatch2"><code>tskymatch2</code></ref></dt>
<dd><p>Crossmatching between two tables where the matching criterion is
    a fixed separation on the sky.  This is simply a stripped-down 
    version of <code>tmatch2</code> provided for convenience when the
    full generality is not required.
    </p></dd>

<dt><ref id="tmatch1"><code>tmatch1</code></ref></dt>
<dd><p>Generic crossmatching internal to a single table.
    The basic task this performs is to identify groups of rows within a
    single table which match each other. 
    </p></dd>

<dt><ref id="tmatchn"><code>tmatchn</code></ref></dt>
<dd><p>Generic crossmatching between multiple (&gt;2) tables.
    </p></dd>

<dt><ref id="tjoin"><code>tjoin</code></ref></dt>
<dd><p>Trivial join operation between multiple tables in which no row
    re-ordering is required.  This barely warrants the term "crossmatch"
    and the concepts explained in the rest of this section are not
    relevant to it.
    </p></dd>
</dl>
</p>

<subsect id="MatchEngine">
<subhead><title>Match Criteria</title></subhead>

<p>Determining whether one row represents the same item as another
is done by comparing the values in certain of their columns to see
if they are the same or similar.
The most common astronomical case is to say that two rows match if
their celestial coordinates (right ascension and declination) are
within a given small radius of each other on the sky.
There are other possibilities; for instance the coordinates to compare
may be in a Cartesian space, or have a higher (or lower) dimensionality
than two, or the match may be exact rather than within an error radius....
</p>

<p>If you just need to match two tables according to sky position
with fixed errors you are recommended to use the simplified
<ref id="tskymatch2"><code>tskymatch2</code></ref> task.
For other cases, this section describes how to specify much more
flexible match criteria for use with
<code>tmatch1</code>, <code>tmatch2</code> or <code>tmatchn</code>
by setting the following parameters:
<dl>
<dt><code>matcher</code></dt>
<dd><p>Name of the match criteria type.
    </p></dd>
<dt><code>params</code></dt>
    <dd><p>Fixed value(s) giving the parameters of the match 
    (typically an error radius).  If more than one value is required,
    the values should be separated by spaces.
    </p></dd>
<dt><code>values*</code></dt>
    <dd><p>Expressions to be compared between rows.  This will typically
    contain the names of one or more columns, but each element may be
    an algebraic expression (see <ref id="jel"/>) rather than just a 
    column name if required.
    If more than one value is required, the values should be separated
    by spaces.
    There is one of these parameters for each table taking part in the 
    match, so for <code>tmatch2</code> you must specify both 
    <code>values1</code> and <code>values2</code>.
    </p></dd>
<dt><code>tuning</code></dt>
    <dd><p>Fixed value(s) supplying tuning parameters for the match
    algorithm.  If there is more than one value, they should be
    separated by spaces.
    This value will have a sensible default, so you do not
    need to supply it, but providing adjusted values may make your match
    run faster or require less memory (or the reverse).
    Adjusting tuning parameters will not change the result of any match,
    only the resources required to run it.
    Looking at the progress output of a match will indicate what 
    tuning values have been used; adjusting the value a bit up or down
    is a good way to experiment.
    </p></dd>
</dl>
</p>

<p>For example, suppose we wish to locate objects in two tables which are
within 3 arcseconds of each other on the sky.  One table has columns
RA and DEC which give coordinates in degrees, and the other has columns
RArad and DECrad which give coordinates in radians.  These are the
arguments which would be used to tell <code>tmatch2</code> what the match
criteria are:
<verbatim>
   matcher=sky
   params=3
   values1='RA DEC'
   values2='radiansToDegrees(RArad) radiansToDegrees(DECrad)'
</verbatim>
It is clearly important that corresponding values are comparable
(in the same units) between the tables being matched,
and in geometrically sensitive cases such as matching
on the sky, it's important that they are the units expected by the
matcher as well.  To determine what those units are, either consult
the roster below, or run the following command:
<verbatim>
   stilts tmatch2 help=matcher
</verbatim>
which will tell you about all the known matchers and their associated
<code>params</code>, <code>values*</code> and <code>tuning</code> parameters.
</p>

<p>The following subsections list the basic <code>matcher</code> types and the
requirements of their associated <code>params</code>,
<code>values*</code> and <code>tuning</code> parameters.
The units of the required values are given where significant.
</p>

<subsubsect id="SkyMatchEngine">
<subhead><title><code>sky</code>: Sky Matching</title></subhead>

<p>&matcher-sky-usage;</p>

<p>The <code>sky</code> matcher compares positions on the celestial sphere
with a fixed error radius.
Rows are considered to match when the two (<code>ra</code>, <code>dec</code>)
positions are within <code>max-error</code> arcseconds of each other
along a great circle.
</p>

<p>In fact this matching is not restricted to equatorial coordinates - 
the <code>ra</code> and <code>dec</code> parameters may represent
any longitude-like and latitude-like coordinates in degrees, 
since the spherical geometry for the matching is unchanged under 
such transformations.
</p>

</subsubsect>

<subsubsect id="SkyMatchEngine-err">
<subhead><title><code>skyerr</code>:
         Sky Matching with Per-Object Errors</title></subhead>

<p>&matcher-skyerr-usage;</p>

<p>The <code>skyerr</code> matcher compares positions on the celestial 
sphere using error radii which can be different for each row.
Rows are considered to match when the separation between the
two <code>ra</code>, <code>dec</code> positions is no larger than 
the sum of the two per-row <code>error</code> values.
</p>

<p>The <code>scale</code> parameter should be a rough average value
of the error distances.  It is used only to set a sensible default for 
<code>healpix-k</code> tuning parameter, and its value does not affect
the result.  If you set <code>healpix-k</code> directly, its value is ignored.
</p>

<p>As with <ref id="SkyMatchEngine"><code>sky</code></ref> matching,
other longitude/latitude coordinate pairs may be used in place of
right ascension and declination.
</p>

<p><strong>Note:</strong> the semantics of this matcher have changed
slightly at version 2.4 of STILTS.
In earlier versions the single parameter was named <code>max-error</code>
and provided an additional constraint on the maximum accepted separation
between matched objects.  For most uses, the old and new behaviours are
expected to give the same results, but in cases of difference, the new
behaviour is more likely what you want.
</p>

</subsubsect>

<subsubsect id="EllipseSkyMatchEngine">
<subhead><title><code>skyellipse</code>:
                Sky Matching of Elliptical Regions</title></subhead>

<p>&matcher-skyellipse-usage;</p>

<p>The <code>skyellipse</code> matcher compares elliptical regions
on the sky for overlap.  Each row has to provide five values,
giving the centre, the major and minor radii, and the position angle
of an ellipse.
Rows are considered to match if there is any overlap between the ellipses.
The goodness of match is a normalised generalisation of the symmetrical case
used by the <code>skyerr</code> matcher, in which the best possible match
is two concentric ellipses, and the worst allowable match is when the
circumferences just touch.
</p>

<p>The calculations are approximate since in some cases they rely on
projecting the ellipses onto a Cartesian tangent plane before evaluating
the match, so for larger ellipses the criterion will be less exact.
For objects the size of most observed stars or galaxies,
this approximation is not expected to be problematic.
</p>

<p>The <code>scale</code> parameter must be supplied, and should be
a rough average value of the major radii.  it is used only to set
a sensible default for the <code>healpix-k</code> tuning parameter,
and its value does not affect the result.
If you set <code>healpix-k</code> directly,
the value of <code>scale</code> is ignored.
</p>

</subsubsect>

<subsubsect id="SphericalPolarMatchEngine">
<subhead><title><code>sky3d</code>: Spherical Polar Matching</title></subhead>

<p>&matcher-sky3d-usage;</p>

<p>The <code>sky3d</code> matcher compares positions in the volume of 
the sky taking account of distance from the observer.
The position in three-dimensional space is calculated for each 
row using the <code>ra</code>, <code>dec</code> and <code>distance</code>
as spherical polar coordinates, where <code>distance</code> is the
distance from the observer along the line of sight.
Rows are considered to match when their positions in this space are
within <code>error</code> units of each other.
The units of <code>error</code> are the same as those of 
<code>distance</code>.
</p>

<p>As with <ref id="SkyMatchEngine"><code>sky</code></ref> matching,
other longitude/latitude coordinate pairs may be used in place of
right ascension and declination.
</p>

</subsubsect>

<subsubsect id="EqualsMatchEngine">
<subhead><title><code>exact</code>: Exact Matching</title></subhead>

<p>&matcher-exact-usage;</p>

<p>The <code>exact</code> matcher compares arbitrary key values 
for exact equality.
Rows are considered to match only if the values in their 
<code>matched-value</code> columns are exactly the same.
These values can be strings, numbers, or anything else.
A blank value never matches, not even with another blank one.
Since the <code>params</code> parameter holds no values, 
it does not have to be specified.
Note that the values must also be of the same type, so for instance
a Long (64-bit) integer value will not match an Integer (32-bit) value.
</p>

</subsubsect>

<subsubsect id="IsotropicCartesianMatchEngine">
<subhead><title><code>1d</code>, <code>2d</code>, ...:
         Isotropic Cartesian Matching</title></subhead>

<p>&matcher-1d-usage;</p>

<p>&matcher-2d-usage;</p>

<p>The <code>1d</code> matcher compares positions in 1-dimensional 
Cartesian space.
Rows are considered to match if their <code>x</code> column
values differ by no more than <code>error</code>.
</p>

<p>The <code>2d</code> matcher compares postions in 2-dimensional
Cartesian space.
Rows are considered to match if the difference in their 
(<code>x</code>,<code>y</code>) positions reckoned using
Pythagoras is less than <code>error</code>.
</p>

<p>Matching in any number of Cartesian dimensions can be done by
extending this syntax in the obvious way.
</p>

</subsubsect>

<subsubsect id="AnisotropicCartesianMatchEngine">
<subhead><title><code>2d_anisotropic</code>, ...:
         Anisotropic Cartesian Matching</title></subhead>

<p>&matcher-2d_anis-usage;</p>

<p>The <code>2d_anisotropic</code> matcher compares positions in 
2-dimensional Cartesian space using an anisotropic metric.
Rows are considered to match if their (<code>x</code>,<code>y</code>)
positions fall within an error ellipse with axis lengths 
<code>error-in-x</code>, <code>error-in-y</code> of each other.
This kind of match will typically be used for non-'spatial' spaces,
for instance (magnitude,redshift) space, in which the metrics along
different axes are not related to each other.
</p>

<p>Matching in any number of dimensions of Cartesian space using an
anisotropic metric can be done by extending this syntax in the obvious way.
</p>

</subsubsect>

<subsubsect id="ErrorCartesianMatchEngine">
<subhead><title><code>1d_err</code>, <code>2d_err</code>, ...:
         Cartesian Matching with Per-Object Errors</title></subhead>

<p>&matcher-2d_err-usage;</p>

<p>The <code>1d_err</code>, <code>2d_err</code>, ... matchers compare
positions in N-dimensional Cartesian space like the
<code>1d</code>, <code>2d</code> matchers described in
<ref id="IsotropicCartesianMatchEngine"/>,
except that the match radius can be different for each row.
Rows are considered to match when the separation reckoned by
Pythagoras between the <code>x</code>, <code>y</code>, ... positions 
is no larger than the sum of the two per-row <code>error</code> values.
Matching in any number of Cartesian dimensions can be done by extending
this syntax in the obvious way.
</p>

<p>The <code>scale</code> parameter must be supplied, and should be 
approximately the characteristic size of the per-object error values.
In conjunction with the <code>bin-factor</code> tuning parameter
its value affects the performance of the match, but not the result.
</p>

</subsubsect>

<subsubsect id="EllipseCartesianMatchEngine">
<subhead><title><code>2d_ellipse</code>:
         Cartesian Matching of Elliptical Regions</title></subhead>

<p>&matcher-2d_ellipse-usage;</p>

<p>The <code>2d_ellipse</code> matcher compares elliptical regions
in a 2d plane for overlap.  Each row has to specify five values,
giving the centre, the major and minor radii, and the orientation angle
of an ellipse.
Rows are considered to match if there is any overlap between the ellipses.
The goodness of match is a normalised generalisation of the symmetrical case
used by the isotropic matcher, in which the best possible match is 
two concentric ellipses, and the worst allowable match is when 
the circumferences just touch.
</p>

<p>Note the orientation angle is measured anticlockwise from the horizontal,
unlike the position angle used by the 
<ref id="EllipseSkyMatchEngine"><code>skyellipse</code></ref> matcher.
</p>

<p>The <code>scale</code> parameter must be supplied, and should be 
approximately the characteristic size of the per-object major radius.
In conjunction with the <code>bin-factor</code> tuning parameter
its value affects the performance of the match, but not the result.
</p>

</subsubsect>

<subsubsect>
<subhead><title>Custom Matchers</title></subhead>

<p>For advanced users, it is possible to supply the name of a class
on the classpath which implements the 
<code>uk.ac.starlink.table.join.MatchEngine</code> interface
and which has a no-arg constructor.
This allows java programmers to write their own matchers using any
match criteria and binning algorithms they choose.
</p>

</subsubsect>

<subsubsect id="CombinedMatchEngine">
<subhead><title>Matcher Combinations</title></subhead>

<p>In addition to the matching criteria listed in the previous subsections, 
you can build your own by combining any of these.  
To do this, take the two (or more)
matchers that you want to use, and separate their names with a
"<code>+</code>" character.  The <code>values*</code> parameters
of the combined matcher should then hold the concatenation of the
<code>values*</code> entries of the constituent matchers, and the
same for the <code>params</code> parameter.
</p>

<p>So for instance the matcher "<code>sky+1d</code>" could be used
with the following syntax:

&matcher-sky.1d-usage;

This would compare positions on the sky with an additional scalar constraint.
Rows are considered to match if <em>both</em>
their <code>ra</code>, <code>dec</code> positions are within
<code>max-error</code> arcseconds of each other along a great circle
(as for <code>matcher=sky</code>) 
<em>and</em>
their <code>x</code> values differ by no more than <code>error</code>
(as for <code>matcher=1d</code>).
</p>

<p>This example might be used for instance to identify objects from two
catalogues which are within a couple of arcseconds and also 0.5
blue magnitudes of each other.
Rolling your own matchers in this way can give you very flexible match
constraints.
</p>

</subsubsect>

</subsect>

<subsect id="matchGroup">
<subhead><title>Multi-Object Matches</title></subhead>

<p>The generic matching in STILTS is determined by specified 
match criteria, as described in <ref id="MatchEngine"/>.
These criteria give conditions for whether two items (table rows)
count as matched with each other.  In the case of a pair match,
as provided by <ref id="tmatch2"><code>tmatch2</code></ref>,
it is clear how this is to be interpreted.
</p>

<p>However, some of the matching tasks 
(<ref id="tmatchn"><code>tmatchn</code></ref> in group mode and
 <ref id="tmatch1"><code>tmatch1</code></ref>)
search for match groups which may have more than two members.
This section explains precisely how STILTS applies the pair-wise
matching criteria it is given to identifying multi-object groups.
</p>

<p>In a multi-object match context, the matcher identifies a matched
group as the largest possible group of objects in which each is 
linked by a pair match to <em>any</em> other object in the group -
it is a group of "friends of friends".
Formally, the set of matched groups is a set of disjoint graphs whose nodes
are input table rows and whose edges are successful pair matches,
where no successful pair match exists between nodes in 
different elements of that set.
Thus the set has a minimal number of elements, and each of its elements
is a matched group of maximal size.
The important point to note
is that for any particular pair in a matched group,
there is no guarantee that the two objects match each other,
only that you can hop from one to the other via pairs which do match.
</p>

<p>So in the case of a multi-object sky match
on a field which is very crowded compared to the specified error radius,
it is quite possible for <em>all</em> the objects in the input table(s) 
to end up as part of the same large matching group.  
Results at or near this percolation threshold are
(a) probably not useful and
(b) likely to take a long time to run. 
Some care should therefore be exercised when specifying match criteria
in multi-object match contexts.
</p>

</subsect>

</sect>

<sect id="plot">
<subhead><title>Plotting</title></subhead>

<p>As of Version 2.0 (October 2008), STILTS offers table plotting commands.
These acquire a data point from each line of one or more input tables,
perhaps influenced by the pipelining operations described in <ref id="pipes"/>,
and generate some kind of graphical plot from the result.
At time of writing, the following plot types are available:
<ul>
<li><ref id="plot2d"><code>plot2d</code></ref>: &plot2d-purpose;</li>
<li><ref id="plot3d"><code>plot3d</code></ref>: &plot3d-purpose;</li>
<li><ref id="plothist"><code>plothist</code></ref>: &plothist-purpose;</li>
</ul>
but see also <ref id="tcube"><code>tcube</code></ref> for generating
N-dimensional histograms as FITS files.
It is hoped to add more plot types in future releases.
</p>

<p>The plotting commands offer considerable control over what is plotted
and how it is represented, and thus unavoidably have rather a large
number of parameters.  When looking at the command documentation in
<ref id="cmdUsage"/>
the <ref id="plot2d-usage">Usage</ref> sections may look rather daunting.
However, the discussion below and the 
<ref id="plot2d-examples">Examples</ref> sections should help.
Generating a simple plot is straightforward and can be done with only
three or four parameters; if you have more complicated
requirements for data selection or specific preferences for
appearance then you can consult the documentation for the additional options.
</p>

<p>As a simple example, 
if a file "cat.fits" contains the columns RMAG and BMAG for red and 
blue magnitudes,
you can draw a two-dimensional colour-magnitude scatter plot with
the command:
<verbatim>
   stilts plot2d in=cat.fits xdata=RMAG ydata=BMAG-RMAG
</verbatim>
Since an output file is not specified, the plot is shown on the screen for
convenience.  To send the output to a PNG file, do instead:
<verbatim>
   stilts plot2d in=cat.fits xdata=RMAG ydata=BMAG out=plot.png ofmt=png
</verbatim>
in some cases (including the above), the <code>ofmt</code> parameter is not
required since STILTS may be able to guess the format from the output
file name.
Various other options for output and graphics formats are described in 
<ref id="paintMode"/> and <ref id="graphicExporter"/>
</p>

<p>Some of the parameters use suffixes to define data sets and 
therefore behave a bit differently
from the parameters elsewhere in STILTS - a discussion of these
is given in <ref id="plotSuffixes">the following subsection</ref>.
Some other plotting-specific topics are also discussed below.
</p>

<subsect id="plotSuffixes">
<subhead><title>Parameter Suffixes</title></subhead>

<p>Some of the parameters for the plotting tasks behave a little bit
differently to other parameters in STILTS, in order to accommodate
related sets of values.  If you look at the usage of one of the 
plotting commands, for instance in <ref id="plot2d-usage"/>,
you will see that a number of the parameters have the 
suffixes "<code>N</code>" or "<code>NS</code>".
These suffixes can be substituted with any convenient string to identify 
parameters which relate to the same input datasets or subsets.
Specifically:
<dl>
<dt>Suffix "<code>N</code>":</dt>
<dd><p>Denotes an input dataset.  At least the <code>inN</code> parameter
    must be given to identify the source of the data; any other parameters
    with the same value of the <code>N</code> suffix relate to that dataset.
    A <em>dataset</em> here refers to a particular set of plot data from a
    table; in most cases each input table corresponds to a different dataset,
    though two datasets may correspond to different sets of columns from
    the same table.
    </p></dd>
<dt>Suffix "<code>NS</code>":</dt>
<dd><p>Denotes a particular subset of the rows in dataset <code>N</code>.
    At least the <code>subsetNS</code> parameter must be given to 
    identify the expression by which the subset is defined;
    any other parameters with the same value of the <code>NS</code> suffix
    relate to that subset.
    </p></dd>
</dl>
</p>

<p>Some examples will help to illustrate.
The following will generate a Cartesian plot of catalogue position
from a single dataset:
<verbatim>
   stilts plot2d in=gals.fits xdata=RA ydata=DEC
</verbatim>
In this case the <code>N</code> suffix is present on each of the parameters
<code>in</code>, <code>xdata</code> and <code>ydata</code>, but is
equal to the empty string, hence invisible.  This is perfectly legal,
and convenient when only a single table is in use.
If we wish to overplot two datasets however, the dataset suffixes 
(or one of them at least) have to be made explicit so that different ones 
can be used, for instance:
<verbatim>
   stilts plot2d in1=gals.fits  xdata1=RA      ydata1=DEC
                 in2=stars.fits xdata2=RAJ2000 ydata2=DEJ2000
</verbatim>
The suffix values "<code>1</code>" and "<code>2</code>" are quite arbitrary
and can be chosen as convenient, so the following would do exactly the
same as the previous example:
<verbatim>
   stilts plot2d in_GAL=gals.fits   xdata_GAL=RA       ydata_GAL=DEC
                 in_STAR=stars.fits xdata_STAR=RAJ2000 ydata_STAR=DEJ2000
</verbatim>
The other parameters which have the <code>N</code> suffix apply only
to the matching dataset, so for instance the following:
<verbatim>
   stilts plot2d in1=gals.fits  xdata1=RA      ydata1=DEC     txtlabel1=NGC_ID
                 in2=stars.fits xdata2=RAJ2000 ydata2=DEJ2000
</verbatim>
would draw text labels adjacent to the points from only the gals.fits file
giving the contents of its NGC_ID column.
</p>

<p>The <code>NS</code> suffix identifies distinct <em>row subsets</em> 
within the same or different datasets.  A subset is defined by supplying
a boolean inclusion expression (each row is included only if the
expression evaluates true for that row) as the value of a 
<code>subsetNS</code> parameter.
If, as in all the examples we have seen so far, 
no <code>subsetNS</code> parameter is supplied for a given dataset,
then it is treated as a special case, as if a single subset with a name
equal to the empty string (<code>S=""</code>) 
containing all rows has been specified.  
So our earlier simple example:
<verbatim>
   stilts plot2d in=gals.fits xdata=RA ydata=DEC
</verbatim>
is equivalent to
<verbatim>
   stilts plot2d in=gals.fits xdata=RA ydata=DEC subset=true
</verbatim>
If we wish to split the plotted points into two sets based on their 
R-B colours, we can write something like:
<verbatim>
   stilts plot2d in=gals.fits xdata=RA ydata=DEC
                 subsetX='RMAG-BMAG&gt;0' subsetY='RMAG-BMAG&lt;=0'
</verbatim>
This will generate a plot with two subsets shown using different colours
and/or plotting symbols.  These colours and symbols
are selected automatically.  More control over the appearance can be
exercised by setting values for some of the other parameters with
<code>NS</code> suffixes, for instance
<verbatim>
   stilts plot2d in=gals.fits xdata=RA ydata=DEC
                              subset_A='RMAG-BMAG&gt;0'  colour_A=blue
                              subset_B='RMAG-BMAG&lt;=0' colour_B=red
</verbatim>
Again, the suffix strings can be chosen to have any value as convenient.
</p>

<p>The dataset- and subset-specific parameters must be put
together if there are multiple datasets with multiple subsets to plot
simultaneously, for instance:
<verbatim>
   stilts plot2d in_1=gals.fits  xdata_1=RA ydata_1=DEC
                                 subset_1_A='RMAG-BMAG&gt;0'  colour_1_A=blue
                                 subset_1_B='RMAG-BMAG&lt;=0' colour_1_B=red
                 in_2=stars.fits xdata_2=RAJ2000 ydata_2=DEJ2000
                                 colour_2=green
</verbatim>
</p>

<p>Finally, it's not quite true that the suffixes chosen have no effect
on the plot; they may influence the order in which sets are plotted.
Markers drawn for sets plotted earlier may be obscured by the markers
drawn for sets plotted later, so this can affect the appearance of the plot.
If you want to control this, use the <code>sequence</code> parameter.
For instance, to ensure that star data appears on top of galaxy data 
in the plot, do the following:
<verbatim>
   stilts plot2d in_GAL=gals.fits   xdata_GAL=RA       ydata_GAL=DEC
                 in_STAR=stars.fits xdata_STAR=RAJ2000 ydata_STAR=DEJ2000
                 sequence=_GAL,_STAR
</verbatim>
</p>

<p>More examples can be found in the <label>Examples</label>
subsections of the individual plotting command descriptions in
<ref id="cmdUsage"/>.
</p>

</subsect>


<subsect id="paintMode">
<subhead><title>Output Modes</title></subhead>

<p>The plots generated by the plotting commands can be used in various
different ways.  One thing you might want to do is to write the
output to a file in a given graphics format 
(<ref id="paintmode-out"><code>out</code></ref>);
another is to preview it directly on the screen
(<ref id="paintmode-swing"><code>swing</code></ref>).
By default one or other of these will happen depending on whether you
specify an output file.  However there are other possibilities;
these are listed in the following subsections.
</p>

<p>Except for display to the screen, these modes should work happily
on a headless machine (one with no graphics display, as may be the case
for a web server).
When running headless, you may find it necessary to 
set the java system property
"<code>java.awt.headless</code>" to <code>true</code>
- see <ref id="sysProperties"/>.
</p>

<p>The default output mode is <ref id="paintmode-auto"><code>auto</code></ref>,
which means that output is to a file if an output file is specified,
or to the screen if it is not.  So often you don't need to specify the
<code>omode</code> parameter explicitly.
</p>

&paintmode-docs;

</subsect>

<subsect id="graphicExporter">
<subhead><title>Output Formats</title></subhead>

<p>Several of the plot output <ref id="paintMode">modes</ref>
write the plot in some graphics format or other.
When selecting an output format it is important to understand the 
distinction between <em>bitmapped</em> and <em>vector</em> formats;
basically bitmapped formats represent the image as a grid of finite-sized
pixels while vector formats notionally draw smooth lines.
Bitmapped formats are fine for a computer screen, but for high quality
paper printouts you will want a vector format.
You can convert from vector to bitmapped but not (usefully) in the
other direction.  There are a couple of subtleties to this distinction
specific to STILTS graphical output as discussed below.
</p>

<p>The following formats are the available values for the
<code>ofmt</code> parameter of the various plot commands:
<dl>
<dt><code>png</code></dt>
<dd><p>PNG format.
    This is a flexible bitmapped format providing transparency 
    and an unlimited number of colours with good compression.
    It is fairly widely supported by browsers and other image viewers,
    but perhaps not as widely as GIF.
    </p></dd>

<dt><code>gif</code></dt>
<dd><p>GIF format.
    This is a very widely-supported bitmapped format providing transparency.
    The number of colours is limited to 255 however, so if you are using
    auxiliary axes (colour variation to represent higher dimensionality)
    or other plot features which use a wide range of colours you may see
    image degradation.
    </p></dd>

<dt><code>jpeg</code></dt>
<dd><p>JPEG format.
    This is a bitmapped format intended primarily for photographs.
    Transparency is not supported, and although there is no limit on the
    maximum number of colours, its lossiness means that plots generated
    using it generally look a bit smudged.
    </p></dd>

<dt><code>pdf</code></dt>
<dd><p>Portable Document Format.
    This is the format which can be read by Adobe's Acrobat Reader.
    It is a widely portable vector format, and is suitable for printing
    at high resolution, either standalone or imported into some other 
    presentation format.
    However, there are a couple of caveats when it comes to using it with
    STILTS plots.
    <ol>
    <li>If used to plot a very large number of points, the output PDF file
        can get quite large, though it's much better than for
        <code>eps</code> output (see below).
        </li>
    <li>Because of the way that STILTS does its transparency rendering,
        the only way that plots with partially transparent points can 
        be rendered is to draw the body
        of the plot as a bitmap rather than as vector graphics.
        This is probably a blessing in disguise since with very large numbers
        of points a vector PDF file could get unmanageably large in any case.
        So if there is any transparency in the plot, the interior of the
        plot will be pixellated.  The axes and annotations outside of the
        plot will still be drawn in vector format however.
        </li>
    </ol>
    </p></dd>

<dt><code>eps</code></dt>
<dd><p>Encapsulated Postscript.
    This is a vector format which is suitable for printing at high resolution
    either standalone or imported into some other presentation format
    (you may need to convert it via PDF depending on the intended destination).
    However, there are a couple of caveats when it comes to using it with
    STILTS plots.
    <ol>
    <li>Unfortunately the postscript driver used by STILTS is not very 
        efficient and can result in large, sometimes very large, postscript
        output files.  This is likely to be a problem for plots with a large
        number of non-transparent points.
        For this reason <code>eps-gzip</code> or <code>pdf</code> may be
        a better choice.
        </li>
    <li>Postscript has no support for partial transparency, so if plots 
        are drawn with partially transparent points (common for very large
        data sets) the only way they can be rendered is by drawing the body
        of the plot as a bitmap rather than as vector graphics.
        This is probably a blessing in disguise since with very large numbers
        of points a vector postscript file would likely be unmanageably 
        large in any case.
        So if there is any transparency in the plot, the interior of the
        plot will be pixellated.  The axes and annotations outside of the
        plot will still be drawn in vector format however.
        </li>
    </ol>
    </p></dd>

<dt><code>eps-gzip</code></dt>
<dd><p>Just like the <code>eps</code> format above except that the output
    is automatically compressed using the GZIP format as it is written.
    Postscript compresses well (typically a factor of 5-10).
    </p></dd>

</dl>
</p>

</subsect>

<subsect>
<subhead><title>Comparison with TOPCAT plotting</title></subhead>

<p>The intention is in future releases for STILTS to provide all 
the plot types and facilities which are available from
<webref url="http://www.starlink.ac.uk/topcat/">TOPCAT</webref>.
STILTS may additionally offer more detailed options for
controlling plot appearance, for instance of
font and colour selection and tick mark placement.
At time of writing however, only the 
<ref id="plot2d">2d scatter plot</ref>, 
<ref id="plot3d">3d Cartesian scatter plot</ref> and
<ref id="plothist">histogram</ref> plot types are available,
though these do include the most useful plot types and the most of the 
options from TOPCAT for these plot types are available from STILTS too.
</p>

<p>As well as the advantage (in some contexts) of being able to generate
plots in a scriptable fashion rather than from a graphical interactive
interface, STILTS allows plots to be made from datasets of unlimited size.
While TOPCAT has an effective limit of a few million rows,
STILTS can stream data from tables to do its plotting,
so a plot can be made representing an unlimited number of rows
without large memory requirements.  In some cases this might lead to
plotting times which are a bit slower than TOPCAT - if this becomes an
issue something may be done about it.
</p>

</subsect>

</sect>


<sect id="jel">
<subhead><title>Algebraic Expression Syntax</title></subhead>

<p>Many of the STILTS commands 
allow you to use algebraic expressions based on table columns when doing
things like making row selections, defining new columns, selecting values
to plot or match, and so on.
In these cases you are defining an expression which
has a value in each row as a function of the values in the existing
columns in that row.
This is a powerful feature which permits you to manipulate and select
table data in very flexible ways.
The syntax for entering these expressions is explained in this section.
</p>

<p>What you write are actually expressions in
the Java language, which are compiled into Java bytecode before
evaluation.  However, this does not mean that you need to be a
Java programmer to write them.  The syntax is pretty similar to C,
but even if you've never programmed in C most simple things,
and many complicated ones, are quite intutitive.
</p>

<p>The following explanation gives
some guidance and <ref id="jelExamples">examples</ref>
for writing these expressions.
Unfortunately a complete tutorial on writing Java is beyond
the scope of this document, but it should provide enough information
for even a novice to write useful expressions.
</p>

<p>The expressions that you can write are basically any function
of all the column values which apply
to a given row; the function result can then be used where STILTS
needs a per-row value, for instance to define a new column.
If the built-in operators and functions are not sufficient,
or it's unwieldy to express your function in one line of code,
it is possible to add new functions by writing your own classes -
see <ref id="jelExtend"/>.
</p>

<p>Note that since these algebraic expressions often contain spaces,
you may need to enclose them in single or double quotes so that
they don't get confused with other parts of the command string.
</p>

<p><strong>Note:</strong> if Java is running in an environment with
certain security restrictions (a security manager which
does not permit creation of custom class loaders) then algebraic
expressions won't work at all.  It's not particularly likely
that security restrictions will be in place if you are running
from the command line though.
</p>

<subsect id="jel-colref">
<subhead><title>Referencing Column Values</title></subhead>

<p>To create a useful expression which can be evaluated for each row
in a table, you will have to refer to cells in different columns of that row.
You can do this in three ways:
<dl>
<dt>By Name</dt>
<dd><p>The Name of the column may be used if it is unique (no other column in
    the table has the same name) and if it has a suitable form.
    This means that it must have the form of a Java variable - basically
    starting with a letter and continuing with
    letters, numbers, underscores and currency symbols.
    In particular it cannot contain spaces, commas, parentheses etc.
    </p>
    <p>As a special case, if an expression contains just a single column name,
    rather than some more complicated expression, 
    then any column name may be used, even one containing non-alphanumeric
    characters.
    </p>
    <p>Column names are treated case-insensitively.
    </p></dd>

<dt>By &column.id.char;ID</dt>
<dd><p>The "&column.id.char;ID"
    identifier of the column may always be used to refer to it;
    this is a useful fallback if the column name isn't suitable for
    some reason (for instance it contains spaces or is not unique).
    This is just a "&column.id.char;" sign followed by the column index -
    the first column is &column.id.char;1.
    </p></dd>

<dt>By &ucd.prefix; specifier</dt>
<dd><p>If the column has a
    <webref url="http://www.ivoa.net/Documents/latest/UCD.html"
            >Unified Content Descriptor</webref>
    (this will usually only be the case for VOTable or possibly FITS format
    tables) you can refer to it using an identifier of the form
    "<code>&ucd.prefix;&lt;ucd-spec&gt;</code>".  Depending on the version of
    UCD scheme used, UCDs can contain various punctuation marks such
    as underscores, semicolons and dots; for the purpose of this syntax
    these should all be represented as underscores ("<code>_</code>").
    So to identify a column which has the UCD "<code>phot.mag;em.opt.R</code>",
    you should use the identifier "<code>&ucd.prefix;phot_mag_em_opt_r</code>".
    Matching is not case-sensitive.  Futhermore, a trailing underscore
    acts as a wildcard, so that the above column could also be referenced
    using the identifier "<code>&ucd.prefix;phot_mag_</code>".  If multiple
    columns have UCDs which match the given identifer, the first one
    will be used.
    </p>
    <p>Note that the same syntax can be used for referencing table
    parameters (see the <ref id="jel-paramref">next section</ref>);
    columns take preference so if a column and a parameter both match
    the requested UCD, the column value will be used.
    </p></dd>

<dt>By &utype.prefix; specifier</dt>
<dd><p>If the column has a <label>Utype</label>
    (this will usually only be the case for VOTable or possibly FITS format
    tables) you can refer to it using an identifier of the form
    "<code>&utype.prefix;&lt;utype-spec&gt;</code>".
    Utypes can contain various punctuation marks such as colons and dots;
    for the purpose of this syntax
    these should all be represented as underscores ("<code>_</code>").
    So to identify a column which has the Utype 
    "<code>ssa:Access.Format</code>",
    you should use the identifier 
    "<code>&utype.prefix;ssa_Access_Format</code>".
    Matching is not case-sensitive.
    If multiple columns have Utypes which match the given identifier,
    the first one will be used.
    </p>
    <p>Note that the same syntax can be used for referencing table
    parameters (see the <ref id="jel-paramref">next section</ref>);
    columns take preference so if a column and a parameter both match
    the requested Utype, the column value will be used.
    </p></dd>

</dl>
</p>
<p>There is a special column whose name is "Index" and whose ID is
"&column.id.char;0". 
The value of this is the same as the row number (the first row is 1).
</p>

<p>The value of the variables so referenced will be a primitive
(boolean, byte, short, char, int, long, float, double) if the 
column contains one of the corresponding types.  Otherwise it will
be an Object of the type held by the column, for instance a String.
In practice this means: you can write the name of a column, and it will
evaluate to the numeric (or string) value that that column contains
in each row.  You can then use this in normal algebraic expressions
such as "<code>B_MAG-U_MAG</code>" as you'd expect.
</p>

</subsect>

<subsect id="jel-paramref">
<subhead><title>Referencing Parameter Values</title></subhead>

<p>Some tables have constant values associated with them; these may
represent such things as the epoch at which observations were taken,
the name of the catalogue, an angular resolution associated with all 
observations, or any number of other things.  Such constants are known as
<em>table parameters</em> (not to be confused with parameters passed
to STILTS commands) and can be thought of as extra columns which have the
same value for every row.  The values of such parameters can be referenced
in STILTS algebraic expressions as follows:
<dl>
<dt>&param.prefix;<em>name</em></dt>
<dd><p>If the parameter name has a suitable form (starting with a letter
    and continuing with letters or numbers) it can be referenced by 
    prefixing that name with the string <code>&param.prefix;</code>.
    </p></dd>

<dt>&ucd.prefix;<em>ucd-spec</em></dt>
<dd><p>If the parameter has a
    <webref url="http://www.ivoa.net/Documents/latest/UCD.html"
            >Unified Content Descriptor</webref>
    it can be referenced by prefixing the UCD specifier with the
    string <code>&ucd.prefix;</code>.  Any punctuation marks in the
    UCD should be replaced by underscores, and a trailing underscore
    is interpreted as a wildcard.  See <ref id="jel-colref"/> for
    more discussion.
    </p></dd>

<dt>&utype.prefix;<em>utype-spec</em></dt>
<dd><p>If the parameter has a Utype,
    it can be referenced by prefixing the Utype specifier with the 
    string <code>&utype.prefix;</code>.  Any punctuation marks in the
    Utype should be replaced by underscores.  See <ref id="jel-colref"/> for
    more discussion.
    </p></dd>
</dl>
Note that if a parameter has a name in an unsuitable form (e.g. containing
spaces) and has no UCD then it cannot be referenced in an expression.
</p>

</subsect>

<subsect>
<subhead><title>Null Values</title></subhead>

<p>When no special steps are taken, if a null value (blank cell)
is encountered
in evaluating an expression (usually because one of the columns
it relies on has a null value in the row in question) then the
result of the expression is also null.
</p>

<p>It is possible to exercise more control than this, but it
requires a little bit of care,
because the expressions work in terms of primitive values
(numeric or boolean ones) which don't in general have a defined null
value.  The name "<code>null</code>" 
in expressions gives you the java <code>null</code>
reference, but this cannot be matched against a primitive value
or used as the return value of a primitive expression.
</p>

<p>For most purposes, the following two tips should enable you to
work with null values:

<dl>
<dt>Testing for null</dt>
<dd><p>To test whether a column contains a null value, prepend the
    string "<code>NULL_</code>"
    (use upper case) to the column name or &column.id.char;ID.  This
    will yield a boolean value which is true if the column contains
    a blank, and false otherwise.
    </p></dd>

<dt>Returning null</dt>
<dd><p>To return a null value from a numeric expression, use the name
    "<code>NULL</code>"
    (upper case).  To return a null value from a non-numeric expression
    (e.g. a String column) use the name "<code>null</code>" (lower case).
    </p></dd>
</dl>
</p>

<p>Null values are often used in conjunction with the conditional
operator, "<code>? :</code>"; the expression
<verbatim>
   test ? tval : fval
</verbatim>
returns the value <code>tval</code> if the boolean expression <code>test</code>
evaluates true, or <code>fval</code> if <code>test</code> evaluates false.
So for instance the following expression:
<verbatim>
   Vmag == -99 ? NULL : Vmag
</verbatim>
can be used to define a new column which has the same value as the 
<code>Vmag</code> column for most values, but if <code>Vmag</code> 
has the "magic" value -99 the new column will contain a blank.
The opposite trick (substituting a blank value with a magic one) can
be done like this:
<verbatim>
   NULL_Vmag ? -99 : Vmag
</verbatim>
Some more examples are given in <ref id="jelExamples"/>.
</p>

</subsect>

<subsect>
<subhead><title>Operators</title></subhead>

<p>The operators are pretty much the same as in the C language.
The common ones are:
<dl>
<dt>Arithmetic</dt>
<dd><p>
  <dl>
  <dt><code>+</code> (add)</dt>
  <dt><code>-</code> (subtract)</dt>
  <dt><code>*</code> (multiply)</dt>
  <dt><code>/</code> (divide)</dt>
  <dt><code>%</code> (modulus)</dt>
  </dl>
</p></dd>

<dt>Boolean</dt>
<dd><p>
  <dl>
  <dt><code>!</code> (not)</dt>
  <dt><code>&amp;&amp;</code> (and)</dt>
  <dt><code>||</code> (or)</dt>
  <dt><code>^</code> (exclusive-or)</dt>
  <dt><code>==</code> (numeric identity)</dt>
  <dt><code>!=</code> (numeric non-identity)</dt>
  <dt><code>&lt;</code> (less than)</dt>
  <dt><code>&gt;</code> (greater than)</dt>
  <dt><code>&lt;=</code> (less than or equal)</dt>
  <dt><code>&gt;=</code> (greater than or equal)</dt>
  </dl>
</p></dd>

<dt>Bitwise</dt>
<dd><p>
   <dl>
   <dt><code>&amp;</code> (and)</dt>
   <dt><code>|</code> (or)</dt>
   <dt><code>&lt;&lt;</code> (left shift)</dt>
   <dt><code>&gt;&gt;</code> (right shift)</dt>
   <dt><code>&gt;&gt;&gt;</code> (logical right shift)</dt>
   </dl>
</p></dd>

<dt>Numeric Typecasts</dt>
<dd><p>
  <dl>
  <dt><code>(byte)</code>   (numeric -> signed byte)</dt>
  <dt><code>(short)</code>  (numeric -> 2-byte integer)</dt>
  <dt><code>(int)</code>    (numeric -> 4-byte integer)</dt>
  <dt><code>(long)</code>   (numeric -> 8-byte integer)</dt>
  <dt><code>(float)</code>  (numeric -> 4-type floating point)</dt>
  <dt><code>(double)</code> (numeric -> 8-byte floating point)</dt>
  </dl>
  Note you may find the 
  <ref id="uk.ac.starlink.ttools.func.Maths" plaintextref="yes">Maths</ref> 
  conversion functions more convenient for numeric conversions than these.
</p></dd>

<dt>Other</dt>
<dd><p>
  <dl>
  <dt><code>+</code>  (string concatenation)</dt>
  <dt><code>[]</code> (array dereferencing)</dt>
  <dt><code>?:</code> (conditional switch)</dt>
  <dt><code>instanceof</code> (class membership)</dt>
  </dl>
</p></dd>
</dl>
</p>

</subsect>

<subsect id="staticMethods">
<subhead><title>Functions</title></subhead>

<p>Many functions are available for use within your expressions,
covering standard mathematical and trigonometric functions,
arithmetic utility functions, type conversions, and some more
specialised astronomical ones.
You can use them in just the way you'd expect,
by using the function name
(unlike column names, this is case-sensitive) followed by
comma-separated arguments in brackets, so
<verbatim>
    max(IMAG,JMAG)
</verbatim>
will give you the larger of the values in the columns IMAG and JMAG,
and so on.
</p>

<p>The functions available for use by default
are listed by class in the following subsections
with their arguments and short descriptions.
The <ref id="funcs"><code>funcs</code></ref> command provides another
way to browse these function descriptions online.
</p>

&jel.func.docs;

</subsect>

<subsect id="jelExamples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples for defining new columns;
the expressions below could appear as the <code>&lt;expr&gt;</code> in a
<code>tpipe</code> <code>addcol</code> or <code>sortexpr</code>
<ref id="filterSteps">command</ref>).
<dl>

<dt>Average</dt>
<dd><p><verbatim>
   (first + second) * 0.5
</verbatim></p></dd>

<dt>Square root</dt>
<dd><p><verbatim>
   sqrt(variance)
</verbatim></p></dd>

<dt>Angle conversion</dt>
<dd><p><verbatim>
   radiansToDegrees(DEC_radians)
   degreesToRadians(RA_degrees)
</verbatim></p></dd>

<dt>Conversion from string to number</dt>
<dd><p><verbatim>
   parseInt(&column.id.char;12)
   parseDouble(ident)
</verbatim></p></dd>

<dt>Conversion from number to string</dt>
<dd><p><verbatim>
   toString(index)
</verbatim></p></dd>

<dt>Conversion between numeric types</dt>
<dd><p><verbatim>
   toShort(obs_type)
   toDouble(range)
</verbatim><em>or</em><verbatim>
   (short) obs_type
   (double) range
</verbatim></p></dd>

<dt>Conversion from sexagesimal to degrees</dt>
<dd><p><verbatim>
   hmsToDegrees(RA1950)
   dmsToDegrees(decDeg,decMin,decSec)
</verbatim></p></dd>

<dt>Conversion from degrees to sexagesimal</dt>
<dd><p><verbatim>
   degreesToDms(&column.id.char;3)
   degreesToHms(RA,2)
</verbatim></p></dd>

<dt>Outlier clipping</dt>
<dd><p><verbatim>
   min(1000, max(value, 0))
</verbatim></p></dd>

<dt>Converting a magic value to null</dt>
<dd><p><verbatim>
   jmag == 9999 ? NULL : jmag
</verbatim></p></dd>

<dt>Converting a null value to a magic one</dt>
<dd><p><verbatim>
   NULL_jmag ? 9999 : jmag
</verbatim></p></dd>

<dt>Taking the third scalar element from an array-valued column</dt>
<dd><p><verbatim>
   psfCounts[2]
</verbatim></p></dd>

</dl>

and here are some examples of boolean expressions that could be used
for row selection (appearing in a <code>tpipe</code> <code>select</code>
command)

<dl>
<dt>Within a numeric range</dt>
<dd><p><verbatim>
   <![CDATA[RA > 100 && RA < 120 && Dec > 75 && Dec < 85]]>
</verbatim></p></dd>

<dt>Within a circle</dt>
<dd><p><verbatim>
   &column.id.char;2*&column.id.char;2 + &column.id.char;3*&column.id.char;3 &lt; 1
   skyDistanceDegrees(ra0,dec0,hmsToDegrees(RA),dmsToDegrees(DEC))&lt;15./3600.
</verbatim></p></dd>

<dt>First 100 rows</dt>
<dd><p><verbatim>
   index &lt;= 100
</verbatim>
(though you could use <code>tpipe cmd='head 100'</code> instead)</p></dd>

<dt>Every tenth row</dt>
<dd><p><verbatim>
   index % 10 == 0
</verbatim>
(though you could use <code>tpipe cmd='every 10'</code> instead)</p></dd>

<dt>String equality/matching</dt>
<dd><p><verbatim>
   equals(SECTOR, "ZZ9 Plural Z Alpha")
   equalsIgnoreCase(SECTOR, "zz9 plural z alpha")
   startsWith(SECTOR, "ZZ")
   contains(ph_qual, "U")
</verbatim></p></dd>

<dt>String regular expression matching</dt>
<dd><p><verbatim>
   matches(SECTOR, "[XYZ] Alpha")
</verbatim></p></dd>

<dt>Test for non-blank value</dt>
<dd><p><verbatim>
   ! NULL_ellipticity
</verbatim></p></dd>
</dl>
</p>

</subsect>

<subsect id="jelAdvanced">
<subhead><title>Advanced Topics</title></subhead>

<p>This section contains some notes on getting the most out of
the algebraic expressions facility.  If you're not a Java programmer,
some of the following may be a bit daunting - read on at your
own risk!
</p>

<subsubsect>
<subhead><title>Expression evaluation</title></subhead>

<p>This note provides a bit more detail for Java programmers on what
is going on here; it describes how the use
of functions in STILTS algebraic expressions relates to normal Java
code.
</p>

<p>The expressions which you write are compiled to Java bytecode
when you enter them (if there is a 'compilation error' it will be
reported straight away).  The functions listed in the previous subsections
are all the <code>public static</code> methods of the classes which
are made available by default.  The classes listed are all in the
package <code>uk.ac.starlink.ttools.func</code>.
However, the public static methods are all imported into an anonymous
namespace for bytecode compilation, so that you write
(<code>sqrt(x,y)</code> and not <code>Maths.sqrt(x,y)</code>.
The same happens to other classes that are imported (which can be
in any package or none) - their public
static methods all go into the anonymous namespace.  Thus, method
name clashes are a possibility.
</p>

<p>This cleverness is all made possible by the rather wonderful
<webref url="http://www.gnu.org/software/jel/" plaintextref="yes">JEL</webref>.
</p>

</subsubsect>

<subsubsect>
<subhead><title>Instance Methods</title></subhead>

<p>There is another category of functions which can be used apart from
those listed in <ref id="staticMethods"/>.
These are called, in Java/object-oriented parlance, "instance methods"
and represent functions that can be executed on an object.
</p>

<p>It is possible to invoke any of its public
instance methods on any object
(though not on primitive values - numeric and boolean ones).
The syntax is that you place a "." followed by the method invocation
after the object you want to invoke the method on,
hence <code>NAME.substring(3)</code> instead of <code>substring(NAME,3)</code>.
If you know what you're doing, feel free to go ahead and do this.
However, most of the instance methods you're likely to want to use
have equivalents in the normal functions listed in the previous section,
so unless you're a Java programmer or feeling adventurous,
you may be best off ignoring this feature.
</p>

</subsubsect>


<subsubsect id="jelExtend">
<subhead><title>Adding User-Defined Functions</title></subhead>

<p>The functions provided by default for use with algebraic expressions,
while powerful, may not provide all the operations you need.
For this reason, it is possible to write your own extensions to the
expression language.  In this way you can specify abritrarily complicated
functions.
Note however that this will only allow you to define new columns or subsets
where each cell is a function only of the other cells in the same
row - it will not allow values in one row to be functions of values
in another.
</p>

<p>In order to do this, you have to write and compile a
(probably short) program
in the Java language.  A full discussion of how to go about this
is beyond the scope of this document, so if you are new
to Java and/or programming you may need to find a friendly local
programmer to assist (or mail the author).
The following explanation is aimed at Java programmers, but may not
be incomprehensible to non-specialists.
</p>

<p>The steps you need to follow are:
<ol>
<li>Write and compile a class containing one or more static public
    methods representing the function(s) required</li>
<li>Make this class available on the application's classpath at runtime
    as described in <ref id="jvmClasspath"/></li>
<li>Specify the class's name to the application, as the value of the
    <code>jel.classes</code>
    system property (colon-separated if there are several)
    as described in <ref id="sysProperties"/></li>
</ol>
</p>

<p>Any public static methods defined in the classes thus specified
will then be available for use.
They should be defined to take and return the relevant primitive or
Object types for the function required.
For instance a class written as follows would define a three-value average:
<verbatim>
   public class AuxFuncs {
       public static double average3( double x, double y, double z ) {
           return ( x + y + z ) / 3.0;
       }
   }
</verbatim>
and the command
<verbatim>
   stilts tpipe cmd='addcol AVERAGE "average3(&column.id.char;1,&column.id.char;2,&column.id.char;3)"'
</verbatim>
would add a new column named AVERAGE giving the average of the first
three existing columns.
Exactly how you would build this is dependent on your system,
but it might involve doing something like the following:
<ol>
<li>Writing a file named <code>AuxFuncs.java</code> 
    containing the above code</li>
<li>Compiling it using a command like "<code>javac AuxFuncs.java</code>"</li>
<li>Running <code>tpipe</code> using the flags
    "<code>stilts -classpath . -Djel.classes=AuxFuncs tpipe</code>"</li>
</ol>
</p>

</subsubsect>

</subsect>

</sect>

<appendices>

<sect id="classified">
<subhead><title>Commands By Category</title></subhead>

<p>This section lists the commands available broken down by the
category of function they provide.  Some commands appear in more than
one category.
Detailed descriptions and examples for each command can be found in
<ref id="cmdUsage"/>.
<dl>

<dt>Format conversion:</dt>
<dd><p>
    <ul>
    <li><ref id="tcopy" plaintextref="yes"><code>tcopy</code></ref>:
        &tcopy-purpose;
        </li>
    <li><ref id="votcopy" plaintextref="yes"><code>votcopy</code></ref>:
        &votcopy-purpose;
        </li>
    </ul>
    See also <ref id="io" plaintextref="yes"/>.
    </p></dd>

<dt>Generic table manipulation:</dt>
<dd><p>
    <ul>
    <li><ref id="tcopy" plaintextref="yes"><code>tcopy</code></ref>:
        &tcopy-purpose;
        </li>
    <li><ref id="tpipe" plaintextref="yes"><code>tpipe</code></ref>:
        &tpipe-purpose;
        </li>
    <li><ref id="tmulti" plaintextref="yes"><code>tmulti</code></ref>:
        &tmulti-purpose;
        </li>
    <li><ref id="tmultin" plaintextref="yes"><code>tmultin</code></ref>:
        &tmultin-purpose;
        </li>
    <li><ref id="tcat" plaintextref="yes"><code>tcat</code></ref>:
        &tcat-purpose;
        </li>
    <li><ref id="tcatn" plaintextref="yes"><code>tcatn</code></ref>:
        &tcatn-purpose;
        </li>
    <li><ref id="tloop" plaintextref="yes"><code>tloop</code></ref>:
        &tloop-purpose;
        </li>
    <li><ref id="tjoin" plaintextref="yes"><code>tjoin</code></ref>:
        &tjoin-purpose;
        </li>
    <li><ref id="tcube" plaintextref="yes"><code>tcube</code></ref>:
        &tcube-purpose;
        </li>
    </ul>
    See also <ref id="pipes" plaintextref="yes"/>.
    </p></dd>

<dt>Crossmatching:</dt>
<dd><p>
    <ul>
    <li><ref id="tmatch1" plaintextref="yes"><code>tmatch1</code></ref>:
        &tmatch1-purpose;
        </li>
    <li><ref id="tmatch2" plaintextref="yes"><code>tmatch2</code></ref>:
        &tmatch2-purpose;
        </li>
    <li><ref id="tmatchn" plaintextref="yes"><code>tmatchn</code></ref>:
        &tmatchn-purpose;
        </li>
    <li><ref id="tskymatch2" plaintextref="yes"><code>tskymatch2</code></ref>:
        &tskymatch2-purpose;
        </li>
    <li><ref id="coneskymatch"
             plaintextref="yes"><code>coneskymatch</code></ref>:
        &coneskymatch-purpose;
        </li>
    <li><ref id="sqlskymatch" plaintextref="yes"><code>sqlskymatch</code></ref>:
        &sqlskymatch-purpose;
        </li>
    </ul>
    See also <ref id="match" plaintextref="yes"/>.
    </p></dd>

<dt>Plotting:</dt>
<dd><p>
    <ul>
    <li><ref id="plot2d" plaintextref="yes"><code>plot2d</code></ref>:
        &plot2d-purpose;
        </li>
    <li><ref id="plot3d" plaintextref="yes"><code>plot3d</code></ref>:
        &plot3d-purpose;
        </li>
    <li><ref id="plothist" plaintextref="yes"><code>plothist</code></ref>:
        &plothist-purpose;
        </li>
    </ul>
    See also <ref id="plot" plaintextref="yes"/>.
    </p></dd>

<dt>Sky Pixel Operations:</dt>
<dd><p>
    <ul>
    <li><ref id="pixfoot" plaintextref="yes"><code>pixfoot</code></ref>:
        &pixfoot-purpose;
        </li>
    <li><ref id="pixsample" plaintextref="yes"><code>pixsample</code></ref>:
        &pixsample-purpose;
        </li>
    </ul>
    </p></dd>

<dt>VOTables:</dt>
<dd><p>
    <ul>
    <li><ref id="votcopy" plaintextref="yes"><code>votcopy</code></ref>:
        &votcopy-purpose;
        </li>
    <li><ref id="votlint" plaintextref="yes"><code>votlint</code></ref>:
        &votlint-purpose;
        </li>
    </ul>
    </p></dd>

<dt>Virtual Observatory service access:</dt>
<dd><p>
    <ul>
    <li><ref id="coneskymatch"
             plaintextref="yes"><code>coneskymatch</code></ref>:
        &coneskymatch-purpose;
        </li>
    <li><ref id="tapquery" plaintextref="yes"><code>tapquery</code></ref>:
        &tapquery-purpose;
        </li>
    <li><ref id="tapresume" plaintextref="yes"><code>tapresume</code></ref>:
        &tapresume-purpose;
        </li>
    <li><ref id="taplint" plaintextref="yes"><code>taplint</code></ref>:
        &taplint-purpose;
        </li>
    <li><ref id="regquery" plaintextref="yes"><code>regquery</code></ref>:
        &regquery-purpose;
        </li>
    </ul>
    </p></dd>

<dt>SQL Database access:</dt>
<dd><p>
    <ul>
    <li><ref id="sqlclient" plaintextref="yes"><code>sqlclient</code></ref>:
        &sqlclient-purpose;
        </li>
    <li><ref id="sqlupdate" plaintextref="yes"><code>sqlupdate</code></ref>:
        &sqlupdate-purpose;
        </li>
    <li><ref id="sqlskymatch" plaintextref="yes"><code>sqlskymatch</code></ref>:
        &sqlskymatch-purpose;
        </li>
    </ul>
    </p></dd>

<dt>Miscellaneous:</dt>
<dd><p>
    <ul>
    <li><ref id="server" plaintextref="yes"><code>server</code></ref>:
        &server-purpose;
        </li>
    <li><ref id="calc" plaintextref="yes"><code>calc</code></ref>:
        &calc-purpose;
        </li>
    <li><ref id="funcs" plaintextref="yes"><code>funcs</code></ref>:
        &funcs-purpose;
        </li>
    </ul>
    </p></dd>

</dl>
</p>

</sect>

<sect id="cmdUsage">
<subhead><title>Command Reference</title></subhead>

<p>This appendix provides the reference documentation for the
commands in the package.  For each one a description of its purpose,
a list of its command-line arguments, and some examples are given.
</p>

<subsect id="calc" tocleaf="yes">
<subhead><title><code>calc</code>: &calc-purpose;</title></subhead>

<p><code>calc</code> is a very simple utility for evaluating expressions.
It uses the same expression evaluator as is used in <code>tpipe</code>
and the other generic table tasks for things like creating new columns,
so it can be used as a quick test to see what expressions work,
or in order to evaluate expressions using the various algebraic
functions documented in <ref id="staticMethods"/>.
Since usually no table is involved, you can't refer to column names in
the expressions.
It has one mandatory parameter, the expression to evaluate, and writes the
result to the screen.
</p>

&calc-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of using <code>calc</code>:
<dl>

<dt><verbatim>
stilts calc 1+2
</verbatim></dt>
<dd><p>Calculates one plus two.  Writes "3" to standard output.
    </p></dd>

<dt><verbatim>
stilts calc 'isoToMjd("2005-12-25T00:00:00")'
</verbatim></dt>
<dd><p>Works out the Modified Julian Day corresponding to Christmas 2005.
    The output is "53729.0".
    </p></dd>

<dt><verbatim>
stilts calc '&param.prefix;author' table=catalogue.xml
</verbatim></dt>
<dd><p>In this case the expression is evaluated in the context of the
    supplied table, which means that the table's parameters can be
    referenced in the expression.  This example just outputs the
    value of the table parameter named "author".
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="coneskymatch" tocleaf="yes">
<subhead><title><code>coneskymatch</code>: &coneskymatch-purpose;</title></subhead>

<p><code>coneskymatch</code> is a utility which performs a 
cone search-like
query to a remote server for each row of an input table.
Each of these queries returns a table with one row for each
item held by the server in the region of sky represented by
the input row.
The results of all the queries are then concatenated into one big
output table which is the output of this command.
</p>

<p>The type of virtual observatory service queried is determined by the 
<code>servicetype</code> parameter.  
Typically it will be a 
<webref url="http://www.ivoa.net/Documents/latest/ConeSearch.html"
        >Cone Search</webref> service,
which queries a remote catalogue for astronomical objects or sources
in a particular region.
However, you can also query 
<webref url="http://www.ivoa.net/Documents/latest/SIA.html"
        >Simple Image Access</webref> and
<webref url="http://www.ivoa.net/Documents/latest/SSA.html"
        >Simple Spectral Access</webref> services
in just the same way, to return tables of available 
image and spectral resources in the relevant regions.
</p>

<p>The identity of the server to query is given by the
<code>serviceurl</code> parameter.
Some advice about how to locate URLs for suitable services is given
in <ref id="coneService"/>.
</p>

<p>The effect of this command is like doing a positional crossmatch 
where one of the catalogues is local and the other is remote and
exposes its data via a cone search/SIA/SSA service.
Because of both the network communication and the necessarily naive 
crossmatching algorithm (which scales linearly with the size of the
local catalogue) however, 
it is only suitable if the local catalogue has a reasonably small 
number of rows, unless you are prepared to wait a long time.
</p>

<p>The <code>parallel</code> parameter allows you to perform multiple
cone searches concurrently, so that instead of completing the 
first cone search, then the second, then the third, 
the program can be executing a number of them at once.
This can speed up operation considerably, especially
in the face of network latency, but beware that submitting a very large
number of queries simultaneously to the same server may overload it,
resulting in some combination of failed queries, ultimately slower runtimes,
and unpopularity with server admins.
Best to start with a low parallelism and cautiously increase it to
see whether there are gains in performance.
</p>

<p>Note that when running, <code>coneskymatch</code> can generate a lot
of WARNING messages.  Most of these are complaining about badly formed
VOTables being returned from the cone search services.  STILTS does its
best to work out what the service responses mean in this case, 
and usually makes a good enough job of it.
</p>

<p><em>Note: this task was known as <code>multicone</code> in its experimental
form in STILTS v1.2 and v1.3.</em>
</p>

&coneskymatch-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>coneskymatch</code>:
<dl>

<dt><verbatim>
stilts coneskymatch serviceurl=http://archive.stsci.edu/hst/search.php \
                    in=messier.xml ra=RA dec=DEC sr=0.05 \
                    out=matches.xml
</verbatim></dt>
<dd><p>This queries the HST cone search service from Space Telescope for
    records within .05 degrees of each Messier object contained in a 
    local VOTable <code>messier.xml</code>.  The result is written to a
    new VOTable, <code>matches.xml</code>.  The J2000 positions of each
    record in the input file are held in columns named RA and
    DEC respectively.
    Since the <code>servicetype</code> parameter is not given, the 
    default (cone search) service type is assumed.
    </p></dd>

<dt><verbatim>
stilts coneskymatch
       servicetype=sia \
       serviceurl=http://irsa.ipac.caltech.edu/cgi-bin/2MASS/IM/nph-im_sia?type=ql&amp;ds=asky \
       in=messier.xml ra=RA dec=DEC \
       dataformat=image/fits \
       out=fitsimages.xml
</verbatim></dt>
<dd><p>This is similar to the previous example, but 
    instead of querying an HST cone search server for catalogue objects
    near the input table positions, it queries a 2MASS Simple Image Access
    (SIA) server for images.  
    The search radius parameter (<code>sr</code>) is not set here;
    for SIA queries the default search radius is zero, which has the
    special meaning of including any image which covers the requested position.
    Setting <code>dataformat=image/fits</code> (which is the default) 
    requests only records describing FITS-format images to be returned;
    setting it to an empty value might return other formats such as JPEG too.
    </p></dd>

<dt><verbatim>
stilts coneskymatch \
       serviceurl='http://www.nofs.navy.mil/cgi-bin/vo_cone.cgi?CAT=NOMAD' \
       in=vizier.xml#7 \
       icmd='addskycoords -inunit sex fk4 fk5 RAB1950 DEB1950 RAJ2000 DEJ2000' \
       icmd='progress'
       ra=RAJ2000 dec=DEJ2000 sr=0.01 \
       ocmd='replacecol -units deg RA hmsToDegrees(RA[0],RA[1],RA[2])' \
       ocmd='replacecol -units deg DEC dmsToDegrees(DEC[0],DEC[1],DEC[2])' \
       omode=topcat
</verbatim></dt>
<dd><p>In this example some pre-processing of the input catalogue and
    post-processing of the output catalogue is performed as well as the
    multiple cone search itself.
    </p>
    <p>The input catalogue, which is the 8th TABLE element in a VOTable file,
    contains sky positions in sexagesimal FK4 (B1950) coordinates.  
    The <code>icmd=addskycoords...</code> parameter specifies a filter which
    will add new columns in FK5 (J2000) degrees, which are what the 
    <code>coneskymatch</code> command requires.
    The <code>icmd=progress</code> parameter specifies a filter which
    will write progress information to the terminal so you can see how
    the queries are progressing.
    </p>
    <p>The NOMAD service specified by the <code>serviceurl</code> parameter
    used here happens to return results with the RA/DEC columns represented
    in a rather eccentric format, namely 3-element floating point arrays 
    representing (hours,minutes,seconds)/(degrees,minutes,seconds).
    The two <code>ocmd=replacecol...</code> filters replace the values of
    these columns with the scalar equivalents in degrees.
    Finally, the <code>omode=topcat</code> parameter causes the result
    table to be loaded directly into TOPCAT (if it is available).
    </p>
    </dd>

<dt><verbatim>
stilts coneskymatch serviceurl='http://archive.stsci.edu/iue/search.php?' \
                    in=queries.txt ifmt=ascii \
                    ra='&column.id.char;1' dec='&column.id.char;2' \
                    sr='&column.id.char;3' copycols='&column.id.char;4' \
                    out=found.fits
</verbatim></dt>
<dd><p>Here the input is a plain text table with four unnamed columns, 
    giving in order the right ascension, declination,
    positional error and name of target objects.
    The command carries out a cone search to the named service for
    each one.  Note in this case the search radius (<code>sr</code> parameter)
    is taken from the table and so varies for each query.
    The <code>copycols</code> parameter has the value 
    '<code>&column.id.char;4</code>',
    which means that the value of the fourth column of the input table 
    will be prepended to each row of the output table for 
    which it is responsible.
    Output is to a FITS table.
    </p></dd>
</dl>
</p>

</subsubsect>

<subsubsect id="coneService">
<subhead><title>Locating Cone Query Service URLs</title></subhead>

<p>To use the <code>coneskymatch</code> command you need the
<label>service URL</label> (also known as the <label>base URL</label>
or <label>access URL</label>) of a cone search, SIA or SSA service to use.
If you know one of these representing a service that you wish to use, 
you can use it directly.
</p>

<p>If you don't, you will need to find the URL from somewhere.
It is the job of the Virtual Observatory <label>Registry</label>
to keep a record of where you can find various astronomical services,
so this is where you should look.
</p>

<p>There are various ways you can interrogate the registry; the
easiest is probably to use a graphical registry search tool.
One such tool is 
<webref url="http://www.astrogrid.org/">AstroGrid</webref>'s 
<label>VOExplorer</label>, which allows you to perform sophisticated searches 
for cone search, SIA or SSA services.
Another option is to use
<webref url="http://www.starlink.ac.uk/topcat/">TOPCAT</webref>;
the 
<webref url="http://www.starlink.ac.uk/topcat/sun253/ConeSearchDialog.html"
        >Cone Search</webref>,
<webref url="http://www.starlink.ac.uk/topcat/sun253/SiapTableLoadDialog.html"
        >SIA</webref> and
<webref url="http://www.starlink.ac.uk/topcat/sun253/SsapTableLoadDialog.html"
        >SSA</webref>
load dialogues allow you to search the registry for these services 
prior to performing a query;
you can just use the registry part and cut'n'paste the URL which
is shown.
</p>

<p>Other registry querying tools are available, including STILTS's
<ref id="regquery" plaintextref="yes"><code>regquery</code></ref>
command.  See that section of the manual for details, but for
instance to locate registered Cone Search services which have
something to do with SDSS data, you could execute the following:
<verbatim>
    stilts regquery query="capability/@standardID = 'ivo://ivoa.net/std/ConeSearch' and title like '%SDSS%'" \
           ocmd="keepcols 'shortName AccessUrl'" \
           ofmt=ascii
</verbatim>
Writing just 
<code>query="capability/@standardID = 'ivo://ivoa.net/std/ConeSearch'"</code>
with no further qualification would give you <em>all</em> 
registered cone search services.
</p>

</subsubsect>

</subsect>

<subsect id="funcs" tocleaf="yes">
<subhead><title><code>funcs</code>: &funcs-purpose;</title></subhead>

<p><code>funcs</code> is a utility which allows you to browse the
functions you can use in STILTS's algebraic expression language.
Invoking the command causes a window to pop up on the display with
two parts.  The left hand panel contains a tree-like representation of the
functions available - the top level shows the classes (categories)
into which the functions are divided, and if you open these up
(by double clicking on them) each contains a list of functions and
constants in that class.
If you click on any of these classes or their constituent functions
or constants, a full descritption of what they are and how to
use them will appear in the right hand panel.
</p>

<p>The information available from this command is the same as that given
in <ref id="staticMethods"/>, but the graphical
browser may be a more convenient way to view the documentation.
There are no parameters.
</p>

&funcs-summary;

</subsect>

<subsect id="pixfoot" tocleaf="yes">
<subhead><title><code>pixfoot</code>: &pixfoot-purpose;</title></subhead>

<p><code>pixfoot</code> takes a list of sky positions from an input
table and generates a pixel map describing a sky region which includes
them all.
Currently the output is to a format known as a 
<webref url="http://www.ivoa.net/Documents/MOC/"
        >Multi-Order Coverage map</webref> (MOC),
which is a HEALPix-based format composed of a list of HEALPix pixels
of different sizes, which can efficiently describe complex regions.
Other output formats may be introduced in the future.
</p>

<p>See also the
<ref id="uk.ac.starlink.ttools.func.Coverage">Coverage</ref> class
for MOC-related functions.
</p>

&pixfoot-summary;

<subsubsect id="pixfoot-examples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>pixfoot</code>:
<dl>

<dt><verbatim>
stilts pixfoot in=survey.vot ra=RA2000 dec=DEC2000
               order=8 mocfmt=fits out=sfoot.fits
</verbatim></dt>
<dd><p>Generates an order-8 FITS MOC file from the point positions of
    rows in the given VOTable.
    </p></dd>

<dt><verbatim>
stilts pixfoot in='jdbc:mysql://localhost/astro1#SELECT * FROM first1'
               icmd='addskycoords galactic icrs GLON GLAT RA DEC'
               ra=RA dec=DEC radius=20./3600.
               order=13 mocfmt=fits out=first.moc
</verbatim></dt>
<dd><p>Generates an order-13 FITS MOC file from positions in a table
    held in a database.  The positions in the original table are in
    galactic coordinates, so have to be converted to ecliptic (ICRS) first.  
    The map is formed in this case by surrounding each point by a
    disc of 20 arcsec.
    Note that JDBC database access will have to be set up as per
    <ref id="jdbcConfig"/> for this command to work.
    </p></dd>

</dl>
</p>

</subsubsect>
</subsect>


<subsect id="pixsample" tocleaf="yes">
<subhead><title><code>pixsample</code>: &pixsample-purpose;</title></subhead>

<p><code>pixsample</code> samples data at the sky position 
represented by each row from an all-sky map contained
in a HEALPix-format pixel data file.
Such files are actually tables (usually in FITS format)
in which the row number corresponds to
a HEALPix pixel index, and the pixel values are cell contents;
one or more columns may be present containing values for one or more
all-sky maps.  The result of this command is to add a column to
the input table representing the pixel data at the position of
each input row for each of the data columns in the
HEALPix table.
</p>

<p>This command does not attempt to convert between coordinate systems
except as instructed, so it is important to know what coordinate
system the HEALPix file is in, and ensure that the coordinates
supplied from the input table match this.
You may need to examine the documentation or headers of the HEALPix
file in question to find out.
See the <ref id="pixsample-examples">Examples</ref> section for
some examples.
</p>

<p>There is a choice of how the sampling is done;
the simplest way is just to use the value of the pixel covering 
the indicated position.  An alternative is to average over a
disc of given radius (perhaps a function of the input row).
Other options (e.g. max/min) could easily be added.
</p>

<p>Although HEALPix is not a common format for storing image
data in general, it is used for storing a number of important all-sky
data sets such as the WMAP results and Schlegel dust maps.
The NASA 
<webref url="http://lambda.gsfc.nasa.gov/" plaintextref="yes">LAMBDA</webref>
(Legacy Archive for Microwave Background Data Analysis)
archive has a number of maps in a suitable format,
including foreground data like predicted reddening as well as CMB maps.
</p>

&pixsample-summary;

<subsubsect id="pixsample-examples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>pixsample</code>:
<dl>

<dt><verbatim>
stilts pixsample in=szdata.fits pixdata=wmap_ilc_7yr_v4.fits
                 lat=GAL_LAT lon=GAL_LON pcmd='keepcols TEMPERATURE'
                 out=szdata_cmb.fits
</verbatim></dt>
<dd><p>Samples from a HEALPix file containing WMAP data are added to an
    input file <code>szdata.fits</code>, giving an output file
    <code>szdata_cmb.fits</code> which is the same but with an additional
    column <code>TEMPERATURE</code>.
    The sampling is done using the default statistical mode <code>point</code>,
    which just takes a point sample at the input position.
    The HEALPix file must have its pixels ordered using galactic
    coordinates, since that is the coordinate system available from
    the input table.
    </p>
    <p>
    The pixdata file used here can be found (at time of writing) at
    <webref
    url='http://lambda.gsfc.nasa.gov/data/map/dr4/dfp/ilc/wmap_ilc_7yr_v4.fits'
    /> (24 Mbyte).
    </p></dd>

<dt><verbatim>
stilts pixsample in=messier.xml pixdata=lambda_sfd_ebv.fits
                 stat=mean radius=5./60.
                 insys=icrs pixsys=galactic lon=RA2000 lat=DEC2000
</verbatim></dt>
<dd><p>Samples data from a HEALPix table, averaging over a sampling radius
    of 5 arcmin.  The coordinates in the input table are only available
    as ICRS (RA,Dec) coordinates, and the arrangement of the HEALPix pixels
    in the pixel data file uses galactic coordinates
    (you can only determine this by looking at the FITS headers or
    documentation of that file), so it is necessary to use the
    <code>insys</code> and <code>pixsys</code> parameters for conversion.
    </p>
    <p>
    The pixdata file used here can be found (at time of writing) at
    <webref
      url='http://lambda.gsfc.nasa.gov/data/foregrounds/SFD/lambda_sfd_ebv.fits'
    /> (25 Mbyte).
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="plot2d" tocleaf="yes">
<subhead><title><code>plot2d</code>: &plot2d-purpose;</title></subhead>

<p><code>plot2d</code> performs two-dimensional scatter plots,
sending the output to a graphical display or writing it to a file
in some vector or bitmapped graphics format.
You need to supply it with values for one or more X and Y datasets,
in terms of table columns, and it will generate a plot with a point
for each row.
There are many options available to configure the detailed appearance
of the plot, but in its simplest form invocation is quite straightforward.
See <ref id="plot"/> for more discussion on use of the plotting commands.
</p>

&plot2d-summary;

<subsubsect id="plot2d-examples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>plot2d</code> in use:
<dl>
&plot2d-examples;
</dl>
</p>
</subsubsect>

</subsect>

<subsect id="plot3d" tocleaf="yes">
<subhead><title><code>plot3d</code>: &plot3d-purpose;</title></subhead>

<p><code>plot3d</code> performs three-dimensional scatter plots,
sending the output to a graphical display or writing it to a file
in some vector or bitmapped graphics format.
You need to supply it with values for one or more X, Y and Z datasets,
in terms of table columns, and it will generate a plot with a point
for each row.
There are many options available to configure the detailed appearance
of the plot, but in its simplest form invocation is quite straightforward.
See <ref id="plot"/> for more discussion on use of the plotting commands.
</p>

&plot3d-summary;

<subsubsect id="plot3d-examples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>plot3d</code> in use:
<dl>
&plot3d-examples;
</dl>
</p>
</subsubsect>

</subsect>

<subsect id="plothist" tocleaf="yes">
<subhead><title><code>plothist</code>: &plothist-purpose;</title></subhead>

<p><code>plothist</code> performs histogram plots,
sending the output to a graphical display or writing it to a file
in some vector or bitmapped graphics format.
You need to supply it with values for one or more sets of X values,
in terms of table columns, and it will bin the data and draw bars
appropriately.
Plot bounds, bin widths etc may be supplied expliicitly, but will be
calculated from the data and set from defaults as appropriate otherwise.
There are many options available to configure the detailed appearance
of the plot, but in its simplest form invocation is quite straightforward.
See <ref id="plot"/> for more discussion on use of the plotting commands.
</p>

&plothist-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>plothist</code> in use:
<dl>
&plothist-examples;
</dl>
</p>
</subsubsect>

</subsect>

<subsect id="regquery" tocleaf="yes">
<subhead><title><code>regquery</code>: &regquery-purpose;</title></subhead>

<p><code>regquery</code> submits a query to the Virtual Observatory 
<label>registry</label>
and returns the result as a table containing all the records which 
match the condition specified.  The resulting table can be written out 
in any of the supported formats or otherwise processed in the usual ways.
Making use of this command requires an understanding of the
<webref url="http://www.ivoa.net/Documents/latest/VOResource.html"
        >VOResource</webref> schema.
</p>

<p>It is important to note that the results of this command give a
very much flattened and incomplete view of the results of a full 
registry query.  That is because the contents of an IVOA Registry
(see the IVOA 
<webref url="http://www.ivoa.net/Documents/latest/RM.html"
        >Resource Metadata</webref>
and
<webref url="http://www.ivoa.net/Documents/latest/VOResource.html"
        >VOResource</webref>
documents for more detail)
are hierarchical and cannot be faithfully represented in a simple
tabular structure.
Other superior registry search clients exist;
this command is just useful for viewing the results in a rather
simplified way which can be represented as a table.
</p>

&regquery-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>regquery</code>:
<dl>

<dt><verbatim>
stilts regquery query="title like '%IRAS%'" ofmt=ascii out=iras.txt
</verbatim></dt>
<dd><p>Retrieves all the records in the registry whose
    <code>title</code> field contain the string "IRAS".
    The '<code>%</code>' characters function
    as wildcards for the ADQL <code>like</code> operator.
    The output is written to a local ASCII table which can be examined
    later.
    </p></dd>

<dt><verbatim>
stilts regquery query="capability/@standardID = 'ivo://ivoa.net/std/ConeSearch'
                       and curation/@publisher like '%astrogrid%'"
                omode=count
</verbatim></dt>
<dd><p>Searches for all resources which offer a cone search service and
    are published by AstroGrid.
    In this case the records are not stored, but the <code>omode=count</code>
    output mode counts the rows.
    This therefore tells you how many AstroGrid cone search services are
    in the registry.
    </p></dd>

<dt><verbatim>
stilts regquery query="capability/@standardID = 'ivo://ivoa.net/std/SSA'"
                ocmd="keepcols 'identifier accessUrl'"
                ofmt=ascii out=-
</verbatim></dt>
<dd><p>Queries the registry for all Simple Spectral Access services.
       The <code>keepcols</code> filter takes the result and throws away
       all the columns except for <code>identifier</code> and 
       <code>accessUrl</code>, and these are written to the terminal
       int ASCII format.
       </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="server" tocleaf="yes">
<subhead><title><code>server</code>: &server-purpose;</title></subhead>

<p><code>server</code> runs an HTTP server which makes some or all
of the various STILTS <ref id="cmdUsage">tasks</ref> available to 
local or remote clients making HTTP requests rather than using the
more usual command line interface.
</p>

<p>When you run <code>server</code> it will start up a server which 
runs until it is interrupted, and write to the screen the <em>base URL</em>
at which it can be accessed, for instance
"<code>http://localhost:2112/stilts/</code>".
If you point your browser here you will see some examples (hyperlinks to
server requests) of how to use the server.
Currently there are two main sets of capabilities:
<dl>
<dt>Tasks (<em>baseURL</em><code>/task/</code><em>task-name</em>)</dt>
<dd><p>There is a URL as above associated with each STILTS task provided
    by the server.  The task parameters are passed in the usual
    way for HTTP queries, using
    <code>application/x-www-form-urlencoded</code> (see e.g. the
    <webref url="http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1"
            >HTML FORM</webref> specification).
    Some examples are given in the 
    <ref id="server-client-examples">Client Examples</ref> subsection below.
    Either HTTP GET or POST methods may be used;
    since the task invocations will normally be idempotent, GET is more
    respectable, but long URLs can cause trouble in some circumstances
    (MS IE apparently imposes a limit of about 2000 characters) 
    so POST may be preferable for lengthy invocations.
    </p></dd>
<dt>Forms (<em>baseURL</em><code>/form/</code>)</dt>
<dd><p>There are a couple of example HTML Forms which can be used to
    access the server tasks.  These by no means show all the capabilities
    of the tasks that they use, they are just intended to be examples of
    how forms can be used in this way.
    </p></dd>
</dl>
In general if you request a URL which contains no useful information,
an attempt will be made to return an HTML page directing you to a 
more useful starting point.
</p>

<p>You might want to run STILTS in server mode if you are providing
a web service to external users which is able to access files residing
on the server, for instance generating table plots or row selections
on the fly.
This can be done without the server mode, for instance by invoking
the <code>stilts</code> script or java from a CGI script to serve
each request, but using server mode has two advantages:
first it provides correct HTTP headers such as Content-Types,
and secondly it avoids the Java startup overheads for each invocation.
Note however that in its current form no great attention has been paid
to security, so it may be possible for clients to read and write files
and expend significant system resources by making certain requests to the
server.  Anyone exposing the STILTS HTTP server directly to external
clients should bear this in mind.
</p>

<p>For more flexibility you can run STILTS in servlet mode.
See the javadocs and sources of the 
<code>uk.ac.starlink.ttools.server.TaskServlet</code> class.
The <code>server</code> command is a fairly thin wrapper around this,
which simply deploys the servlet in an embedded web application container
(<webref url="http://jetty.mortbay.org/">Jetty</webref>).
By using the servlet class in your own custom web application instead you
can customise the way it is accessed, for instance providing improved
security.
</p>

<p><strong>Note:</strong>
The <code>server</code> command and associated servlet code are
at time of writing (v2.0) experimental, and probably buggy and missing some 
features which ought to be present.
If you have requirements which are not currently provided, please
contact the author for discussion.
</p>

&server-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of running the <code>server</code> command:
<dl>

<dt><verbatim>
stilts server
</verbatim></dt>
<dd><p>Starts a server on the default port until it is interrupted.
    Most tasks are available in server mode.
    A message will be printed on standard output indicating the base URL
    at which it may be accessed, for instance
    "<code>http://localhost:2112/stilts/</code>".
    </p></dd>

<dt><verbatim>
stilts server port=2100 basepath=tableserv
</verbatim></dt>
<dd><p>Starts a server running on port 2100 with a given URL.
    The URL at which, for instance, the <code>plot2d</code> task 
    can be executed will be 
    "<code>http://</code><em>host</em><code>:2100/tableserv/task/plot2d</code>"
    </p></dd>

<dt><verbatim>
stilts server tasks="plot2d plothist"
</verbatim></dt>
<dd><p>Starts a server with a restricted list of tasks available.
    Only the plotting tasks
    <ref id="plot2d"><code>plot2d</code></ref> and
    <ref id="plothist"><code>plothist</code></ref>
    will be available for execution by clients.
    </p></dd>
</dl>
</p>
</subsubsect>

<subsubsect id="server-client-examples">
<subhead><title>Client Examples</title></subhead>

<p>Here are some examples of URLs which can be retrieved from
a server which is running at the base URL 
<code>http://localhost:2112/stilts/</code>.
All these use the HTTP GET form of request; the POST form could be
used instead with the same effect.
<dl>

<dt><verbatim>
http://localhost:2112/stilts/
</verbatim></dt>
<dd><p>Returns an HTML page giving version information and some links to
    example usages of the server.
    </p></dd>

<dt><verbatim>
http://localhost:2112/stilts/task/tpipe
</verbatim></dt>
<dd><p>Returns an HTML page giving usage instructions for the 
    <ref id="tpipe"><code>tpipe</code></ref> task.
    </p></dd>

<dt><verbatim>
http://localhost:2112/stilts/task/calc?expression=21%2b2
</verbatim></dt>
<dd><p>Invokes the <ref id="calc"><code>calc</code></ref> task
    to return a document containing the text "<code>23</code>".
    Note that the plus ("<code>+</code>") sign in the expression has to be
    encoded using the sequence "<code>%2b</code>" since "<code>+</code>"
    has a special significance in query URLs - see for instance sec 2.2 of 
    <webref url="http://www.ietf.org/rfc/rfc1738.txt">RFC 1738</webref>.
    </p></dd>

<dt><verbatim>
http://localhost:2112/stilts/task/plot2d?in=/data/table1.vot&amp;xdata=RMAG&amp;ydata=BMAG
</verbatim></dt>
<dd><p>Invokes the <ref id="plot2d"><code>plot2d</code></ref> task 
    to return a magnitude-magnitude diagram of the named local file as an image
    (probably an <code>image/png</code>).
    </p></dd>

<dt><verbatim>
http://localhost:2112/stilts/task/tcopy?in=/data/cat.fits&amp;ofmt=votable
</verbatim></dt>
<dd><p>Invokes the <ref id="tcopy"><code>tcopy</code></ref> task
    to return a translation of the named local FITS file to VOTable format.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="sqlclient" tocleaf="yes">
<subhead><title><code>sqlclient</code>:
                &sqlclient-purpose;</title></subhead>

<p><code>sqlclient</code> is a simple command-line client 
for use with SQL databases.
One or more SQL statements can be supplied using the <code>sql</code>
parameter.
The result of each statement may be one or more update counts 
(for update-type statements) or tables (for query-type statements).
Tables will be written to
standard output in a format given by the <code>ofmt</code> parameter.
Update results and timing information will be written to standard error.
</p>

<p>In most cases, you will find life easier if you use either the
database's own command-line or GUI client, or, if you require STILTS-type
format conversion or post-processing, a <code>jdbc:</code>-format URL
for the <code>in</code> parameter of the
<ref id="tpipe"><code>tpipe</code></ref> or
<ref id="tcopy"><code>tcopy</code></ref> commands
(see <ref id="jdbcConfig"/> for more explanation of the latter).
However, this command enables you to submit multiple queries over the
same JDBC connection, including ones which do not generate a tabular
result.  It may be useful if a command-line client is not available to
you for the database you are using.
</p>

<p>This command can only be used if you have access to an SQL
database via JDBC.  The details of how to configure a JDBC connection
to a database are discussed in <ref id="jdbcConfig"/> - obviously 
you will need a database to connect to and appropriate permissions 
on it as well as the relevant drivers.
</p>

<p><strong>This command is experimental</strong>,
and it may be enhanced, renamed or withdrawn in future releases.
</p>

&sqlclient-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>sqlclient</code>:
<dl>

<dt><verbatim>
stilts -classpath lib/drivers.jtds-1.1.jar \
       -Djdbc.drivers=net.sourceforge.jtds.jdbc.Driver \
       -Djava.net.preferIPv4Stack=true \
       sqlclient \
           db='jdbc:jtds:sqlserver://amenhotep:1433/twomass' \
           user='guest1' \
           ofmt=csv-nohead \
           sql='SET SHOWPLAN_TEXT ON' \
           sql='SELECT ra,dec FROM twomass_psc WHERE ra BETWEEN 21.7 AND 21.8 \
                                                 AND dec BETWEEN 9.1 AND 9.12'
</verbatim></dt>
<dd><p>This sends two commands to a SQL Server database; the first one
    (SET SHOWPLAN...) sets a flag which causes the DB to return an 
    execution plan rather than the result for subsequent queries, 
    and the second makes the query itself.  
    Since the password is not provided on the command line, a prompt 
    for it will be issued before execution.
    The result is SQL Server's execution plan for the SELECT statement 
    expressed as a headerless comma-separated value table sent to the terminal.
    CSV is chosen for the output format since it does not truncate wide columns.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="sqlskymatch" tocleaf="yes">
<subhead><title><code>sqlskymatch</code>:
                &sqlskymatch-purpose;</title></subhead>

<p><code>sqlskymatch</code> resembles 
<ref id="coneskymatch" plaintextref="yes"><code>coneskymatch</code></ref>,
but instead
of sending an HTTP query to a remote cone search service for each 
match (i.e. each row of the input table), it executes an SQL query
directly.  The query is a SELECT statement with a WHERE clause which
makes restrictions on Right Ascension and Declination columns;
the names of these columns must be given as parameters.
The effect is that of a spatial join between a client-side table and 
a table stored in the database.
</p>

<p>This command can only be used if you have access to an SQL
database via JDBC.  The details of how to configure a JDBC connection
to a database are discussed in <ref id="jdbcConfig"/> - obviously 
you will need a database to connect to and appropriate read permissions 
on it as well as the relevant drivers.
</p>

<p><em>Note: this task was known as <code>sqlcone</code> in its experimental
form in STILTS v1.3.</em>
</p>

&sqlskymatch-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>sqlskymatch</code>:
<dl>

<dt><verbatim>
stilts -classpath lib/drivers/mysql-connector-java.jar \
       -Djdbc.drivers=com.mysql.jdbc.Driver 
       sqlskymatch in=messier.xml ra=RA dec=DEC sr=0.05 \
                   db='jdbc:mysql://localhost/ASTRO1' user=mbt \
                   dbtable=FIRST dbra=_RA2000 dbdec=_DE2000 \
                   out=matches.xml
</verbatim></dt>
<dd><p>This performs a series of SELECT statements on the table FIRST
    in the local MySQL database ASTRO1 to identify database objects in the
    region of each object represented in the VOTable <code>messier.xml</code>.
    The result, a join between the Messier and FIRST tables, is output
    as a VOTable called <code>matches.xml</code>.
    In this case a password has not been supplied on the command line,
    so if one is required it will be prompted for on the console.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="sqlupdate" tocleaf="yes">
<subhead><title><code>sqlupdate</code>: &sqlupdate-purpose;</title></subhead>

<p><code>sqlupdate</code> updates values in an existing table in an SQL
database.  The rows to update are specified, as a normal
SELECT statement, using the <code>select</code> parameter.
Each column to update, and the value to write to it, are given using
the <code>assign</code> parameter.
</p>

<p>Why not just use the database's own UPDATE statement?  In most cases,
that would be a much better idea.  However, using <code>sqlupdate</code>
you can write values using STILTS's 
<ref id="jel" plaintextref="yes">expression language</ref>, and hence take
advantage of its various functions, without having to embed them into
the database.  SQL column names can be used as variables in these expressions,
in the same way that table column names are used as variables in 
other commands such as <code>tpipe</code>.
</p>

<p>This command can only be used if you have access to an SQL
database via JDBC.  The details of how to configure a JDBC connection
to a database are discussed in <ref id="jdbcConfig"/> - obviously 
you will need a database to connect to and appropriate write permissions
on it as well as the relevant drivers.
</p>

<p>This is a somewhat specialised command, and several 
(database/driver-specific) things can go wrong with it.
If you do not have a fairly good understanding of the database with which
you are using it then you may run into problems (but then you'd be unlikely
to have the permissions to do the updates in any case).
</p>

&sqlupdate-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>sqlupdate</code>:
<dl>

<dt><verbatim>
stilts -classpath lib/drivers/mysql-connector-java.jar \
       -Djdbc.drivers=com.mysql.jdbc.Driver \
       sqlupdate db='jdbc:mysql://localhost/RADIO' user=root
       select='SELECT * from FIRST" \
       assign='HTMID=htmIndex(20,POS_EQ_RA,POS_EQ_DEC)'
</verbatim></dt>
<dd><p>Fills in the HTMID column of a table called FIRST in the local MySQL
    database RADIO, using HTM pixel indices based on the existing 
    right ascension and declination columns in that table.
    The HTMID column must exist prior to executing this command.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="taplint" tocleaf="yes">
<subhead><title><code>taplint</code>: &taplint-purpose;</title></subhead>

<p><code>taplint</code> runs a series of tests on a Table Access Protocol
(<webref url="http://www.ivoa.net/Documents/TAP/">TAP</webref>)
service and reports the results.  Unlike most of the other tools in 
this package it is not likely to be of use to normal users;
its intended use is for people developing or operating TAP services
to assess their services, perhaps with a view to improving compliance.
</p>

<p>Testing takes place in a number of stages; it is possible to choose 
which stages are run in by using the <code>stages</code> parameter.
At present output is line-based text to standard output,
and each report line is of the (fairly greppable) form:
<verbatim>
   T-SSS-MMMMxN aaaaa...
</verbatim>
where the parts have the following meanings:
<ul>
<li><code>T</code>: Report type,
    one of E(rror), W(arning), I(nfo), S(ummary), F(ailure).
    See the documentation of the <code>report</code> parameter for
    further description of what these mean.
    The <code>report</code> parameter can be used to suppress some of these;
    only <code>E</code> indicates actual service compliance errors, but
    including the others may make it easier to see what's going on.
    </li>
<li><code>SSS</code>: Stage abbreviation, as used in the <code>stages</code>
    parameter.  The <code>stages</code> parameter can be used to select
    which stages are run.
    </li>
<li><code>MMMM</code>: Message label, which is always the same for
    messages generated by the same test, is usually different for
    messages generated by different tests, and may be somewhat mnemonic.
    </li>
<li><code>x</code>: Continuation indicator,
    either "<code>-</code>" or "<code>+</code>".
    In most cases it is "<code>-</code>", indicating the first line of
    a message, but multi-line messages (rare) use "<code>-</code>" for the first
    line and "<code>+</code>" for any continuation lines.
    </li>
<li><code>N</code>: Sequence number, which is 1 for the first time
    message <code>T-SSS-MMMM</code> is reported, and increases by one
    for each subsequent appearance.
    After a certain maximum (determined by the <code>maxrepeat</code>
    parameter) additional reports with the same code are no longer output
    individually, but a summary of the number of reports so discarded
    is written at the end of the section with the character "<code>x</code>"
    instead of the sequence number.
    This behaviour prevents the output being swamped by
    multiple reports of the same issue.
    If the <code>maxrepeat</code> parameter is increased above 9, more than
    one digit will be used here (so e.g. for maxrepeat=999, the format would
    be <code>NNN</code> not <code>N</code>).
    </li>
<li><code>aaaaa...</code>: Message text, a free text description of
    what is being reported.
    </li>
</ul>
</p>

<p>TAP is a complicated beast, referencing many standards
(including 
<webref url="http://www.ivoa.net/Documents/TAP/">TAP</webref>,
<webref url="http://www.ivoa.net/Documents/UWS/">UWS</webref>,
<webref url="http://www.ivoa.net/Documents/VODataService/"
        >VODataService</webref>,
<webref url="http://www.ivoa.net/Documents/latest/ADQL.html">ADQL</webref>,
<webref url="http://www.ivoa.net/Documents/latest/VOResource.html"
        >VOResource</webref>,
<webref url="http://www.ivoa.net/Documents/VOSI/">VOSI</webref>,
<webref url="http://www.ivoa.net/Documents/TAPRegExt/">TAPRegExt</webref>,
<webref url="http://www.ivoa.net/Documents/ObsCore/">ObsCore</webref>,
<webref url="http://www.ivoa.net/Documents/VOTable/">VOTable</webref>,
<webref url="http://www.w3.org/Protocols/rfc2616/rfc2616.html">HTTP</webref>),
and it is hard to write a validator which is comprehensive, especially
one which can provide useful output for services with a range of 
compliance levels.
This tool tries to make a wide range of tests, but does not claim to
be comprehensive.  An idea of what tests it does perform can be gained 
from the stages listed in the description of the <code>stages</code>
parameter.  It does make a fairly good job of checking that declared
metadata is consistent and matches the data actually returned from queries,
and it tests job submission in most of the various ways permitted by the TAP
standard.  Things it does not test much include complex ADQL queries, 
coordinate/STC-related data types, queries in non-ADQL languages,
and service registration.
</p>

&taplint-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>taplint</code>:

<dl>

<dt><verbatim><![CDATA[
stilts taplint http://dc.zah.uni-heidelberg.de/__system__/tap/run/tap
]]></verbatim></dt>
<dd><p>Performs a default validation run against the TAP service based
    at the given URL.
    </p></dd>

<dt><verbatim><![CDATA[
stilts taplint tapurl=http://example.com/tap
               report=EW stages='TMS UWS' truncate=80 maxrepeat=4
]]></verbatim></dt>
<dd><p>A validation run is done against the named TAP service.
    Only Error and Warning type messages are output,
    only two validation stages are performed,
    lines are truncated to a maximum of 80 characters,
    and each message is repeated a maximum of 4 times.
    An invocation like this may be suitable if you find the default
    operation too verbose.
    </p>
    <p>The output of this invocation might look like this:
    <verbatim><![CDATA[

Section TMS: Check content of tables metadata from TAP_SCHEMA
E-TMS-CINT-1 Column principal in TAP_SCHEMA.columns has wrong type char not int
E-TMS-CINT-2 Column std in TAP_SCHEMA.columns has wrong type char not int
W-TMS-CLUN-1 Unused entry in TAP_SCHEMA.columns table: ivoa.obscore

Section UWS: Test asynchronous UWS/TAP behaviour
E-UWS-GMIM-1 Incorrect Content-Type text/xml != text/plain for http://exampl....
E-UWS-GMIM-2 Incorrect Content-Type text/xml != text/plain for http://exampl....
E-UWS-GMIM-3 Incorrect Content-Type text/xml != text/plain for http://exampl....
E-UWS-GMIM-4 Incorrect Content-Type text/xml != text/plain for http://exampl....
E-UWS-GMIM-x (3 more)

Totals: Errors: 9; Warnings: 1

    ]]></verbatim>
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tapquery" tocleaf="yes">
<subhead><title><code>tapquery</code>: &tapquery-purpose;</title></subhead>

<p><code>tapquery</code> can query remote databases using the
Table Access Protocol (TAP) services by submitting 
Astronomical Data Query Language queries to them and retrieving
the results.
<webref url="http://www.ivoa.net/Documents/TAP/">TAP</webref> and
<webref url="http://www.ivoa.net/Documents/latest/ADQL.html">ADQL</webref>
are Virtual Observatory protocols.
</p>

<p>Queries can be submitted in either synchronous or asynchronous mode,
as determined by the <code>sync</code> parameter.
In asynchronous mode, if the query has not been deleted by the time the 
command exits (see the <code>delete</code> parameter),
the result can be picked up at a later stage using the
<ref id="tapresume"><code>tapresume</code></ref> command.
Table uploads are supported, so it is possible (if the service supports
this functionality), to upload a local table to the remote database,
perform a query involving it, such as a join with a remote table of some sort, 
and receive the result.  This powerful facility gives you crossmatches
between local and remote tables.
</p>

<p>This command does not provide any facility for querying the service
for either table or capability metadata, so you will need to know about
the service capabilities and database structure from some other source
(possibly TOPCAT).
</p>

<p><strong>Note:</strong> this command has been introduced at STILTS version
2.3, at which time most available TAP services are quite new and may not
fully conform to the standards, and usage patterns are still settling down.
For this reason you may find that some TAP services do not behave
quite as expected; it is also possible that in future versions the
command behaviour or parameters will change in line with changing
service profiles or in the light of user experience.
</p>

&tapquery-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>tapquery</code>:
<dl>

<dt><verbatim>
stilts tapquery tapurl='http://dc.zah.uni-heidelberg.de/__system__/tap/run/tap'
                adql='SELECT TOP 1000 * FROM ppmxl.main'
                out=ppmxl.fits
</verbatim></dt>
<dd><p>Executes the given ADQL query on the service referenced by the URL
    and writes the result to a FITS file.
    </p></dd>

<dt><verbatim><![CDATA[
stilts tapquery
       tapurl='http://dc.zah.uni-heidelberg.de/__system__/tap/run/tap'
       adql="SELECT *
                FROM twomass.data AS t
                JOIN TAP_UPLOAD.up1 AS s
                ON 1=CONTAINS(POINT('ICRS', t.RAJ2000, t.DEJ2000),
                              CIRCLE('ICRS', s.ra2000, s.dec2000, 5./3600.))"
       nupload=1 upload1=6dfgs_E7.fits ucmd1='select BMAG-RMAG<0'
       maxrec=20000
       ocmd='tablename 2mass_x_6df' omode=topcat
]]></verbatim></dt>
<dd><p>The local table <code>6dfgs_E7</code> is filtered to contain only
    rather blue objects, and the resulting selection is uploaded to the
    TAP server.  A positional crossmatch with 5 arcsec tolerance 
    is then performed on the server between this uploaded table and the
    <code>twomass.data</code> table held by the service.
    The adjusted <code>maxrec</code> parameter ensures that the result
    will not be artificially truncated to shorter than 20000 rows
    (assuming the service limits permit this).
    When the result is received, it is loaded directly into TOPCAT with
    the name "2mass_x_6df".
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tapresume" tocleaf="yes">
<subhead><title><code>tapresume</code>: &tapresume-purpose;</title></subhead>

<p><code>tapresume</code> can resume monitoring and data retrieval 
from an asynchronous Table Access Protocol query which has already
been submitted.
TAP is a Virtual Observatory protocol.
Such a pre-existing query may have been submitted
by the <ref id="tapquery"><code>tapquery</code></ref> command or
by some completely different mechanism.
It essentially does the same job as <code>tapquery</code> but without
the job submission stage.
It waits until the query has completed, and then retrieves the table
result and processes it in accordance with the supplied parameters.
The query may or may not be deleted from the server as part of the operation.
</p>

&tapresume-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>tapresume</code>:
<dl>

<dt><verbatim>
stilts tapresume joburl='http://dc.zah.uni-heidelberg.de/__system__/tap/run/tap/async/d4ENGR'
                 out=result.csv ofmt=csv
</verbatim></dt>
<dd><p>Resumes waiting for the output of a query on a job with ID
    <code>d4ENGR</code> which was previously started on the GAVO TAP server.
    When it has completed the output table will be written as a
    comma-separated value file.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tcat" tocleaf="yes">
<subhead><title><code>tcat</code>: &tcat-purpose;</title></subhead>

<p><code>tcat</code> is a tool for concatenating any number of 
similar tables one after the other.
The tables must be of similar form to each other (same number and
types of columns).  Preprocessing of the tables may be done using
the <code>icmd</code> parameter, which will operate in the same
way on all the input tables.  Table parameters of the output table
will be taken from the first of the input tables.
</p>

<p>Subject to some constraints on the details of the input and output
formats and processing, <code>tcat</code> is capable of joining
an unlimited number of tables together to produce an output table of
unlimited length, without large memory requirements.
</p>

<p>If you have heterogeneous tables, in different formats or
requiring different preprocessing steps from each other before
they can be concatenated, use <code><ref id="tcatn">tcatn</ref></code>
instead.
</p>

&tcat-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>tcat</code>:
<dl>

<dt><verbatim>
stilts tcat ifmt=ascii in=t1.txt in=t2.txt in=t3.txt out=table.txt
</verbatim></dt>
<dd><p>Concatenates the three named ASCII format tables to produce
    an output table.  All three must have compatible numbers and types 
    of columns.
    </p></dd>

<dt><verbatim>
stilts tcat ifmt=ascii in="t1.txt t2.txt t3.txt" out=table.txt
</verbatim></dt>
<dd><p>Has exactly the same effect as the previous example.
    </p></dd>

<dt><verbatim>
stilts tcat ifmt=ascii in=&indirection.char;inlist.lis out=table.txt
</verbatim></dt>
<dd><p>This will have the same effect as the previous two examples if a
    file name "inlist.lis" in the current directory contains three lines,
    "t1.txt", "t2.txt" and "t3.txt".
    </p></dd>

<dt><verbatim>
stilts tcat in=r368776.fits#1 in=r368776#2 in=r368776.fits#3 in=r368776.fits#4
            out=r368776_all.fits
</verbatim></dt>
<dd><p>Concatenates the contents of four tables (the first four extension HDUs)
    from a multi-extension FITS file to produce a single FITS table.
    Many Unix shells (csh, bash) will allow you to list the input files
    using the following shorthand: "<code>in=r368776.fits#{1,2,3,4}</code>".
    </p></dd>

<dt><verbatim>
stilts tcat in=r368776.fits multi=true out=r368776_all.fits
</verbatim></dt>
<dd><p>Concatenates all the tables in the named file together.
    Setting <code>multi=true</code> means that instead of picking the first
    table from each named <code>in</code> table, all tables will be selected.
    So, if the input FITS file in this example has just four table HDUs,
    then this example does exactly the same as the previous one,
    but with less typing.
    The same thing works with multi-TABLE VOTable documents, but most other
    file formats (CSV etc) do not have the facility for storing multiple
    tables in a single file.
    </p></dd>

<dt><verbatim>
stilts tcat in=r368776.fits multi=true out=r368776_all.fits
            icmd=progress seqcol=ID
</verbatim></dt>
<dd><p>Does the same as the previous example with a couple of additions.
    Firstly, progress through each of the input files will be reported
    to the console.
    Secondly, an additional column "ID" will be appended to the output which 
    contains 1 for all the rows from the first input table, 2 for the 
    rows from the second one and so on.
    </p></dd>

<dt><verbatim>
stilts tcat in='rA.csv rB.csv rC.csv' ifmt=csv \
            icmd='keepcols "RA DEC FLUX"' icmd='sorthead 10 FLUX' \
            ocmd='sort FLUX'
</verbatim></dt>
<dd><p>Takes the 10 rows with highest FLUX values from each of three input
    tables (in comma-separated value format) and joins them together to
    produce a 30-row output table.  This is then sorted in FLUX order, 
    and the resulting table is output to the console in text format.
    Only the columns RA, DEC and FLUX are output; any other columns 
    are discarded.  The input tables don't need to have identical forms
    to each other, but each must have at least an RA, DEC and FLUX column.
    </p></dd>

<dt><verbatim>
stilts tcat in=vizier.xml multi=true
            icmd='keepcols "&ucd.prefix;RECORD &ucd.prefix;POS_EQ_RA_MAIN &ucd.prefix;POS_EQ_DEC_MAIN"'
            uloccol=TID out=all.csv
</verbatim></dt>
<dd><p>This processes a VOTable file which may have multiple TABLEs in it,
    but for which each of the tables is known to have columns with the
    UCDs RECORD, POS_EQ_RA_MAIN and POS_EQ_DEC_MAIN (this is typical of
    VOTables retrieved from CDS's VizieR service).
    It retains only those columns from each table and writes the result
    as a single concatenated table to a CSV file.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tcatn" tocleaf="yes">
<subhead><title><code>tcatn</code>: &tcatn-purpose;</title></subhead>

<p><code>tcatn</code> is a tool for concatenating a number of tables 
one after the other.  Each table can be manipulated separately 
prior to the concatenatation.
If you have two tables T1 and T2 which contain similar columns, and you 
want to treat them as a single table, you can use <code>tcatn</code>
to produce a new table whose metadata (row headings etc) comes from T1
and whose data consists of all the rows of T1 followed by all the rows of T2.
</p>

<p>For this concatenation to make sense, each column of T1 must be
compatible with the corresponding column of T2 - they must have 
compatible types and, presumably, meanings.
If this is not the case for the tables that you wish to concatenate,
for instance the columns are in different orders, or the units 
differ between a column in T1 and its opposite number in T2,
you can use the <code>icmd1</code> and/or <code>icmd2</code>
parameters to manipulate the input tables so that the
column sequences are compatible.  See <ref id="tcatn-examples"/> for
some examples.
</p>

<p>If the tables are similar to each other 
(same format, same columns, same preprocessing stages required if any),
you may find it easier to use <code><ref id="tcat">tcat</ref></code> instead.
</p>

&tcatn-summary;

<subsubsect id="tcatn-examples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>tcatn</code>:
<dl>

<dt><verbatim>
stilts tcatn nin=2 in1=obs1.fits in2=obs2.fits out=combined.fits
</verbatim></dt>
<dd><p>Concatenates two similar observation catalogues to form a combined one.
    In this case, both input and output tables are FITS files.
    </p></dd>

<dt><verbatim>
stilts tcatn nin=3 omode=stats in1=obs1.txt ifmt1=ascii
                               in2=obs2.xml ifmt2=votable
                               in3=obs3.fit ifmt3=fits
</verbatim></dt>
<dd><p>Three catalogues with similar forms but in different data formats
    are joined.  Instead of writing the result to an output file, 
    the resulting joined catalogue is examined to calculate
    its statistics, which are written to standard output.
    </p></dd>

<dt><verbatim>
stilts tcatn nin=2 in1=survey.vot.gz ifmt2=csv in2=more_data.csv
             icmd1='addskycoords fk5 galactic RA2000 DEC2000 GLON GLAT' \
             icmd1='keepcols "OBJ_ID GLON GLAT"' \
             icmd2='keepcols "ident gal_long gal_lat"' \
             loccol=FILENAME
             omode=topcat
</verbatim></dt>
<dd><p>In this case we are trying to concatenate results from two tables
    which are quite dissimilar to each other.  In the first place,
    one is a VOTable (no <code>ifmt1</code> parameter is required since
    VOTables can be detected automatically), and the other is a 
    comma-separated-values file (for which the <code>ifmt2=csv</code> 
    parameter must be given).
    In the second place, the column structure of the two tables may be
    quite different.  By pre-processing the two tables using the
    <code>icmd1</code> &amp; <code>icmd2</code> parameters, we produce
    in each case an input table which consists of three columns of
    compatible types and meanings: an integer identifier and floating point
    galactic longitude and latitude coordinates.
    The second table contains such columns to start with,
    but the first table requires an initial step to convert 
    FK5 J2000.0 coordinates to galactic ones.
    <code>tcatn</code> joins the two doctored tables together, to produce
    a table which contains only these three columns, with all the rows
    from both input tables, and sends the result directly 
    to a new or running instance of TOPCAT.
    An additional column named FILENAME is appended to the table
    before sending it; this contains "survey.vot.gz" for all the columns
    from the first table and "more_data.csv" for all the columns from
    the second one.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>


<subsect id="tcopy" tocleaf="yes">
<subhead><title><code>tcopy</code>: &tcopy-purpose;</title></subhead>

<p><code>tcopy</code> is a table copying tool.
It simply copies a table from one place to another, but since
you can specify the input and output formats as desired, it works
as a converter from any of the supported 
<ref id="inFormats" plaintextref="yes">input formats</ref> 
to any of the supported 
<ref id="outFormats" plaintextref="yes">output formats</ref>.
</p>

<p><code>tcopy</code> is just a stripped-down version of
<ref id="tpipe"><code>tpipe</code></ref> - it doesn't do anything
that <code>tpipe</code> can't, but the usage is slightly 
simplified.
It is provided as a drop-in replacement for the old
<code>tablecopy</code> (<code>uk.ac.starlink.table.TableCopy</code>)
tool which was supplied with earlier versions of STIL and TOPCAT - 
it has the same arguments and behaviour as <code>tablecopy</code>, 
but is implemented somewhat differently
and will in some cases be more efficient.
</p>

&tcopy-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>tcopy</code> in use:
<dl>

<dt><verbatim>
stilts tcopy stars.fits stars.xml
</verbatim></dt>
<dd><p>Copies a FITS table to a VOTable.
    Since no input format is specified, the format is automatically 
    detected (FITS is one of the formats for which this is possible).
    Since no output format is specified, the <code>stars.xml</code>
    filename is examined to make a guess at the kind of output to write:
    the <code>.xml</code> ending is taken to mean a TABLEDATA-encoded
    VOTable.
    </p></dd>

<dt><verbatim>
stilts tcopy stars.fits stars.xml ifmt=fits ofmt=votable
</verbatim></dt>
<dd><p>Does the same as the previous example, but the input and output
    formats have been specified explicitly.
    </p></dd>

<dt><verbatim>
stilts tcopy ofmt=text http://remote.host/data/vizer.xml.gz#4 -
</verbatim></dt>
<dd><p>Prints the contents of a remote, compressed VOTable to the terminal in 
    a human-readable form.  The <code>#4</code> at the end of the URL
    indicates that the data from the fifth <code>TABLE</code> element
    in the remote document are to be used.  The gzip compression of
    the table is taken care of automatically.
    </p></dd>

<dt><verbatim>
stilts tcopy ifmt=csv ofmt=latex spec.csv
</verbatim></dt>
<dd><p>Converts a comma-separated values file to a LaTeX table environment,
    writing the result to standard output.
    </p></dd>

<dt><verbatim>
stilts -classpath /usr/local/jars/pg73jdbc3.jar \
       -Djdbc.drivers=org.postgresql.Driver \
       tcopy in="jdbc:postgresql://localhost/imsim#SELECT ra, dec, Imag FROM dqc" \
             ofmt=fits wfslist.cat
</verbatim></dt>
<dd><p>Makes an SQL query on a PostgreSQL database and writes the
    results to a FITS file.
    The whole command is shown here, to show that the 
    classpath is augmented to include the PostgreSQL
    driver class, and the driver class is named using the 
    <code>jdbc.drivers</code> system property.
    As you can see, using SQL from Java is a bit fiddly, 
    and there are other ways to perform this
    setup than on the command line - see <ref id="jdbcConfig"/>
    and <code><ref id="tpipe">tpipe</ref></code>'s 
    <code>omode=tosql</code> output mode.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tcube" tocleaf="yes">
<subhead><title><code>tcube</code>: &tcube-purpose;</title></subhead>

<p><code>tcube</code> constructs an N-dimensional histogram, or density map, 
from N columns of an input table, and writes it out as an
N-dimensional data cube.  The parameters you supply define which N
numeric columns of the input table you want to use and the dimensions 
(bounds and pixel sizes) of the output grid.  
Each table row then defines a point in N-dimensional space.  
The program goes through each row, and if the point that row
defines falls within the bounds of the output grid you have defined,
increments the value associated with the corresponding pixel.  
The resulting N-dimensional array, whose pixel values represent a 
count of the rows associated with that region of the N-dimensional space,
is then written out as a FITS file.
In one dimension, this gives you a normal histogram of a given variable.
In two dimensions it might typically be used to plot the density on
the sky of objects from a catalogue.
</p>

<p>As with some of the other generic table commands,
you can perform extensive pre-processing on the input table by
use of the <code>icmd</code> parameter before the actual cube 
counts are calculated.
</p>

&tcube-summary;

<subsubsect id="tcubeExamples">
<subhead><title>Examples</title></subhead>

<p>
<dl>

<dt><verbatim>
stilts tcube in=2QZ_6QZ_pubcat.fits out=ccm.fits \
             cols='Bj_R U_Bj Bj' binsizes='0.05 0.05 0.5' bounds='-2:1 -3:2 :'
</verbatim></dt>
<dd><p>Calculates a 3-dimensional colour-colour-magnitude grid from 
    three existing columns in a table.  The bin (pixel) sizes are specified.
    The data bounds are specified explicitly for the (first two) 
    colour dimensions, but for the (third) magnitude dimension it is 
    determined from the minimum and maximum values the data in 
    that column of the table.
    The output is a three-dimensional FITS cube.
    </p></dd>

<dt><verbatim>
stilts tcube in=iras_psc.vot out=iras_psc_map.fits \
             icmd='addskycoords fk5 galactic ra dec glat glon' \
             cols='glat glon' nbins='400 200'
</verbatim></dt>
<dd><p>Calculates a map of object densities in galactic coordinates from
    a catalogue of IRAS point sources.  The output is a two-dimensional
    FITS image representing the sky in galactic coordinates.
    Bounds are determined automatically from the data, and the number of
    pixels in each dimension (400 in latitude and 200 in longitude) are
    specified, which means that the pixel sizes don't have to be.
    Since the input table contains sky positions in equatorial 
    coordinates rather than galactic ones, the <code>addskycoords</code>
    filter is used to preprocess the data before the cube generation
    step (see <ref id="filterSteps"/>).
    </p></dd>

</dl>
</p>

</subsubsect>
</subsect>

<subsect id="tloop" tocleaf="yes">
<subhead><title><code>tloop</code>: &tloop-purpose;</title></subhead>

<p><code>tloop</code> generates a one-column table where the values in
the column are effectively populated from a for loop
(start, end, step).
This may be useful as it is, or it can be postprocessed with
<code>ocmd</code> parameters to add more columns etc.
</p>

&tloop-summary;

<subsubsect id="tloopExamples">
<subhead><title>Examples</title></subhead>

<p>
<dl>

<dt><verbatim>
stilts tloop COUNTER 0 1000
</verbatim></dt>
<dd><p>Generates a table with a single column, named <code>COUNTER</code>,
    and a thousand rows.
    The value in the first row is 0 and in the last row is 999.
    The table is written to standard output.
    </p></dd>

<dt><verbatim>
stilts tloop time 0 10 0.25 out=times.csv
</verbatim></dt>
<dd><p>Generates a table with one column <code>time</code> counting from 
    0 to 9.75 in steps of 0.25.  Output is to a CSV file.
    The parameters here are specified in order, but could equivalently
    be given by name:
    "<code>stilts tloop var=time start=0 end=10 step=0.26</code>".
    </p></dd>

<dt><verbatim>
stilts tloop x start=1 end=11 ocmd='addcol x2 x*x' ocmd='addcol x3 x*x*x'
             ocmd='stats name sum'
</verbatim></dt>
<dd><p>Generates a table with a column <code>x</code> running from 1 to 10
    inclusive.  The <code>addcol</code> filters then append two further
    columns, giving the squares and cubes of these values respectively,
    giving a table of 10 rows and 3 columns.
    Finally this table is piped through a <code>stats</code> filter to
    calculate the sums of the values, squares and cubes in this range.
    </p></dd>
</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tjoin" tocleaf="yes">
<subhead><title><code>tjoin</code>: &tjoin-purpose;</title></subhead>

<p><code>tjoin</code> performs a trivial side-by-side join of multiple tables.
The N'th row of the output table consists of the N'th row of the
first input table, followed by the N'th row of the second input table, ...
and so on.  It is suitable if you want to amalgamate two or more 
tables whose row orderings correspond exactly to each other.
</p>

<p>For the (more usual) case in which the rows of the tables to be 
joined are not already in the right order, use one of the
<ref id="match" plaintextref="yes">crossmatching commands</ref>.
</p>

&tjoin-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of using <code>tjoin</code>
<dl>

<dt><verbatim>
stilts tjoin nin=2 in1=positions.fit in2=fluxes.fits out=combined.fits
</verbatim></dt>
<dd><p>Takes two input FITS files and sticks them together side by side,
    writing the result as a third FITS file.  The output will have the
    same number of rows as each of the input catalogues, and a number
    of columns equal to the sum of those in the two input catalogues.
</p></dd>

<dt><verbatim>
stilts tjoin nin=3 fixcols=all \
             ifmt1=ascii in1=t1.txt suffix1=_T1 \
             ifmt2=ascii in2=t2.txt suffix2=_T2 \
             ifmt3=ascii in3=t3.txt suffix3=_T3 \
             ocmd='select FLAG_T1==0' \
             omode=stats
</verbatim></dt>
<dd><p>This joins three ascii tables together.  Each column of the output
    table is renamed by appending a string to it ("_T1" for the first 
    table, "_T2" for the second...).
    Only those rows of the output for which the FLAG column in the first
    input table, and hence the FLAG_T1 column in the output table,
    have the value zero are selected.  Statistics are calculated for
    all the columns of these selected rows, and written to the output.
</p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tmatch1" tocleaf="yes">
<subhead><title><code>tmatch1</code>: &tmatch1-purpose;</title></subhead>

<p><code>tmatch1</code> performs efficient and flexible 
crossmatching between the rows of a single table.
It can match rows on the basis of their relative position in the sky,
or alternatively using many other criteria such as separation in 
in some isotropic or anisotropic Cartesian space,
identity of a key value, or some combination of these;
the full range of match criteria is dicussed in <ref id="MatchEngine"/>.
</p>

<p>The basic task performed by the intra-table matcher is to identify
groups of rows within the table which match each other.
See <ref id="matchGroup"/> for an explanation of exactly what 
consitutes a match group.
The result of identifying these groups is expressed as an output table 
in one of a variety of ways, specified by the <code>action</code> parameter.
These options include marking group membership in added columns 
and eliminating some or all rows which form part of a match group.
</p>

&tmatch1-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of using <code>tmatch1</code>
<dl>

<dt><verbatim>
stilts tmatch1 matcher=sky values="RA2000 DE2000" params=20 \
               action=keep0 in=crowded.vot out=sparse.vot
</verbatim></dt>
<dd><p>Copies an input catalogue "crowded.vot" to an output catalogue
    "sparse.vot", but omitting any objects (rows) which are within 20 arcsec
    of other objects.  The output catalogue will contain no near neighbours.
    </p></dd>

<dt><verbatim>
stilts tmatch1 matcher=skyerr values="RA2000 DE2000 RADIUS*4" params=40 \
               action=keep0 in=crowded.vot out=sparse.vot
</verbatim></dt>
<dd><p>This is similar to the previous example, but uses the 
    <code>skyerr</code> matcher which determines the proximity threshold
    on a row-by-row basis from values in the table - in this case 4 times
    the value of the RADIUS column (this value must be in arc seconds). 
    The <code>params=40</code> value does not affect the result, but it
    gives the algorithm an idea of the rough scale of object separation.
    </p></dd>

<dt><verbatim>
stilts tmatch1 matcher=3d values="XPIX YPIX ZPIX" params=10 action=identify \
               in=state.fit ocmd='select GroupSize&gt;3' out=groups3+.fit
</verbatim></dt>
<dd><p>Uses the "3d" matcher to identify groups of objects
    in terms of their proximity in a 3-dimensional Cartesian space,
    with positions given by the XPIX, YPIX and ZPIX columns in the input table.
    The <code>action=identify</code> parameter means that the input table
    is written out with the same rows, but with additional columns indicating
    which rows are associated with each other.  One of these columns,
    "GroupSize" gives the number of objects in each group.  
    The postprocessing filter <code>ocmd='select GroupSize&gt;3'</code>
    selects only those rows which are part of groups of three objects or
    larger; singletons and pairs are discarded before writing the output file.
    </p></dd>

<dt><verbatim>
stilts tmatch1 matcher=sky values="ra dec" params=3 action=wide2 \
               ocmd='keepcols "id_1 ra_1 dec_1 id_2 ra_2 dec_2"'
               in=galaxy.fits out=binaries.txt ofmt=ascii
</verbatim></dt>
<dd><p>Identifies pairs of objects within 3 arcsec of each other from an
    input catalogue.  Singles, and groups of three or more, will be 
    discarded.  The output table generated is a double-width version of
    the input table with pairs of objects next to each other on the same row.
    Here, the <code>ocmd</code> post-processing filter discards all of the
    columns except the identifiers and sky positions for each object.
    The output is to a text file.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tmatch2" tocleaf="yes">
<subhead><title><code>tmatch2</code>: &tmatch2-purpose;</title></subhead>

<p><code>tmatch2</code> is an efficient and highly configurable 
tool for crossmatching pairs of tables.
It can match rows between tables on the basis of their relative position
in the sky, or alternatively using many other criteria such as 
separation in some isotropic or anisotropic Cartesian space, 
identity of a key value, or some combination of these;
the full range of match criteria is discussed in <ref id="MatchEngine"/>.
You can choose whether you want to identify all the matches or
only the closest,
and what form the output table takes, for instance matched rows only,
or all rows from one or both tables, or only the unmatched rows.
</p>

<p>If you simply want to match two tables based on sky position with
a fixed maximum separation, you may find the
<ref id="tskymatch2"><code>tskymatch2</code></ref> command easier to use.
</p>

<p><strong>Note:</strong> the <code>duptag1</code> and <code>duptag2</code>
parameters have been replaced at version 1.4 by 
<code>suffix1</code> and <code>suffix2</code>
for consistency with other table join tasks.
</p>

&tmatch2-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of using <code>tmatch2</code>
<dl>

<dt><verbatim>
stilts tmatch2 in1=obs_v.xml in2=obs_i.xml out=obs_iv.xml \
               matcher=sky values1="ra dec" values2="ra dec" params="2"
</verbatim></dt>
<dd><p>Takes two input catalogues (VOTables), one with observations in
    the V band and the other in the I band, and performs a match
    to find objects within 2 arcseconds of each other.
    The result is a new table containing only rows where a match was found.
    </p></dd>

<dt><verbatim>
stilts tmatch2 survey.fits ifmt2=csv mycat.csv \
               icmd1='addskycoords fk4 fk5 RA1950 DEC1950 RA2000 DEC2000' \
               matcher=skyerr \
               params=10 values1="RA2000 DEC2000 POS_ERR"  values2="RA DEC 0" \
               join=2not1 omode=count
</verbatim></dt>
<dd><p>Here a comma-separated-values file is being compared with a FITS
    catalogue representing some survey results.
    Positions in the survey catalogue use the FK4 B1950.0 system,
    and so a preprocessing step is inserted to create new position columns 
    in the first input table using the FK5 J2000.0 system,
    which is what the other input table uses.
    The survey catalogue contains a POS_ERR column which gives the positional
    uncertainty of its entries, so the <code>skyerr</code> matcher is
    used, which takes account of this; the third entry in the 
    <code>values1</code> parameter is the POS_ERR column (in arcsec).
    Since the second input table has no positional uncertainty information,
    0 is used as the third entry in <code>values2</code>.
    The <code>params</code> gives a rough idea of the scale of the object
    separations, but its value does not affect the result.
    The join type is <code>2not1</code>, which means the output table
    will only contain those entries which are in the second input table
    but not in the first one.
    The output table is not stored, but the number of rows it contains
    (the number of objects represented in the CSV file but not the survey)
    is written to the screen.
    </p></dd>

<dt><verbatim>
stilts tmatch2 ifmt1=ascii ifmt2=ascii in1=cat-a.txt in2=cat-b.txt \
               matcher=2d values1='X Y' values2='X Y' params=5 join=1and2 \
               suffix1=_a suffix2=_b \
               ocmd='addcol XDIFF X_a-X_b; addcol YDIFF Y_a-Y_b' \
               ocmd'keepcols "XDIFF YDIFF"' omode=stats
</verbatim></dt>
<dd><p>Two ASCII-format catalogues are matched, where rows are
    considered to match if their X,Y positions are within 5 units of
    each other in some Cartesian space.
    The result of the matching operation is a table of all the matched rows,
    containing columns named X_a, Y_a, X_b and Y_b (along with any others
    in the input tables) - the <code>suffix*</code> parameters describe 
    how the input X and Y columns are to be renamed to avoid duplicate
    column names in the output table.
    To this result are added two new columns, 
    representing the X and Y positional
    difference between the rows from one input table and those from the other.
    The <code>keepcols</code> filter then throws all the other columns away,
    retaining only these difference columns.
    The final two-column table is not stored anywhere, 
    but (<code>omode=stats</code>) 
    statistics including mean and standard deviation 
    are calculated on its columns and displayed to the screen.
    Having done all this, you can examine the average X and Y differences
    between the two input tables for matched rows, and if they differ
    significantly from zero, you can conclude that there is a systematic
    error between the positions in the two input files.
    </p></dd>

<dt><verbatim>
stilts tmatch2 in1=mgc.fits in2=6dfgs.xml join=1and2 find=all \
               matcher=sky+1d params='3 0.5' \
               values1='ra dec bmag' values2='RA2000 DEC2000 B_MAG" \
               out=pairs.fits
</verbatim></dt>
<dd><p>This performs a match with a matcher that combines <code>sky</code>
    and <code>1d</code> match criteria.  This means that the only
    rows which match are those which are
    <em>both</em> within 3 arcsec of each other on the sky
    <em>and</em> and within 0.5 blue magnitudes.
    Note that for both the <code>params</code> and the 
    <code>values1</code> and <code>values2</code> parameters,
    the items for the <code>sky</code> matcher (RA and DEC) 
    are listed first,
    followed by those for the <code>1d</code> matcher (in this case,
    blue magnitude).
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tmatchn" tocleaf="yes">
<subhead><title><code>tmatchn</code>: &tmatchn-purpose;</title></subhead>

<p><code>tmatchn</code> performs efficient and flexible crossmatching
between multiple tables.  
It can match rows on the basis of their relative position in the sky,
or alternatively using many other criteria such as separation in
in some isotropic or anisotropic Cartesian space,
identity of a key value, or some combination of these;
the full range of match criteria is dicussed in <ref id="MatchEngine"/>.
</p>

<p>Since the match criteria define what counts as a match between two
objects, it is not immediately obvious what is meant by a multi-table
match.  In fact the command can work in one of two distinct modes,
controlled by the <code>multimode</code> parameter.
In <code>pairs</code> mode, one table (by default the first input table)
is designated the reference table, and pair matches between each of the
other tables and that one are identified.
In <code>group</code> mode groups of objects from all the input tables are
identified, as discussed in <ref id="matchGroup"/>.
Currently, in both cases an output matched row cannot contain more
than one object from each input table.
Options for output of multiple rows per input table per match may be 
forthcoming in future releases if there is demand.
</p>

<p><code>tmatchn</code> is intended for use with more than two input tables -
see <ref id="tmatch1"><code>tmatch1</code></ref>
and <ref id="tmatch2"><code>tmatch2</code></ref>
for 1- and 2-table crossmatching respectively.
</p>

&tmatchn-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of using <code>tmatchn</code>
<dl>

<dt><verbatim>
stilts tmatchn multimode=pairs nin=4 matcher=sky params=5 \
       in1=transients.txt ifmt1=ascii values1='alpha delta' \
       in2=2mass_virgo.fits values2='ra2000 dec2000' \
       in3=sdss_virgo.fits values3='ra dec' \
       in4=first_virgo.fits values4='pos_eq_ra pos_eq_dec' \
       out=matches.xml ofmt=votable-binary
</verbatim></dt>
<dd><p>Compares a text-format table "transients.txt" against each of 
    three other catalogues covering the same region of sky, and outputs
    a table which contains a row for each row of "transients.txt" which
    matches (is within 5 arcsec) of an object in any of the other tables.
    </p></dd>

<dt><verbatim>
stilts tmatchn multimode=pairs nin=4 matcher=sky params=5 \
       in1=transients.txt ifmt1=ascii suffix1='_t' values1='alpha delta' \
       in2=2mass_virgo.fits suffix2='_2mass' values2='ra2000 dec2000' \
       in3=sdss_virgo.fits  suffix3='_sdss'  values3='ra dec' \
       in4=first_virgo.fits suffix4='_first' values4='pos_eq_ra pos_eq_dec' \
       fixcols=all join1=all \
       ocmd='keepcols "*_t designation_2mass SDSSName_sdss id_field_first"' \
       out=matches.xml ofmt=votable-binary
</verbatim></dt>
<dd><p>Similar to the previous example but with some doctoring of what the
    output table will look like.  The <code>fixcols=all</code> and 
    <code>suffixN</code> assignments mean that all the columns from the
    input tables will be renamed for output by adding the given suffixes.
    The <code>keepcols</code> filter applied to the output table throws out
    all the columns except the ones from the reference table (<code>*_t</code>)
    and one column from each of the other table giving object identifiers.
    This output table will probably be easier to read (though contain less
    information) than that from the previous example).
    Additionally, the <code>join1=all</code> assignment means that the output
    table will have one row for each row of the reference table 
    (transients.txt), even if no matches are found for it.
    </p></dd>

<dt><verbatim>
stilts tmatchn multimode=group nin=3 matcher=skyerr params=8 \
       in1=Hband.fits values='RA DEC SEEING*2' \
       in2=Jband.fits values='RA DEC SEEING*2' \
       in3=Kband.fits values='RA DEC SEEING*2' \
       omode=topcat
</verbatim></dt>
<dd><p>Performs a group-mode match.  There is no reference table, so that
    an output row will result for each object which is represented in any
    two of the input catalogues. 
    The match takes account of per-object errors equivalent to twice the
    recorded seeing, which is in the region of 8 arcsec.
    Note that this may not operate as expected if the catalogues contain
    multiple distinct objects too close (in comparison to the declared
    separation) to each other.
    The resulting matched table is sent directly to 
    <webref url="http://www.starlink.ac.uk/topcat/">TOPCAT</webref> 
    (if available).
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="tmulti" tocleaf="yes">
<subhead><title><code>tmulti</code>: &tmulti-purpose;</title></subhead>

<p><code>tmulti</code> takes multiple input tables and writes them as
separate tables to a single output container file.
The container file must be of some format which can contain more than
one table, for instance a FITS file (which can contain multiple extensions)
or a VOTable document (which can contain multiple TABLE elements).
Filtering may be performed on the tables prior to writing them.
It is not necessary that all the tables are similar 
(e.g. that they all have the same type and number of columns),
but the same processing commands will be applied to all of them.
For more individual control, use the 
<ref id="tmultin"><code>tmultin</code></ref> task.
</p>

&tmulti-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of using <code>tmulti</code>:
<dl>

<dt><verbatim>
stilts tmulti ifmt=ascii in=t1.txt in=t2.txt in=t3.txt
              ofmt=fits out=tables.fits
</verbatim></dt>
<dd><p>Takes the three named ASCII format tables and writes them into a
    multi-extension FITS file, as three separate BINTABLE HDUs.
    These tables do not need to be of the same shape or otherwise similar.
    </p></dd>

<dt><verbatim>
stilts tmulti ifmt=ascii in="t1.txt t2.txt t3.txt"
              ofmt=fits out=tables.fits
</verbatim></dt>
<dd><p>Does exactly the same as the previous example.
    </p></dd>

<dt><verbatim>
stilts tmulti ifmt=ascii in=&indirection.char;inlist.lis
              ofmt=fits out=tables.fits
</verbatim></dt>
<dd><p>This will have the same effect as the previous two examples if a
    file name "inlist.lis" in the current directory contains three lines,
    "t1.txt", "t2.txt" and "t3.txt".
    </p></dd>

<dt><verbatim>
stilts tmulti in=extract.fits multi=true out=extract.vot
</verbatim></dt>
<dd><p>This takes the table extensions from a multi-extension FITS file
    and writes them out as a multi-TABLE VOTable document.
    The <code>multi=true</code> setting is required, since this means
    that all the tables from the input file are used as input;
    if it was set false, only the first table HDU from the input file
    would be used.
    </p></dd>

<dt><verbatim>
stilts tmulti in=extract.fits multi=true out=extract.vot
              icmd='badval -999 *MAG'
</verbatim></dt>
<dd><p>Does the same as the previous example, but additionally replaces
    with a blank value occurrences of the value "-999" in columns
    whose name ends with "MAG" in any of the input tables before
    copying them.
    </p></dd>

</dl>
</p>
</subsubsect>

</subsect>

<subsect id="tmultin" tocleaf="yes">
<subhead><title><code>tmultin</code>: &tmultin-purpose;</title></subhead>

<p><code>tmultin</code> takes multiple input tables and writes them
to a single output container file.  
The container file must be of some format which can contain more than
one table, for instance a FITS file (which can contain multiple extensions)
or a VOTable document (which can contain multiple TABLE elements).
Individual filtering may be performed on the tables prior to writing them,
and their formats may be specified individually.
If you want to apply the same pre-processing to all the input tables,
you may find the 
<ref id="tmulti"><code>tmulti</code></ref> command more convenient.
</p>

&tmultin-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of using <code>tmultin</code>:
<dl>

<dt><verbatim>
stilts tmultin nin=3 in1=t1.xml ifmt1=votable
                     in2=t2.fit ifmt2=fits
                     in3=t3.txt ifmt3=ascii
                     out=tables.fits
</verbatim></dt>
<dd><p>Takes three input tables in different formats, and
writes them out as a single multi-extension FITS file.
</p></dd>

<dt><verbatim>
stilts tmultin nin=3 in1=data.fits icmd1='every 10;   head 100'
                     in2=data.fits icmd2='every 100;  head 100'
                     in3=data.fits icmd3='every 1000; head 100'
                     out=samples.xml ofmt=votable
</verbatim></dt>
<dd><p>Writes three hundred-row tables as separate TABLE elements in
a single output VOTable document.
Each of the output tables is a sample from the same input table,
but sampled differently; the first is every tenth row, the second
every hundredth, and the third every thousandth.
</p></dd>

</dl>
</p>
</subsubsect>

</subsect>

<subsect id="tpipe" tocleaf="yes">
<subhead><title><code>tpipe</code>: &tpipe-purpose;</title></subhead>

<p><code>tpipe</code> performs all kinds of general purpose manipulations
which take one table as input.
It is extremely flexible, and can do the following things
amongst others:
<ul>
<li>calculate statistics</li>
<li>display metadata</li>
<li>select rows in various ways, including algebraically</li>
<li>define new columns as algebraic functions of old ones</li>
<li>delete or rearrange columns</li>
<li>sort rows</li>
<li>convert between table formats</li>
</ul>
and combine these operations.
You can think of it as a supercharged table copying tool.
</p>

<p>The basic operation of <code>tpipe</code> is that it reads an 
input table, performs zero or more processing steps on it, 
and then does something with the output.  There are therefore
three classes of things you need to tell it when it runs:
<dl>
<dt>Input table location</dt>
<dd><p>Specified by the <code>in</code>, <code>ifmt</code> and
    <code>istream</code> parameters.
    </p></dd>

<dt>Processing steps</dt>
<dd><p>Either provide a string giving steps as the value
    of one or more <code>cmd</code> parameters, or the name of a file
    containing the steps using the <code>script</code> parameter.
    The steps that you can perform are described in 
    <ref id="filterSteps"/>.
    </p></dd>

<dt>Output table destination</dt>
<dd><p>What happens to the output table is determined by the value of
    the <code>omode</code> parameter.  
    By default, <code>omode=out</code>,
    in which case the table is written to a new table file in a format
    determined by <code>ofmt</code>.  However, you can do other things
    with the result such as
    calculate the per-column statistics (<code>omode=stats</code>),
    view only the table and column metadata (<code>omode=meta</code>),
    display it directly in TOPCAT (<code>omode=topcat</code>) etc.
    </p></dd>
</dl>
See <ref id="pipes"/> for a more detailed explanation of these ideas.
</p>

<p>The parameters mentioned above are listed in detail in the next section.
</p>

&tpipe-summary;

<subsubsect id="tpipeExamples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples of <code>tpipe</code> in use with explanations
of what's going on.  For simplicity these examples assume that you have the 
<code>stilts</code> script installed and are using a Unix-like shell;
see <ref id="invoke"/> for an explanation of how to invoke the command
if you just have the Java classes.
</p>

<p>
<dl>
<dt><verbatim>
stilts tpipe cat.fits
</verbatim></dt>
<dd><p>Writes a FITS table to standard output in human-readable form.
    Since no mode specifier is given, <code>omode=out</code> is assumed,
    and output is to standard output in <code>text</code> format.
    </p></dd>

<dt><verbatim>
stilts tpipe cmd='head 5' cat.fits.gz
</verbatim></dt>
<dd><p>Does the same as the last example, but with one processing step:
    only the first five rows of the table are output.  In this case,
    the input file is compressed using gzip - this is automatically 
    detected.
    </p></dd>

<dt><verbatim>
stilts tpipe ifmt=csv xxx.csv \
             cmd='keepcols "index ra dec"' \
             omode=out ofmt=fits xxx.fits
</verbatim></dt>
<dd><p>Reads from a comma-separated values file, writes to a FITS file,
    and discards all columns in the input table apart from INDEX, RA and DEC.
    Note the quoting in the <code>cmd</code> argument: the outer quotes
    are so that the argument of the <code>cmd</code> parameter itself
    (<code>keepcols "index ra dec"</code>)
    is not split up by spaces (to protect it from the shell), 
    and the inner quotes are to keep the 
    <code>colid-list</code> argument of the 
    <code>keepcols</code> command together.
    </p></dd>

<dt><verbatim><![CDATA[
stilts tpipe ifmt=votable \
             cmd='addcol IV_SUM "(IMAG+VMAG)"' \
             cmd='addcol IV_DIFF "(IMAG-VMAG)"' \
             cmd='delcols "IMAG VMAG"' \
             omode=out ofmt=votable \
       < tab1.vot \
       > tab2.vot
]]></verbatim></dt>
<dd><p>Replaces two columns by their sum and difference in a VOTable.
    Since neither the <code>in</code> nor <code>out</code> parameters
    have been specified, the input and output are actually byte 
    streams on standard input and standard output of the 
    <code>tpipe</code> command in this case.
    The processing steps first add a column representing the sum,
    then add a column representing the difference, then delete the 
    original columns.
    </p></dd>

<dt><verbatim>
stilts tpipe cmd='addskycoords -inunit sex fk5 gal \
                               RA2000 DEC2000 GAL_LONG GAL_LAT' \
             6dfgs.fits 6dfgs+gal.fits
</verbatim></dt>
<dd><p>Adds columns giving galactic coordinates to a table.
    Both input and output tables are FITS files.
    The galactic coordinates, stored in new columns named GAL_LONG and
    GAL_LAT, are calculated from FK5 J2000.0 coordinates
    given in the existing columns named RA2000 and DEC2000.
    The input (FK5) coordinates are represented as sexagesimal strings
    (hh:mm:ss, dd:mm:ss), and the output ones are numeric degrees.
    </p></dd>

<dt><verbatim>
stilts -disk tpipe 2dfgrs_ngp.fits \
                   cmd='keepcols "SEQNUM AREA ECCENT"' \
                   cmd='sort -down AREA' \
                   cmd='head 20'
</verbatim></dt>
<dd><p>Displays selected columns for the 20 rows with largest values in
    the AREA column of a FITS table.  First the columns of interest 
    are selected, then the rows are sorted into descending order by 
    the value of the AREA column, then the first 20 rows of the resulting
    table are selected, and the result is written to standard output.
    Since a sort is being performed here, it's not possible to do all
    the processing a row at a time, since all the AREA values
    must be available for comparison during the sort.
    Two things are done here to accommodate this fact: first the
    column selection is done before the sort, so that it's only a 3-column
    table which needs to be available for random access,
    reducing the temporary storage required.
    Secondly the <code>-disk</code> flag is supplied, which means that
    temporary disk files rather than memory 
    will be used for caching table data.
</p></dd>

<dt><verbatim>
stilts tpipe 2dfgrs_ngp.fits \
             cmd='keepcols "SEQNUM AREA ECCENT"' \
             cmd='sorthead -down 20 AREA'
</verbatim></dt>
<dd><p>Has exactly the same effect as the previous example.
    However, the algorithm used by the <code>sorthead</code> filter is
    in most cases faster and cheaper on memory (only 20 rows ever have
    to be stored in this case), so this is generally a better approach
    than combining the <code>sort</code> and <code>head</code> filters.
    </p></dd>

<dt><verbatim>
stilts tpipe omode=meta cmd=&indirection.char;commands.lis http://archive.org/data/survey.vot.Z
</verbatim></dt>
<dd><p>Outputs column and table metadata about a table.
    In this case the table is a compressed VOTable at the end of a URL.
    Processing is performed according to the commands contained in a
    file named "commands.lis" in the current directory.
    </p></dd>

<dt><verbatim>
stilts tpipe in=survey.fits 
             cmd='select "skyDistanceDegrees(hmsToDegrees(RA),dmsToDegrees(DEC), \
                                             hmsToDegrees(2,28,11),dmsToDegrees(-6,49,45) \
                          &lt; 5./60."' \
             omode=count
</verbatim></dt>
<dd><p>Counts the number of rows within a given 5 arcmin 
    cone of sky in a FITS table.
    The <code>skyDistanceDegrees</code> function is an expression which
    calculates the distance between the position specified in a row
    (as given by its RA and DEC columns) and a given point on the sky
    (here, 02:28:11,-06:49:45).
    Since <code>skyDistanceDegrees</code>'s arguments and return value are in
    decimal degrees, some conversions are required: the RA and DEC columns
    are sexagesimal strings which are converted using the
    <code>hmsToDegrees</code> and <code>dmsToDegrees</code> functions 
    respectively.  Different versions of these functions (ones which take
    numeric arguments) are used to convert the coordinates of the fixed
    point to degrees. 
    The result is compared to a constant expression representing 5 arcminutes
    in degrees.
    Any rows of the input table for which this comparison
    is true are included in the output. 
    An alternative function, <code>skyDistanceRadians</code> which works
    in radians, is also available.
    These functions and constants used here are described in detail in
    <ref id="uk.ac.starlink.ttools.func.CoordsDegrees"/> and
    <ref id="uk.ac.starlink.ttools.func.CoordsRadians"/>.
    </p></dd>

<dt><verbatim><![CDATA[
stilts tpipe ifmt=ascii survey.txt \
             cmd='select "OBJTYPE == 3 && Z > 0.15"' \
             cmd='keepcols "IMAG JMAG KMAG"' \
             omode=stats
]]></verbatim></dt>
<dd><p>Calculate statistics on the I, J and K magnitudes of selected
    objects from a catalogue.  Only those rows with the given OBJTYPE
    and in the given Z range are included.  The minimum, maximum, 
    mean, standard deviation etc of the IMAG, JMAG and KMAG columns
    will be written to standard output.
    </p></dd>

<dt><verbatim>
stilts -classpath lib/drivers/mysql-connector-java.jar \
       -Djdbc.drivers=com.mysql.jdbc.Driver \
       tpipe in=x.fits cmd="explodeall" omode=tosql \
             protocol=mysql host=localhost db=ASTRO1 dbtable=TABLEX \
             write=dropcreate user=mbt
</verbatim></dt>
<dd><p>Writes a FITS table to an SQL table, converting array-valued columns
    to scalar ones.
    To make the SQL connection work properly, the classpath is augmented
    to include the path of the MySQL JDBC driver and the
    <code>jdbc.drivers</code> system property is set to the JDBC driver
    class name.  The output will be written as a new table named TABLEX
    in the MySQL database named ASTRO1 on a MySQL server on the
    local host.  The password, if required, will be prompted for,
    as would any of the other required parameters if they had not been
    given on the command line.
    Any existing table in ASTRO1 with the name TABLEX is overwritten.
    The only processing done here is by the <code>explodeall</code> command,
    which takes any columns which have fixed-size array values and
    replaces them in the output with multiple scalar columns.
    </p></dd>

<dt><verbatim>
java -classpath stilts.jar:lib/drivers/mysql-connector-java.jar
     -Djdbc.drivers=com.mysql.jdbc.Driver \
     uk.ac.starlink.ttools.Stilts \
     tpipe in=x.fits \
           cmd=explodeall \
           omode=out \
           out="jdbc:mysql://localhost/ASTRO1?user=mbt#TABLEX"
</verbatim></dt>
<dd><p>This does exactly the same as the previous example, but achieves it
   in a slightly different way.  In the first place, java is invoked 
   directly with the necessary flags rather than getting the 
   <code>stilts</code> script to do it.  Note that you cannot use java's
   <code>-jar</code> flag in this case, because doing it like that
   would not permit access to the additional classes that contain
   the JDBC driver.
   In the second place we use <code>omode=out</code> rather than 
   <code>omode=tosql</code>.  For this we need to supply an <code>out</code>
   value which encodes the information about the SQL connection and
   table in a special URL-like format.  As you can see, this is a bit
   arcane, which is why the <code>omode=tosql</code> mode can be a help.
   </p></dd>

<dt><verbatim>
stilts tpipe USNOB.FITS cmd='every 1000000' omode=stats
</verbatim></dt>
<dd><p>Calculates statistics on a selection of the rows in a catalogue,
    and writes the result to the terminal.
    In this example, every millionth row is sampled.
</p></dd>

</dl>
</p>
</subsubsect>

</subsect>


<subsect id="tskymatch2" tocleaf="yes">
<subhead><title><code>tskymatch2</code>: &tskymatch2-purpose;</title></subhead>

<p><code>tskymatch2</code> performs a crossmatch of two tables based
on the proximity of sky positions.
You specify the columns or expressions giving 
right ascension and declination in degrees for each input table, 
and a maximum permissible separation in arcseconds, and the resulting
joined table is output.
</p>

<p>If you omit expressions for the RA and Dec, an attempt is made to
identify the columns to use using column
Unified Content Descriptors 
(<webref url="http://www.ivoa.net/Documents/latest/UCD.html">UCD</webref>s)
or names.  First columns bearing appropriate UCD1 or UCD1+ values
(<code>POS_EQ_RA</code>, <code>POS_EQ_RA_MAIN</code>, 
<code>pos.eq.ra</code> or <code>pos.eq.ra;meta.main</code> and
their equivalents for declination) are sought.  If these cannot be found, 
columns named something like "RA" or "RA2000" are sought.
If either is found, the column units are consulted and radian-&gt;degree
conversions are performed if necessary (degrees are assumed if no
unit value is given).  If nothing likely can be found, then the 
command will fail with an error message.
This search logic is intended as a convenience only; it is somewhat
ad hoc and subject to change.  To make sure that the correct
angle values are being used, specify the <code>ra</code> and <code>dec</code>
position parameters explicitly.
</p>

<p><code>tskymatch2</code> is simply a cut-down version, provided for
convenience, of the more general matching task 
<ref id="tmatch2"><code>tmatch2</code></ref>. 
If you want more match options or otherwise more configurability,
you can probably find it by using <code>tmatch2</code>.
</p>

&tskymatch2-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here are some examples of using <code>tmatch2</code>

<dl>

<dt><verbatim>
stilts tskymatch2 in1=obs_v.xml in2=obs_i.xml out=obs_iv.xml \
                  ra1=OBS_RA dec1=OBS_DEC ra2=OBS_RA dec2=OBS_DEC error=2
</verbatim></dt>
<dd><p>Takes two input catalogues (VOTables), one with observations in
    the V band and the other in the I band, and performs a match to find
    objects within 2 arcseconds of each other.
    The result is a new VOTable containing only rows where a match was found.
    </p></dd>

<dt><verbatim>
stilts tskymatch2 in1=obs_v.xml in2=obs_i.xml out=obs_iv.xml \
                  error=2
</verbatim></dt>
<dd><p>This is the same as the previous example but without explicit
    specification of the sky position columns in either table.
    It will work only if those columns are identified with appropriate
    UCDs, for instance <code>pos.eq.ra;meta.main</code> and
    <code>pos.eq.dec:meta.main</code>.
    If no suitable UCDs are in place this invocation will fail with an error.
    </p></dd>

<dt><verbatim>
stilts tskymatch2 in1=virgo1.txt ifmt1=ascii in2=mgc.fits \
                  ra1='radiansToDegrees(raRad)' dec1='radiansToDegrees(deRad)' \
                  ra2=MGC_ALPHA_J2000 dec2=MGC_DELTA_J2000 \
                  error=10 join=2not1 omode=count
</verbatim></dt>
<dd><p>Object positions in the text file virgo1.txt are compared to those
    in the FITS file mgc.fits.  The angles have been recorded in the text file
    in radians, so they are converted to degrees here before use.
    Use of the <code>join=2not1</code> parameter causes the command to
    identify all the objects in the first list 
    which do not have counterparts within 10 arcsec in the second list.
    The number of such objects found is simply output to the terminal.
    </p></dd>

</dl>
</p>
</subsubsect>

</subsect>

<subsect id="votcopy" tocleaf="yes">
<subhead><title><code>votcopy</code>: &votcopy-purpose;</title></subhead>

<p>The VOTable standard provides for three basic encodings
of the actual data within each table: TABLEDATA, BINARY and FITS.
TABLEDATA is a pure-XML encoding, which is relatively easy for humans
to read and write.
However, it is verbose and not very efficient for transmission
and processing,
for which reason the more compact BINARY format has been defined.
FITS format shares the advantages of BINARY, but is more likely to
be used where a VOTable is providing metadata 'decoration' for
an existing FITS table.
In addition, the BINARY and FITS encodings may carry their data 
either inline 
(as the base64-encoded text content of a <code>STREAM</code> element)
or externally 
(referenced by a <code>STREAM</code> element's <code>href</code> attribute).
</p>

<p>These different formats have their different advantages and
disadvantages.  Since, to some extent, programmers are humans too,
much existing VOTable software deals in TABLEDATA format even though
it may not be the most efficient way to proceed.
Conversely, you might wish to examine the contents of a BINARY-encoded 
table without use of any software more specialised than a text editor.
So there are times when it is desirable to convert from one of
these encodings to another.
</p>

<p><code>votcopy</code> is a tool which translates between these 
encodings while
making a minimum of other changes to the VOTable document.
The processing may result in some changes to lexical details 
such as whitespace in start tags, but the element structure is not
modified.  Unlike <code><ref id="tpipe">tpipe</ref></code> it does not impose 
STIL's model of what constitutes a table on the data between
reading it in and writing it out, so subtleties dependent on
the exact structure of the VOTable document will not be mangled.  
The only important changes should be the contents of
<code>DATA</code> elements in the document.
</p>

&votcopy-summary;

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Normal use of <code>votcopy</code> is pretty straightforward.
We give here a couple of examples of its input and output.
</p>

<p>Here is an example VOTable document, <code>cat.vot</code>:
<verbatim><![CDATA[
   <VOTABLE>
   <RESOURCE>

   <TABLE name="Authors">
   <FIELD name="AuthorName" datatype="char" arraysize="*"/>
   <DATA>
   <TABLEDATA>
   <TR><TD>Charles Messier</TD></TR>
   <TR><TD>Mark Taylor</TD></TR>
   </TABLEDATA>
   </DATA>
   </TABLE>

   <RESOURCE>
   <COOSYS equinox="J2000.0" epoch="J2000.0" system="eq_FK4"/>
   <TABLE name="Messier Objects">
   <FIELD name="Identifier" datatype="char" arraysize="10"/>
   <FIELD name="RA" datatype="double" units="degrees"/>
   <FIELD name="Dec" datatype="double" units="degrees"/>
   <DATA>
   <TABLEDATA>
   <TR> <TD>M51</TD> <TD>202.43</TD> <TD>47.22</TD> </TR>
   <TR> <TD>M97</TD> <TD>168.63</TD> <TD>55.03</TD> </TR>
   </TABLEDATA>
   </DATA>
   </TABLE>
   </RESOURCE>

   </RESOURCE>
   </VOTABLE>
]]></verbatim>
Note that it contains more structure than just a flat table: there are
two <code>TABLE</code> elements, 
the <code>RESOURCE</code> element of the second one being nested
in the <code>RESOURCE</code> of the first.  
Processing this document using a generic table tool such as 
<code>tpipe</code> or <code>tcopy</code> would lose this structure.
</p>

<p>To convert the data encoding to BINARY format, we simply execute
<verbatim>
   stilts votcopy format=binary cat.vot
</verbatim>
and the output is
<verbatim><![CDATA[
   <?xml version="1.0"?>
   <VOTABLE>
   <RESOURCE>

   <TABLE name="Authors">
   <FIELD name="AuthorName" datatype="char" arraysize="*"/>
   <DATA>
   <BINARY>
   <STREAM encoding='base64'>
   AAAAD0NoYXJsZXMgTWVzc2llcgAAAAtNYXJrIFRheWxvcg==
   </STREAM>
   </BINARY>
   </DATA>
   </TABLE>

   <RESOURCE>
   <COOSYS equinox="J2000.0" epoch="J2000.0" system="eq_FK4"/>
   <TABLE name="Messier Objects">
   <FIELD name="Identifier" datatype="char" arraysize="10"/>
   <FIELD name="RA" datatype="double" units="degrees"/>
   <FIELD name="Dec" datatype="double" units="degrees"/>
   <DATA>
   <BINARY>
   <STREAM encoding='base64'>
   TTUxAAAAAAAAAEBpTcKPXCj2QEecKPXCj1xNOTcAAAAAAAAAQGUUKPXCj1xAS4PX
   Cj1wpA==
   </STREAM>
   </BINARY>
   </DATA>
   </TABLE>
   </RESOURCE>

   </RESOURCE>
   </VOTABLE>
]]></verbatim>
Note that both tables in the document have been translated to BINARY format.
The basic structure of the document is unchanged: the only differences 
are within the <code>DATA</code> elements.  If we ran
<verbatim>
   stilts votcopy format=tabledata
</verbatim>
on either this output or the original input then the output would
be identical (apart perhaps from whitespace) to the input table, 
since the data are originally in TABLEDATA format.
</p>

<p>To generate a VOTable document with the data in external files,
the <code>href</code> parameter is used.  We will output in FITS format
this time.  Executing:
<verbatim>
   stilts votcopy format=fits href=true cat.vot fcat.vot
</verbatim>
writes the following to the file <code>fcat.vot</code>:
<verbatim><![CDATA[
   ...
   <DATA>
   <FITS>
   <STREAM href="fcat-1.fits"/>
   </FITS>
   </DATA>
   ...
   <DATA>
   <FITS>
   <STREAM href="fcat-2.fits"/>
   </FITS>
   </DATA>
   ...
]]></verbatim>
(the unchanged parts of the document have been skipped here for brevity).
The actual data are written in two additional files in the same
directory as the output file, <code>fcat-1.fits</code> and 
<code>fcat-2.fits</code>.  These filenames are based on the 
main output filename, but can be altered using the <code>base</code>
flag if required.  Note this has also given you FITS binary table 
versions of all the tables in the input VOTable document, which can be 
operated on by normal FITS-aware software quite separately from the VOTable
if required.
</p>

</subsubsect>

</subsect>

<subsect id="votlint" tocleaf="yes">
<subhead><title><code>votlint</code>: &votlint-purpose;</title></subhead>

<p>The VOTable standard, while not hugely complicated, has a number
of subtleties and it's not difficult to produce VOTable documents
which violate it in various ways.  In fact it's probably true to say
that most VOTable documents out there are not strictly legal.
In some cases the errors are small and a parser is likely to
process the document without noticing the trouble.  
In other cases, the errors are so serious that it's hard for
any software to make sense of it.
In many cases in between, different software will react in different
ways, in the worst case appearing to parse a VOTable but in 
fact understanding the wrong data.
</p>

<p><code>votlint</code> is a program which can check a VOTable document
and spot places where it does not conform to the VOTable standard,
or places which look like they may not mean what the author intended.
It is meant for use in two main scenarios:
<ol>
<li>For authors of VOTables and VOTable-producing software,
    to check that the documents they produce are legal and problem-free.
    </li>
<li>For users of VOTables (including authors of VOTable-processing software) 
    who are having problems with one and want to
    know whether it is the data or the software at fault.
    </li>
</ol>
</p>

<p>Validating a VOTable document against the VOTable schema or DTD 
of course goes a long way towards checking a VOTable document for errors
(though it's clear that many VOTable authors don't even go this far),
but it by no means does the whole job, simply because the schema/DTD
specification languages don't have the facilities 
to understand the data structure
of a VOTable document.  For instance the VOTable schema 
will allow any plain text content in a <code>TD</code> element, but whether
this makes sense in a VOTable depends on the <code>datatype</code>
attribute of the corresponding <code>FIELD</code> element.  There are many
other examples.
<code>votlint</code> tackles this by parsing the VOTable document 
in a way which understands its structure and assessing the content
as critically as it can.  For any incorrect or questionable content
it finds, it will output a short message describing the problem 
and giving its location in the document.  What you do with this
information is then up to you.
</p>

<p>Using <code>votlint</code> is very straightforward.  
The <code>votable</code> argument
gives the location (filename or URL) of a VOTable document.
Otherwise, the document will be read from standard input.
Error and warning messages will be written on standard error.
Each message is prefixed with the location at which the error was
found (if possible the line and column are shown, though this is
dependent on your JVM's default XML parser).
The processing is SAX-based, so arbitrarily long tables can
be processed without heavy memory use.
</p>

<p><code>votlint</code> can't guarantee to pick up every possible
error in a VOTable document, but it ought to pick up many of the
most serious errors that are commonly made in authoring VOTables.
</p>

<p><strong>Note:</strong> <code>votlint</code>'s handling of XML namespaces
seems to be somewhat dependent on the XML parser in use.
As far as I can see, Crimson (the default in many JREs) works for any
namespace arrangements, but Xerces seems to have problems when validating
documents which use namespace prefixes.  Not sure about other parsers.
This probably won't cause you trouble, but if it does you may need to
set <code>validate=false</code> to work around it.
Contact this author if this seems to be a serious issue for you.
</p>

&votlint-summary;

<subsubsect>
<subhead><title>Items Checked</title></subhead>

<p>Votlint checks that the XML input is well-formed, and, unless the
<code>valid=false</code> parameter is supplied, that it validates against the
1.0 DTD or 1.1, 1.2 or 1.3 schema as appropriate.
Some of the validity checks are also done by
<code>votlint</code> internally, so that some validity-type 
errors may give rise to more than one warning.  
In general, the program errs on the side of verbosity.
</p>

<p>In addition to these checks, the following checks are carried out,
and lead to ERROR reports if violations are found:
<ul>
<li><code>TD</code> contents incompatible
    <code>datatype</code>/<code>arraysize</code> attributes declared
    in <code>FIELD</code></li>
<li>BINARY/BINARY2 data streams which don't match metadata 
    declared in <code>FIELD</code></li>
<li><code>PARAM</code> values incompatible with declared 
    <code>datatype</code>/<code>arraysize</code></li>
<li>Meaningless <code>arraysize</code> declarations</li>
<li>Array-valued <code>TD</code> elements with the wrong number of elements</li>
<li>Array-valued <code>PARAM</code> values with the wrong number of 
    elements</li>
<li><code>nrows</code> attribute on <code>TABLE</code> element different
    from the number of rows actually in the table</li>
<li><code>VOTABLE</code> <code>version</code> attribute is unknown</li>
<li><code>ref</code> attributes without matching <code>ID</code> elements 
    elsewhere in the document</li>
<li>Same <code>ID</code> attribute value on multiple elements.</li>
</ul>
</p>

<p>Additionally, the following conditions, which are not actually 
forbidden by the VOTable standard, will generate WARNING reports.
Some of these may result from harmless constructions, but it is
wise at least to take a look at the input which caused them:
<ul>
<li>Wrong number of <code>TD</code> elements in row of <code>TABLEDATA</code>
    table</li>
<li>Mismatch between VOTable and FITS column metadata for
    FITS data encoding</li>
<li><code>TABLE</code> with no <code>FIELD</code> elements</li>
<li>Use of deprecated attributes</li>
<li><code>FIELD</code> or <code>PARAM</code> elements with
    <code>datatype</code> of either
    <code>char</code> or <code>unicodeChar</code>
    and undeclared <code>arraysize</code> -
    this is a common error which can result in 
    ignoring all but the first character in <code>TD</code> elements from
    a column</li>
<li><code>ref</code> attributes which reference other elements by 
    <code>ID</code> where the reference makes no, or questionable sense
    (e.g. <code>FIELDref</code> references <code>FIELD</code> in a 
    different table)</li>
<li>Multiple sibling elements (such as <code>FIELD</code>s) with the
    same <code>name</code> attributes</li>
</ul>
</p>
</subsubsect>

<subsubsect>
<subhead><title>Examples</title></subhead>

<p>Here is a brief example of running <code>votlint</code> against
a (very short) imperfect VOTable document.  If the document looks like
this:
<verbatim><![CDATA[
  <VOTABLE version="1.1">
   <RESOURCE>
    <TABLE nrows="2">
     <FIELD name="Identifier" datatype="char"/>
     <FIELD name="RA" datatype="double"/>
     <FIELD name="Dec" datatype="double"/>
     <DESCRIPTION>A very small table</DESCRIPTION>
     <DATA>
      <TABLEDATA>
       <TR>
        <TD>Fomalhaut</TD>
        <TD>344.48</TD>
        <TD>-29.618</TD>
        <TD>HD 216956</TD>
       </TR>
      </TABLEDATA> 
     </DATA> 
    </TABLE>
   </RESOURCE>
  </VOTABLE>
]]></verbatim>
then the output of a <code>votlint</code> run looks like this:
<verbatim><![CDATA[
  INFO (l.4): No arraysize for character, FIELD implies single character
  ERROR (l.7): Element "TABLE" does not allow "DESCRIPTION" here.
  WARNING (l.11): Characters after first in char scalar ignored (missing arraysize?)
  WARNING (l.15): Wrong number of TDs in row (expecting 3 found 4)
  ERROR (l.18): Row count (1) not equal to nrows attribute (2)
]]></verbatim>
(Note that the details of the reports will vary according to
the XML parser/validator that forms part of your Java installation.)
</p>

<p>Note also that the warning at line 11 has resulted from
the same error as the
one at line 4 - because the <code>FIELD</code> element has no
<code>arraysize</code> attribute, <code>arraysize="1"</code> 
(single character) is assumed,
while the author almost certainly intended <code>arraysize="*"</code>
(unknown length string).
</p>

<p>By examining these warnings you can see what needs to be done to
fix this table up.  Here is what it should look like:
<verbatim><![CDATA[
  <VOTABLE version="1.1">
   <RESOURCE>
    <TABLE nrows="1">                                <!-- change row count -->
     <DESCRIPTION>A very small table</DESCRIPTION>   <!-- move DESCRIPTION -->
     <FIELD name="Identifier" datatype="char" 
                              arraysize="*"/>        <!-- add arraysize -->
     <FIELD name="RA" datatype="double"/>
     <FIELD name="Dec" datatype="double"/>
     <DATA>
      <TABLEDATA>
       <TR>
        <TD>Fomalhaut</TD>
        <TD>344.48</TD>
        <TD>-29.618</TD>
       </TR>                                         <!-- remove extra TD -->
      </TABLEDATA>
     </DATA>
    </TABLE>
   </RESOURCE>
  </VOTABLE>
]]></verbatim>
When fed this version, <code>votlint</code> gives no warnings.
</p>

</subsubsect>

</subsect>

</sect>


<sect>
<subhead><title>Release Notes</title></subhead>

<p>This is STILTS, Starlink Tables Infrastructure Library Tool Set.
It is a collection of non-GUI utilites for general 
purpose table manipulation.

<dl>
<dt>Author</dt>
<dd><p>Mark Taylor (Bristol University)</p></dd>

<dt>Email</dt>
<dd><p><webref url="mailto:m.b.taylor@bristol.ac.uk"
                          >m.b.taylor@bristol.ac.uk</webref></p></dd>

<dt>WWW</dt>
<dd><p><webref url="http://www.starlink.ac.uk/stilts/"
                   >http://www.starlink.ac.uk/stilts/</webref></p></dd>
</dl>

User comments, suggestions, requests and bug reports to the above address
are welcomed.
</p>

<subsect>
<subhead><title>Acknowledgements</title></subhead>

<p>The initial development of STILTS was done under the UK's 
<webref url="http://en.wikipedia.org/wiki/Starlink_Project"
        >Starlink project</webref> (1980-2005, R.I.P.).
Since then it has been supported by
grant PP/D002486/1 from the
UK's Particle Physics and Astronomy Research Council,
the <webref url="http://www.eurovotc.org/">VOTech</webref>
project (from EU FP6),
the <webref url="http://www.astrogrid.org/">AstroGrid</webref> project
    (from PPARC/STFC),
the <webref url="http://cds.u-strasbg.fr/twikiAIDA/bin/view/EuroVOAIDA/WebHome"
            >AIDA</webref> project (from EU FP7),
grant ST/H008470/1 from the UK's Science and Technology Facilities Council
(STFC),
and the <webref url="http://www.g-vo.org/">GAVO</webref> project
(BMBF Bewilligungsnummer 05A08VHA),
and grants ST/H008470/1, ST/I00176X/1 and ST/J001414/1 from STFC.
All of this support is gratefully acknowledged.
</p>

<p>Apart from the excellent Java 2 Standard Edition itself,
the following external libraries provide important parts of STILTS's
functionality:
<ul>
<li><webref url="http://www.gnu.org/software/jel/">JEL</webref>
    (GNU) for algebraic expression evaluation</li>
<li><webref url="http://home.fnal.gov/~kuropat/HEALPIX/PixTools.html"
            >PixTools</webref>
    (Fermilab EAG) for HEALPix-based celestial sphere row matching</li>
<li><webref url="http://www.1t3xt.com/">iText</webref>
    (1T3XT BVBA) for PDF output</li>
<li><webref url="http://www.jibble.org/epsgraphics/">EPSGraphics2D</webref>
    (Jibble) for encapsulated postscript output</li>
<li><webref url="http://cds.u-strasbg.fr/resources/doku.php?id=moc">MOC</webref>
    (CDS) for Multi-Order Coverage map manipulation</li>
<li><webref url="http://cdsportal.u-strasbg.fr/adqltuto/">ADQL</webref>
    (CDS) for ADQL parsing in TAP query preparation</li>
<li><webref url="http://heasarc.gsfc.nasa.gov/docs/heasarc/fits/java/"
            >nom.tam.fits</webref> (NASA) for parts of FITS I/O</li>
<li><webref url="http://trac.us-vo.org/project/nvo/wiki/IVOARegistry"
            >IVOARegistry</webref> (NVO) for parts of IVOA registry access</li>
<li><webref
     url="http://www.acme.com/java/software/Acme.JPM.Encoders.GifEncoder.html"
            >GifEncoder</webref>
    (Acme) for GIF output</li>
<li><webref url="http://www.sdss.jhu.edu/htm/">HTM</webref>
    (Sloan Digital Sky Survey) for HTM-based celestial sphere row matching
    (now deprecated within STILTS)</li>
</ul>
Thanks in particular to Nickolai Kouropatkine and Chris Stoughton 
of Fermilab for writing the PixTools specially for use in STIL.
</p>

<p>Many people have contributed ideas and advice to the development of
STILTS and its related products.  I can't list all of them here,
but my thanks are especially due to the following:
<ul>
<li>Malcolm Currie (Starlink, RAL)</li>
<li>Clive Davenhall (Royal Observatory Edinburgh)</li>
<li>Peter Draper (Starlink, Durham)</li>
<li>David Giaretta (Starlink, RAL)</li>
<li>Clive Page (AstroGrid, Leicester)</li>
</ul>
</p>

<p>If you use this software in published work, the following citation
would be appreciated:
<blockquote>
<webref url="http://adsabs.harvard.edu/abs/2006ASPC..351..666T"
                                          >2006ASPC..351..666T</webref>:
M. B. Taylor, "STILTS - A Package for Command-Line Processing of Tabular Data",
in Astronomical Data Analysis Software and Systems XV,
eds. C. Gabriel et al., ASP Conf. Ser. 351, p. 666 (2006)
</blockquote>
</p>

</subsect>


<subsect id="versions">
<subhead><title>Version History</title></subhead>

<p>Releases to date have been as follows:
<dl>

<dt>Version 0.1b (29 April 2005)</dt>
<dd><p>First public release
    </p></dd>

<dt>Version 0.2b (30 June 2005)</dt>
<dd><p>
  <ul>
  <li>Added Times func class for MJD-ISO8601 time conversions.</li>
  <li>Fixed bug when doing NULL_ test expressions on first column in table.</li>
  </ul>
</p></dd>

<dt>Version 1.0b (30 September 2005)</dt>
<dd><p>This is the first non-experimental release of STILTS, and 
    it incorporates major changes and backward incompatibilities 
    since version 0.2b.
    </p>
    <p><dl>
       <dt>Parameter system</dt>
       <dd><p>The parameter system has undergone a complete rewrite;
           there is now only a single command "<code>stilts</code>",
           invoked using the <code>stilts</code> script or the 
           <code>stilts.jar</code> jar file, and the various tasks are
           named as subsequent arguments on the command line.
           Command arguments are supplied after that.
           The new invocation syntax is described in detail elsewhere in 
           this document.  As well as invocation features such
           as improved on-line help, optional prompting, 
           parameter defaulting, and more uniform access to common features,
           this will make it more straightforward to wrap these tasks 
           for use in non-command-line environments, such as behind a
           SOAP or CORBA interface, or in a CEA-like execution environment.
           </p></dd>

        <dt>Crossmatching</dt>
        <dd><p>A new command <code>tmatch2</code> has been introduced.
            This provides flexible and efficient crossmatching between
            two input tables.  Future releases will provide commands for
            intra-table and multi-table matching.
            </p></dd>

        <dt>Concatentation</dt>
        <dd><p>A new command <code>tcat</code> has been introduced, which
            allows two tables to be glued together top-to-bottom.
            This is currently working but very rudimentary - improvements
            will be forthcoming in future releases.
            </p></dd>

        <dt>Calculator</dt>
        <dd><p>A new utility command <code>calc</code> has been introduced,
            which performs one-line expression evaluations from the 
            command line.
            </p></dd>

        <dt>Pipeline filters</dt>
        <dd><p>The following new filter commands for use in <code>tpipe</code>
            and other commands have been introduced:
            <ul>
            <li><code>addskycoords</code>: calculates new 
                celestial coordinate pair from existing ones 
                (FK4, FK5, ecliptic, galactic, supergalactic)</li>
            <li><code>replacecol</code>: replaces column data,
                using existing metadata</li>
            <li><code>badval</code>: replaces given 'magic'
                value with null</li>
            <li><code>replaceval</code>: replaces given 'magic'
                value with any specified value</li>
            <li><code>tablename</code>: edits table name</li>
            <li><code>explodecols</code> and <code>explodecols</code> commands
                replace <code>explode</code></li>
            </ul>
        </p>
        <p>The new <code>stream</code> parameter of <code>tpipe</code> now
        allows you to write filter commands in an external file, to 
        facilitate more manageable command lines.
        </p>
        <p>Wildarding for column specification is now allowed for some
        filter commands.
        </p></dd>

        <dt>Algebraic functions</dt>
        <dd><p><ul>
            <li>New functions for converting time values between different
                coordinate systems (Modified Julian Date, ISO-8601,
                Julian Epoch and Besselian Epoch).</li>
            <li>New RANDOM special function.</li>
        </ul></p></dd>

        <dt>Documentation</dt>
        <dd><p>SUN/256 has undergone many changes.  Much of the tool
            documentation is now automatically generated from the code
            itself, which goes a long way to ensuring that the documentation
            is correct with respect to the current state of the code.
            </p></dd>

    </dl></p>
</dd>

<dt>Version 1.0-1b (7 October 2005)</dt>
<dd><p>Fixed jar file manifest bug which prevented working on Java 1.5</p></dd>

<dt>Version 1.1 (10 May 2006)</dt>
<dd><p>A number of new features and capabilities have been introduced:
    <dl>
    <dt><code>tcube</code> Command</dt>
    <dd><p>The new <ref id="tcube" plaintextref="yes">tcube</ref> command
        calculates N-dimensional histograms (density maps) from N columns
        of an input table and writes the result to a FITS file.</p></dd>

    <dt>Processing Filters</dt>
    <dd><p>The following new <ref id="filterSteps">filters</ref>
        have been added:
        <ul>
        <li><code>stats</code> filter provides the same information as
            the old <code>stats</code> output mode, but allows much more
            flexible use of the results.  It can also calculate many new
            quantities, including quantiles, skew and kurtosis.</li>
        <li><code>meta</code> filter provides the same information as
            the old <code>meta</code> output mode, but allows much more
            flexible use of the results.</li>
        <li><code>assert</code> filter provides in-pipeline logical
            assertions.</li>
        <li><code>uniq</code> filter collapses multiple adjacent identical 
            or similar rows.</li>
        <li><code>sorthead</code> filter provides a (usually) more
            efficient method of doing what you could previously do 
            by combining <code>sort</code> and <code>head</code> filters.</li>
        <li><code>colmeta</code> filter adds/modifies metadata for selected
            columns.</li>
        <li><code>check</code> filter checks table in stream - for debugging
            purposes only.</li>
        </ul>
        </p>
        <p>Additionally usage of the <code>sort</code> filter has been changed
        so that it can now do everything that <code>sortexpr</code> used to
        be able to do; <code>sortexpr</code> is now withdrawn.
        </p></dd>

    <dt>Output Modes</dt>
    <dd><p>The following new <ref id="outModes">output modes</ref>
        have been introduced:
        <ul>
        <li><code>plastic</code> mode broadcasts the table to
            one or all registered PLASTIC listeners.</li>
        <li><code>cgi</code> mode writes the table to standard output in a
            form suitable for output from a CGI script.</li>
        <li><code>discard</code> mode throws away the table.</li>
        </ul>
        and usage of the following has been modified:
        <ul>
        <li><code>topcat</code> mode now attempts to use PLASTIC 
            (amongst other methods) to contact TOPCAT.</li>
        <li><code>stats</code> and <code>meta</code> modes are mildly
            deprecated in favour of the corresponding new filters
            (see above).</li>
        </ul>
        </p></dd>

    <dt>Other new features</dt>
    <dd><p>
        <ul>
        <li>New IPAC table format input handler added.</li>
        <li>New <code>csv-noheader</code> format variant output handler
            added.</li>
        <li><code>roundDecimal</code> and <code>formatDecimal</code>
            functions introduced for more control over visual appearance
            of numeric values.</li>
        <li>Experimental facilities for automatically generating a CEA
            application description file.</li>
        </ul>
        </p></dd>

    <dt>Bug fixes and minor improvements</dt>
    <dd><p>
        <ul>
        <li>Now copes with 'K'-format FITS binary table columns
           (64-bit integers).</li>
        <li>Improved, though still imperfect, retention of table-wide
            metadata in VOTables.</li>
        <li>Distinctions between null and false values in boolean columns are
            handled more carefully for FITS and VOTable files.</li>
        <li>Efficiency improvement when writing FITS-plus format
            (now only requires a maximum of two passes rather than
            three of the input rows).</li>
        <li>Added the <code>mark.workaround</code> 
            <ref id="sysProperties">system property</ref> which can 
            optionally work around a bug in some input streams 
            ("Resetting to invalid mark" errors).</li>
        <li>Fixed a bug in Cartesian matching which failed to match
            if the required error in any dimension was zero.</li>
        <li>Fixed erroneous reports about unknown <code>ucd</code> and 
            <code>utype</code> attributes of TABLE element in 
            <code>votlint</code>.</li>
        <li>When joining tables, column name comparison to determine
            whether deduplication is required is now case-insensitive.</li>
        <li>Error message improved when no automatic format detection
            is attempted for streamed tables.</li>
        <li>Setting <code>istream=true</code> is now less likely to cause a
            "Can't re-read stream" error.</li>
        </ul>
        </p></dd>
    </dl>

</p></dd>

<dt>Version 1.2 (7 July 2006)</dt>
<dd><p>
    <dl>
    <dt>Column-oriented Storage</dt>
    <dd><p>New features for permitting column-oriented storage
        (<code>colfits</code> format, new <code>startable.storage</code> 
        policy "<code>sideways</code>") have been introduced.
        These can provide considerable efficiency improvements for
        certain tasks when working with very large (and especially wide)
        tables.
        </p></dd>
    <dt>New VO commands</dt>
    <dd><p>Added two new commands for querying Virtual Observatory services:
        <ul>
        <li><code>multicone</code>
            - Makes multiple cone search queries to the same service</li>
        <li><ref id="regquery"><code>regquery</code></ref>
            - &regquery-purpose;</li>
        </ul>
        These tasks are experimental and may be modified or renamed in
        future releases.
        </p></dd>
    <dt>Other items</dt>
    <dd><p>
        <ul>
        <li><code>transpose</code> filter added.</li>
        <li>Added flux conversion functions (Jansky&lt;-&gt;magnitude).</li>
        <li>ISO-8601 strings now permit times of 24:00:00 as they should.</li>
        </ul>
        </p></dd>
    </dl>
</p></dd>

<dt>Version 1.2-1 (3 August 2006)</dt>
<dd><p>
    <ul>
    <li>Tab-Separated Table (TST) format now supported for reading and 
        writing.</li>
    <li>New <code>setparam</code> and <code>clearparams</code> filters.</li>
    <li>Added ICRS coordinate system for <code>addskycoords</code>.</li>
    <li>TUCDnn header cards now used in FITS files to transmit UCDs
        (non-standard mechanism).</li>
    <li>Efficiency improvements for column-oriented access.</li>
    </ul>
    </p></dd>

<dt>Version 1.3 (5 October 2006)</dt>
<dd><p>
    <dl>

    <dt>Table Concatenation</dt>
    <dd><p>The old <code>tcat</code> command has been replaced by more capable 
        <ref id="tcat"><code>tcat</code></ref> and
        <ref id="tcatn"><code>tcatn</code></ref> commands.
        Between them these provide concatenation of an unlimited number of
        homogeneous or heterogeneous input tables.
        Additional columns may be added to indicate which of the input tables
        given output rows originated from.
        </p></dd>

    <dt>Parameter value indirection</dt>
    <dd><p>Certain parameters 
        (<code>in</code> in <ref id="tcat"><code>tcat</code></ref>,
        <code>cmd</code> and friends)
        may now be specified in the form "&indirection.char;filename".
        This indicates that the value for the parameter is to be obtained
        by reading it from the named file.
        This is useful if a very long value is required for the parameter
        in question.  The <code>script</code> parameter of
        <ref id="tpipe"><code>tpipe</code></ref> has therefore been
        withdrawn, since it did just the same thing.
        </p></dd>

    <dt>MySpace access</dt>
    <dd><p>Direct access to the MySpace virtual file system is now provided
        by use of <code>ivo:</code>- or <code>myspace:</code>-type URLs.
        </p></dd>

    <dt>Conversion functions</dt>
    <dd><p>
        <ul>
        <li>Time conversion functions between MJD and Decimal Year have
            been added
            (<ref id="uk.ac.starlink.ttools.func.Times"/>).</li>
        <li><code>toHex</code> and <code>fromHex</code> numeric conversion
            functions have been added
            (<ref id="uk.ac.starlink.ttools.func.Conversions"/>).</li>
        </ul>
        </p></dd>

    <dt>Documentation improvements</dt>
    <dd><p>
        <ul>
        <li>The HTML version of SUN/256 now uses CSS to provide better 
            highlighting of <code>commands</code> etc.</li>
        <li>The <ref id="outModes">Output Modes</ref> and
            <ref id="filterSteps">Processing Filter</ref> sections are
            now split into subsections to make the table of contents
            clearer.</li>
        <li>The <ref id="cmdUsage">Command Reference</ref> section now 
            has only one level of subsection listed in the table of
            contents to make it clearer.</li>
        </ul>
        </p></dd>

    <dt>Other new features and improvements</dt>
    <dd><p>
        <ul>
        <li>Added <code>-J</code> flag to <code>stilts</code> script
            for passing flags directly to Java.</li>
        <li>Added new <code>out</code> parameter to <code>votlint</code>.</li>
        <li>Added <code>-ifndim</code> and <code>-ifshape</code> flags to
            <ref id="explodeall">explodeall</ref> filter.</li>
        <li>The <code>exact</code> match mode in 
            <ref id="tmatch2"><code>tmatch2</code></ref>
            now copes with array-valued columns.</li>
        <li>Added <code>force</code> parameter to <code>multicone</code> task 
            as a workaround for some broken services.</li>
        <li>Added Sample (as opposed to Population) Standard Deviation/Variance
            calculation options to the <code>stats</code> filter.</li>
        <li>Improved CEA description file output - now contains details of 
            all tasks rather than just a few, as well as various 
            improvements in documentation etc.</li>
        </ul>
        </p></dd>

    <dt>Bug fixes</dt>
    <dd><p>
        <ul>
        <li>Fixed erroneous complaints from <code>votlint</code> about 
            <code>utype</code> attribute on RESOURCE elements.</li>
        <li>Fixed a couple of minor crossmatching bugs (which wouldn't
            have affected results).</li>
        </ul>
        </p></dd>

    </dl>
</p></dd>

<dt>Version 1.3-1 (Starlink Hokulei release)</dt>
<dd><p>
    <ul>
    <li>New command <ref id="tjoin"><code>tjoin</code></ref> introduced.</li>
    <li>Output to MySpace can now be streamed, if running under J2SE1.5 or
        later.</li>
    <li>Slight changes to parameters for <code>votlint</code>
        and <code>votcopy</code>.</li>
    <li>Fixed bug in handling of single quotes in FITS file metadata.</li>
    <li>Added <code>-bench</code> flag to <code>stilts</code> command.</li>
    <li>Various scalability improvements for use with very large (Tb?) 
        files.</li>
    <li>Improved efficiency for <code>text</code> and <code>ascii</code>
        output formats (now one-pass not two-pass).</li>
    <li>Improved CEA app-description file, including especially option lists
        for things like input and output formats.</li>
    <li>Added README.cea file to distribution.</li>
    <li>Fixed problem which could mis-report VOTable out of memory errors
        as Broken Pipe.</li>
    <li>Added Vega&lt;-&gt;AB magnitude conversion constants to 
        <ref id="uk.ac.starlink.ttools.func.Fluxes">Fluxes</ref> functions.</li>
    <li>Added <code>duptag</code> parameters to <ref id="tmatch2">tmatch2</ref>
        task for customised renaming of columns with duplicated names.</li>
    <li>Added hyperbolic trig functions to
        <ref id="uk.ac.starlink.ttools.func.Maths">Maths</ref> class
        (<code>sinh</code>, <code>cosh</code>, <code>tanh</code>
        and inverses).</li>
    <li>Added cosmology distance calculations in class
        <ref id="uk.ac.starlink.ttools.func.Distances">Distances</ref>.</li>
    <li>Added <ref id="funcs"><code>funcs</code></ref> task, a browser for
        expression language function documentation.</li>
    <li>Added <code>-checkversion</code> to list of <code>stilts</code>
        <ref id="stilts-flags">flags</ref>.</li>
    </ul>
    </p></dd>

<dt>Version 1.3-2 (6 July 2007)</dt>
<dd><p>
    <ul>
    <li>Added optional <code>table</code> parameter to 
        <ref id="calc"><code>calc</code></ref> command
        (for access to table parameters).</li>
    <li>Can use table parameter names in expressions using 
        <code>&param.prefix;</code> notation (<ref id="jel-paramref"/>).</li>
    <li>Can reference columns/parameters by UCD by using 
        <code>&ucd.prefix;</code> notation 
        in expressions (<ref id="jel-colref"/>)
        and as column identifiers (<ref id="col-id"/>).</li>
    <li>Improved deduplication of column names when joining tables.</li>
    <li>Fix error in output of FITS table <code>TNULL</code><m>n</m> header
        cards - write them as numeric not string values.</li>
    <li>Improve error message for broken CSV files.</li>
    <li>Modified JDBC handling so that MySQL and PostgreSQL do not run out
        of heap memory when streaming large datasets for input.
        Think I've done the same for SQL Server, but this is not tested.</li>
    <li>Improve error reporting in the presence of a deficient JVM
        (such as GNU <code>gcj</code>).</li>
    <li>Add locale-specific <code>formatDecimalLocal</code> functions in 
        class <ref id="uk.ac.starlink.ttools.func.Formats">Formats</ref>.</li>
    <li>Add <code>fluxToLuminosity</code> and <code>luminosityToFlux</code>
        functions in class 
        <ref id="uk.ac.starlink.ttools.func.Fluxes">Fluxes</ref>.</li>
    <li>Fix bug which was causing NullPointerExceptions 
        in the <code>transpose</code> filter.</li>
    </ul>
    </p></dd>

<dt>Version 1.3-3 (4 Sep 2007)</dt>
<dd><p>
    <ul>
    <li>Experimental, and currently undocumented, <code>sqlcone</code> 
        task introduced, along with some classes in package 
        <code>uk.ac.starlink.ttools.cone</code> designed for library use by
        AstroGrid DSA code.
        </li>
    <li>CEA description of <code>tmatch2</code> <code>params</code>
        parameter now has <code>minoccurs=0</code>, since that can be true
        for exact matches.</li>
    </ul>
    </p></dd>

<dt>Version 1.3-4 (10 Sep 2007)</dt>
<dd><p>
    <ul>
    <li>Fixed VotCopy bug.</li>
    </ul>
    </p></dd>

<dt>Version 1.3-5 (30 Oct 2007)</dt>
<dd><p>
    <ul>
    <li>Added <code>-stdout</code> and <code>-stderr</code> flags to
        <code>stilts</code> command.</li>
    <li>Some bugs fixed in generation of CEA <code>app-description.xml</code>
        file.</li>
    <li>Documentation provided for <code>sqlcone</code> command.</li>
    <li>Fixed error in <code>fluxToLuminosity</code> function.</li>
    </ul>
    </p></dd>

<dt>Version 1.4 (6 December 2007)</dt>
<dd><p>
    <dl>
    <dt>Table joins</dt>
    <dd><p>This version provides more cross matching functionality.
        Added to the existing <ref id="tmatch2"><code>tmatch2</code></ref>
        command are new tasks:
        <ul>
        <li><ref id="tskymatch2"><code>tskymatch2</code></ref>:
            stripped down version of <code>tmatch2</code> for ease of use when
            matching with sky coordinates.</li>
        <li><ref id="tmatch1"><code>tmatch1</code></ref>:
            internal matcher, finds groups of objects within a table.</li>
        <li><ref id="tmatchn"><code>tmatchn</code></ref>:
            finds group or multiple-pair matches between multiple (&gt;2)
            tables.</li>
        </ul>
        </p>
        <p>Two tasks have been renamed for improved clarity and consistency:
        <ul>
        <li><code>multicone</code> is now named
            <ref id="coneskymatch"><code>coneskymatch</code></ref></li>
        <li><code>sqlcone</code> is now named
            <ref id="sqlskymatch"><code>sqlskymatch</code></ref></li>
        </ul>
        </p>
        <p>There has also been some enhancement and rationalisation of
        parameters for all table join tools (<code>tmatch*</code> as well as 
        <code>tjoin</code>,
        <code>coneskymatch</code> and <code>sqlskymatch</code>):
        <ul>
        <li>All table join commands now use similar <code>fixcols</code> and 
            <code>suffix*</code> parameters to control renaming of duplicated
            columns in output tables (note this replaces the old 
            <code>duptag*</code> parameters in <code>tmatch2</code>).</li>
        <li>Crossmatching tasks have a new <code>progress</code> parameter
            which allows you to configure whether progress is reported to the 
            console.</li>
        <li>The <code>copycols</code> parameter of <code>coneskymatch</code> 
            and <code>sqlskymatch</code> now defaults to "<code>*</code>" 
            (include all columns from input table in the output).</li>
        </ul>
        </p>
        <p><ref id="match"/> of the manual has been somewhat
        rearranged and improved.
        </p></dd>

    <dt>Other enhancements</dt>
    <dd><p>
        <ul>
        <li>FITS reader now imports table HDU header cards as table parameters.
            </li>
        <li>CeaWriter can now output CEA service definition XML config file as
            well as app-description file (experimental - may be withdrawn).</li>
        </ul>
        </p></dd>

    <dt>Bug fixes</dt>
    <dd><p>
        <ul>
        <li>Embedded spaces in output ASCII format table column names
            are now substituted with underscores.</li>
        <li>Fix a bug which caused an infinite number of dots to be printed
            when attempting a crossmatch with an empty input table.</li>
        <li>Corrected <code>votlint</code> handling of TABLEDATA-type 
            multi-dimensional <code>char</code>/<code>unicodeChar</code> arrays.
            These are now split up into strings by counting characters rather
            than using whitespace delimiters.
            I <em>think</em> it's doing the right thing now.</li>
        </ul>
        </p></dd>

    </dl>
    </p></dd>

<dt>Version 1.4-1 (28 January 2008)</dt>
<dd><p>
    <dl>
    <dt>New RDBMS-related features</dt>
    <dd><p>
        <ul>
        <li>New command <ref id="sqlclient"><code>sqlclient</code></ref>,
            which is a general JDBC-based SQL command-line client.</li>
        <li>New command <ref id="sqlupdate"><code>sqlupdate</code></ref>,
            which allows updates to existing rows in SQL tables.</li>
        <li>Some changes to <ref id="mode-tosql"><code>tosql</code></ref> 
            output mode:
            <ul>
            <li>choice of options for how to write to the database output table,
                controlled by new associated parameter <code>write</code>
                (can be <code>create</code>, <code>dropcreate</code> 
                     or <code>append</code>)</li>
            <li>associated parameter <code>newtable</code> renamed
                <code>dbtable</code></li>
            <li>associated parameter <code>database</code> renamed
                <code>db</code> for consistency with other commands</li>
            </ul>
            </li>
        </ul>
        </p></dd>
    <dt>Local and service-based matching command enhancements</dt>
    <dd><p>
        <ul>
        <li>New parameter <code>scorecol</code> added to
            <code>tmatch2</code>,
            <code>coneskymatch</code> and
            <code>sqlskymatch</code> commands,
            which controls adding a new column to match output tables 
            containing a goodness-of-match value.</li>
        <li>New parameter <code>parallel</code> added to 
            <ref id="coneskymatch"><code>coneskymatch</code></ref> task
            which allows multiple cone searches to be carried out in 
            parallel.</li>
        <li>New parameter <code>erract</code> added to 
            <code>coneskymatch</code> which controls response to 
            isolated failures in individual cone search queries.</li>
        </ul>
        </p></dd>
    <dt>General improvements</dt>
    <dd><p>
        <ul>
        <li>Improved error reporting (reasons for errors are now reported
            even without the <code>-debug</code> flag).</li>
        <li>Add new help option <code>help='*'</code> which prints help for
            all parameters of a task at once.</li>
        <li>Added (mostly undocumented) <code>+verbose</code> flag 
            for reducing verbosity level.</li>
        <li>Minor improvements to CEA app-description.</li>
        <li>Downgraded from WARNING to INFO log messages about 
            the (extremely common) VOTable syntax error of omitting 
            a FIELD/PARAM element's <code>datatype</code> attribute.</li>
        </ul>
        </p></dd>
    </dl>
    </p></dd>

<dt>Version 1.4-2 (26 March 2008)</dt>
<dd><p>
    <dl>
    <dt>Minor enhancements:</dt>
    <dd><p>
        <ul>
        <li>Add <code>progress</code> parameter to <code>tmatchn</code>.</li>
        <li>Add <code>emptyok</code> parameter to 
            <code>coneskymatch</code>.</li>
        </ul>
        </p></dd>
    <dt>Bugfixes:</dt>
    <dd><p>
        <ul>
        <li>Fixed pair matching performance bug (slower if tables were not 
            given in the right order) introduced at v1.4.</li>
        <li>Fixed null handling error in <code>calc</code> task.</li>
        <li>Fixed error in <code>stats</code> filter cardinality value 
            calculation.</li>
        <li>Fixed minor bugs in suffix addition for matching commands
            <code>fixcols</code>.</li>
        <li>Removed unformatted XML output in <code>stats</code> filter
            usage message.</li>
        <li>Try to avoid exponential format in cone search URLs 
            (some endpoints seem to require fixed point format).</li>
        <li>Minor CEA fixes.</li>
        </ul>
        </p></dd>
    </dl>
    </p></dd>

<dt>Version 2.0b (23 October 2008)</dt>
<dd><p>This version contains two new major items, plotting and server mode.
    Both work, but are missing desirable features and have not had extensive
    testing in the field, so should be considered experimental at this stage.
    <dl>
    <dt>Plotting</dt>
    <dd><p>Two table plotting commands are now provided:
        <ul>
        <li><ref id="plot2d"><code>plot2d</code></ref>:
            &plot2d-purpose;</li>
        <li><ref id="plot3d"><code>plot3d</code></ref>:
            &plot3d-purpose;</li>
        <li><ref id="plothist"><code>plothist</code></ref>:
            &plothist-purpose;</li>
        </ul>
        See also the new <ref id="plot" plaintextref="yes">Plotting</ref>
        section in the manual.
        </p></dd>
    <dt>Server/Servlet Mode</dt>
    <dd><p>A new command <ref id="server"><code>server</code></ref> is
        provided which allows STILTS commands to be executed via HTTP.
        One purpose of this is to facilitate server-side use of the 
        plotting commands co-located with data to generate on-the-fly 
        graphical summaries of server-held datasets.
        </p></dd>
    <dt>Smaller enhancements and bugfixes</dt>
    <dd><p>
        <ul>
        <li>Efficiency improvements (~25%? in both CPU time and memory usage) 
            for HEALPix-based sky crossmatching 
            (thanks to Nikolay Kouropatkine at Fermilab for a new version of 
            the PixTools library).</li>
        <li>New class <ref id="uk.ac.starlink.ttools.func.Arrays">Arrays</ref> 
            added to algebraic functions.</li>
        <li>New Appendix <ref id="classified" plaintextref="yes"
                              >Commands by Category</ref>
            added to manual.
            </li>
        <li>Add <code>minReal</code> and <code>maxReal</code> functions 
            (max/min ignoring blank values) in class
            <ref id="uk.ac.starlink.ttools.func.Arithmetic">Arithmetic</ref>.
            </li>
        <li>Sexagesimal field identification for ASCII input files 
            is less stringent
            (now permits minutes or seconds equal to 60).</li>
        <li>Minor CEA fixes.</li>
        <li>HEALPix bug fix
            (<webref url="http://home.fnal.gov/~kuropat/HEALPIX/PixTools.html"
                     >PixTools</webref> bug fix update).</li>
        <li>Fix bug in use of <code>tcat</code>'s
            <code>loccol</code> parameter.</li>
        </ul>
        </p></dd>
    </dl>
    </p></dd>

<dt>Version 2.0-1 (23 December 2008)</dt>
<dd><p>
    <ul>
    <li>Can reference columns/parameters by Utype by using 
        <code>&utype.prefix;</code> notation
        in expressions (<ref id="jel-colref"/>)
        and as column identifiers (<ref id="col-id"/>).</li>
    <li>Non-alphanumeric column names may now be used for algebraic expressions
        in the special case that the expression is just the value of a
        single column.</li>
    <li><code>regquery</code> command has changed in implementation,
        data access, and output format.  It now queries VOResource1.0 
        registries rather than the very out of date registry protocol which
        was used in earlier versions.</li>
    </ul>
    </p></dd>

<dt>Version 2.0-2 (9 January 2009)</dt>
<dd><p>
    <ul>
    <li>Added new <ref id="mode-samp">samp</ref> output mode which passes
        the generated table to clients using the SAMP protocol.</li>
    <li>Updated the <ref id="mode-topcat">topcat</ref> output mode to use
        SAMP as one way of communicating with a running TOPCAT.</li>
    <li><code>-version</code> flag now reports starjava subversion revision
        as well as other items.</li>
    </ul>
    </p></dd>

<dt>Version 2.0-3 (27 March 2009)</dt>
<dd><p>
    <ul>
    <li>Fits BINTABLE TZERO/TSCAL value reading improvements:
       <ul>
       <li>Columns with integer TZERO values now read as integers
           rather than floating point values where possible.  
           This includes unsigned longs ('K'), which were previously 
           represented as doubles with lost precision.  
           Unsigned longs which are too large however (&gt;2<sup>63</sup>) 
           are read as nulls.</li>
       <li>Byte-valued columns can now be written out by 
           <code>fits-basic</code> output
           handler as signed byte values (TFORM=B,TZERO=-128) 
           rather than signed shorts (TFORM=I).</li>
       <li>More comprehensive testing.</li> 
       <li>Fixed bug in calculating value scaled double ('D') values.</li>
       <li>Fixed bug in typing value for scaled float ('E') arrays.</li>
       <li>Fixed bug which caused registry queries (<code>regquery</code>) 
           to fail for Java 1.6.</li>
       </ul></li>
    <li>Fix minor bugs in detail of <code>votlint</code>'s validation tests
        (VOTABLE element content model, 
        INFO and PARAM and FIELD required attributes).</li>
    <li>Report application name and version in User-Agent header of outgoing
        HTTP requests.</li>
    <li>The fixed length Substring Array Convention for string arrays
        (<code>TFORMnn=rAw</code>) 
        is now understood for FITS binary tables.</li>
    <li>Minor SAMP bugs fixed (JSAMP upgraded to 0.3-1).</li>
    </ul>
    </p></dd>

<dt>Version 2.0-4 (17 July 2009)</dt>
<dd><p>
    <ul>
    <li>Work around J2SE mark/reset bug when loading table direct from URL.</li>
    <li>Produce null rather than nonsense results from sky coordinate
        conversions with unphysical latitudes
        (<code>addskycoords</code> filter).</li>
    <li>Produce null rather than questionable results from sexagesimal
        conversions with mins/secs out of range.</li>
    <li>Fix two bugs in <code>votcopy</code>: XML processing instructions 
        garbled on output, and pathnames in <code>base</code> parameters
        inappropriately flattened in hrefs attribute values.</li>
    </ul>
    </p></dd>

<dt>Version 2.0-5 (2 Oct 2009)</dt>
<dd><p>
    <ul>
    <li>VOTable 1.2 supported.</li>
    <li><code>votlint</code> can now validate VOTable documents following
        the (provisional, 2009-09-29 PR) VOTable 1.2 standard.</li>
    <li>Namespacing of VOTable documents made more intelligent, and
        configurable using the <code>votable.namespacing</code> system
        property.</li>
    <li><code>votlint</code> now checks that the correct XML namespaces are
        in use.</li>
    <li>Be more careful in XML, including VOTable, output; 
        fix VOTable output encoding to be UTF-8,
        and ensure no illegal XML characters are written.</li>
    <li>HTML table output is now HTML 4.01 by default 
        (includes THEAD and TBODY tags).</li>
    <li><code>parse*</code> string-&gt;numeric conversion 
        functions now cope with leading or trailing whitespace.</li>
    <li>Work around illegally truncated type declarations in IPAC tables.</li>
    <li>Fix a bug which caused the first table in a multi-table file
        (FITS or VOTable) to be used in streaming mode, even if
        a subsequent one was requested.</li>
    <li>Bug fixed in crossmatching output: entries which should have been 
        null were sometimes written as non-null (typically large negative
        numbers) in FITS and in non-TABLEDATA VOTable output.
        This affected cells in otherwise non-nullable columns
        where the entire row was absent.  The previous behaviour is not
        likely to have been mistaken for genuine results.
        </li>
    </ul>
    </p></dd>

<dt>Version 2.1 (6 November 2009)</dt>
<dd><p>
    <ul>
    <li><code>coneskymatch</code> can now match using SIA and SSA
        services as alternatives to Cone Search ones
        (see its new <code>servicetype</code> parameter).</li>
    <li>Fixed an obscure bug which could under rare circumstances cause
        truncation of strings with leading/trailing whitespace read
        from text-format files.</li>
    <li>A new <code>startable.storage</code> policy "<code>adaptive</code>"
        is now the default.  This should mean running out of memory less
        often.  The old behaviour can be restored by giving the new
        <code>-memory</code> command line flag.</li>
    </ul>
    Note that the STIL API used by this release has changed in some
    backwardly incompatible ways, and may change further.
    If you're using STILTS as a library rather than an application
    you might want to wait for a later release when the API has settled down.
    </p></dd>

<dt>Version 2.1-1 (21 December 2009)</dt>
<dd><p>
    <ul>
    <li>Plotting commands can now output to PDF as well as existing graphics
        formats.</li>
    <li>New filter <ref id="fixcolnames"><code>fixcolnames</code></ref>.</li>
    <li>Fixed internationalisation bug which could cause
        <code>coneskymatch</code> to fail in locales that use ","
        for a decimal point.</li>
    <li>Significant performance improvements related to the case of VOTable
        documents containing many tables.</li>
    </ul>
    </p></dd>

<dt>Version 2.1-2 (24 March 2010)</dt>
<dd><p>
    <ul>
    <li><ref id="jystilts">JyStilts</ref> introduced.
        This is a jython (i.e. Python, though not CPython)
        interface to the STILTS commands.
        It is believed to be fully working, but somewhat experimental -
        feedback is encouraged.</li>
    <li>Considerable performance and scalability improvements to the
        crossmatching commands
        (<code>tmatch1</code>, <code>tmatch2</code>, <code>tmatchn</code> and
         <code>tskymatch2</code>).
        For several common regimes, using default settings, 
        memory use has been decreased by a
        factor of about 5, and CPU time reduced by a factor of about 3.</li>
    <li>Add optional tuning parameters to crossmatch commands
        (parameter <code>tuning</code> for 
        <code>tmatch1</code>, <code>tmatch2</code> and <code>tmatchn</code>,
        and parameter <code>healpixk</code> for <code>tskymatch2</code>).
        Experimentation with these can lead to significant performance
        improvements for given matches.</li>
    <li>Fixed a crossmatch bug; it was giving a possibility of
        suboptimal "<code>find=best</code>"
        match assignments when pair matching in crowded fields.
        Crossmatch results thus may differ between earlier versions
        and this one.  Both are reasonable, but the newer behaviour is 
        more correct.  In non-crowded fields, there should be no change.</li>
    <li>Further performance improvement for VOTable documents with
        very many TABLEs.</li>
    <li>Memory management adjusted further - default (Adaptive) storage policy 
        now uses direct allocation (=<code>malloc()</code>) 
        for intermediate-sized buffers
        to avoid running out of java heap space.</li>
    <li>New option "<code>find=each</code>" for
        <code>coneskymatch</code> and <code>sqlskymatch</code> commands.
        This allows you to get an output table with exactly one row for
        each row of the input table.</li>
    <li>New flag <code>-memgui</code> to monitor memory usage during runs.</li>
    <li>Add new filter <ref id="rowrange"><code>rowrange</code></ref>.</li>
    <li>Add new functions to 
        <ref id="uk.ac.starlink.ttools.func.Arrays">Arrays</ref>:
        <code>array</code> functions for constructing arrays,
        and new aggregating functions <code>median</code> and
        <code>quantile</code>.</li>
    <li>Syntax of the crossmatching commands' <code>progress</code> parameter
        has changed; it now has an additional option which will write
        limited profiling information as well as logging as the match
        progresses.</li>
    <li>Add <code>ylabel</code> parameter to <code>plothist</code> command.</li>
    <li>The <code>random</code> and <code>sequential</code> filters have
        been renamed <code>randomview</code> and <code>seqview</code>
        respectively.  This provides a better idea of what they do.
        Since they are only useful for debugging, it is unlikely that this
        will break anyone's existing code.</li>
    <li>New filter <code>random</code> introduced which converts tables
        to random-access if necessary.</li>
    <li>Document previously undocumented <code>legend</code> parameter to
        plotting commands.</li>
    <li>Matching commands <code>matcher</code> parameters can now accept
        classnames of <code>MatchEngine</code> implementation classes as
        an option.</li>
    <li>Classes are now distributed as a zip of jars 
        (<code>stilts_jars.zip</code>) as an alternative to
        the monolithic jar file (<code>stilts.jar</code>).
        This may be more appropriate for those using STILTS classes in a
        framework that contains other third party class libraries.</li>
    <li>Adjusted the way that data types are read from JDBC databases.
        Date, Time and Timestamp typed columns will now be converted to Strings
        which means they can be written to most output formats
        (previously they were omitted from output tables).</li>
    <li>STILTS no longer attempts to communicate with TOPCAT using SOAP.
        TOPCAT's SOAP interface has been deprecated since v2.1 (2006),
        so this isn't likely to cause trouble, and it permits removal of
        SOAP (Axis) classes from the application jar file, saving several
        megabytes and reducing potential version clash problems.</li>
    <li>Fix bug in code for handling very large mapped FITS files.
        This was causing fatal read errors in some cases.</li>
    </ul>
    </p>
    </dd>

<dt>Version 2.2 (6 August 2010)</dt>
<dd><p>New capabilities for multi-table I/O have been introduced:
    <ul>
    <li>New multi-table output tasks
        <code>tmulti</code> and <code>tmultin</code>.
        These currently just copy multiple input tables to a single 
        multi-table container file (e.g. Multi-Extension FITS or 
        multi-TABLE VOTable).  Future releases may generalise the output of
        multi-table processing.</li>
    <li>New <code>multi</code> parameter introduced for <code>tcat</code>
        and <code>tmulti</code> tasks to pick up all tables in a 
        multi-table container file.</li>
    <li>New JyStilts functions <code>treads</code> and <code>twrites</code>
        for multi-table I/O.</li>
    </ul>
    There are some additional enhancements:
    <ul>
    <li>Added experimental name-resolution filter <code>addresolve</code>;
        this currently uses Sesame.</li>
    <li>Added filter <code>repeat</code>, which repeats table rows a
        given number of times.</li>
    </ul>
    And a number of bug fixes:
    <ul>
    <li>Recognise unofficial column type "<code>long</code>" in IPAC format
        tables.</li>
    <li>Better behaviour (warn + failover) when attempting to read large
        files on 32-bit OS or JVM.</li>
    <li>Efficiency warning now issued for large compressed FITS files.</li>

    <li>Upgraded PixTools HEALPix library to 2010/02/09 version.
        This fixes a bug that could theoretically cause deficient crossmatch
        results, though I haven't managed to produce such errors.</li>
    <li>Fixed bug in TST table output.</li>
    <li>Fixed bug in FITS-plus metadata output
        (table parameters were getting lost).</li>
    <li>Corrected literature references in Fluxes conversion class
        documentation (thanks to Mattia Vaccari).</li>
    <li>Fixed bug in CSV file parsing that could ignore header row in
        absence of non-numeric columns.</li>
    <li>Shape and ElSize metadata items now correctly reported by 
        <code>meta</code> filter.</li>
    <li>Fixed JyStilts bug when supplying an empty string for a parameter
        value.</li>
    </ul>
    </p>
    <p>Finally, from this release STILTS requires version 1.5 (a.k.a. 5.0)
    of the Java J2SE Runtime Environment; it will no longer run on 
    version 1.4, which is now very old.  I don't expect this to cause
    compatibility issues for anyone, but I'm interested to hear if that's
    not the case.
    </p></dd>

<dt>Version 2.2-1 (23 December 2010)</dt>
<dd><p>
    <ul>
    <li>Storage management improvements; removed restriction on large
        (&gt;2Gb) non-FITS datasets in some circumstances.</li>
    <li>Efficiency improvement in sequential mapped access to large FITS
        files.</li>
    <li>Fix so FITS tables &gt;2Gb can provide random access in 32-bit mode
        (though slower than 64-bit).</li>
    <li>FITS files now store table names in EXTNAME (and possibly EXTVAR)
        header cards.</li>
    <li>Window placement for the few GUI tasks should now behave a bit more
        like platform norms, rather than sitting in the top left hand
        corner.</li>
    <li>HTML table output now writes cell contents which look like URLs
        in HTML &lt;A&gt; tags.</li>
    <li>Basic authorization (<code>http://user:pass@host/path</code>) on
        table URLs handled.</li>
    <li>Fixed file pointer int overflow bug in FITS MultiMappedFiles.</li>
    </ul>
    </p></dd>

<dt>Version 2.3 (9 May 2011)</dt>
<dd><p>
    <dl>
    <dt>TAP</dt>
    <dd><p>The new commands
        <ref id="tapquery"><code>tapquery</code></ref> and
        <ref id="tapresume"><code>tapresume</code></ref> have been introduced.
        These provide support for the Table Access Protocol (TAP),
        and allow freeform queries in an SQL-like language to be
        made to remote databases.
        </p></dd>
    <dt>Minor enhancements</dt>
    <dd><p>
        <ul>
        <li>Random Groups HDUs are now tolerated, though not interpreted, 
            within FITS files.</li>
        <li>Added <code>soapout</code> parameter to <code>regquery</code>
            command.</li>
        <li>Added <code>count</code>, <code>variance</code> and
            <code>stdev</code> functions to 
            <ref id="uk.ac.starlink.ttools.func.Arrays">Arrays</ref>.</li>
        <li>Upgrade to JSAMP v1.2.</li>
        <li>Improve text rendering in <code>funcs</code> window display.</li>
        <li>Attempt case-sensitive matching before case-insensitive for
            column names.</li>
        <li>Fix <code>replaceval</code> filter to work with Infinities.</li>
        </ul>
        </p></dd>
    <dt>Bug fixes and workarounds</dt>
    <dd><p>
        <ul>
        <li>JDBC table input handler now effectively downcasts
            BigInteger/BigDecimal types to Long/Double.  
            The PostgreSQL JDBC driver seems to use the Big* types routinely 
            for numeric values (which I don't think it used to do).</li>
        <li>Add workaround for J2SE bug
            <webref
             url='http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4795134'
                   >#4795134</webref>,
             which could cause errors when reading compressed FITS files.</li>
        <li>Fix FITS character handling bug which could cause corrupted FITS
            files on output in presence of non-ASCII characters.</li>
        <li>Fix (some) JDBC connection leaks.</li>
        <li>Add missing parameters <code>dashNS</code> and
            <code>linewidthNS</code> to <code>plot2d</code> task.</li>
        </ul>
        </p></dd>
    </dl>
    </p></dd>

<dt>Version 2.3-1 (30 June 2011)</dt>
<dd><p>
    <ul>
    <li>Added new command <code>taplint</code>.
        This is a validator for TAP (Table Access Protocol) services.
        It is only likely to be useful to people developing or operating
        TAP services.</li>
    <li>ASCII table parsers now understand python-friendly
        <code>nan</code> and <code>inf</code> representations.</li>
    <li>Added new constants to expression language
        <code>Infinity</code> and <code>NaN</code>.</li>
    <li>Fixed a significant bug in sky crossmatching.
        If all points in a table were on one side of the RA=0 line,
        but the error radius extended across that line, matches on the
        other side could be missed.  Matches could also be missed if
        different tables used different conventional ranges for RA
        (e.g. -180..180 in one case and 0..360 in another).
        This fix may in some, but not most, cases result in slower matching
        than previously.</li>
    <li>Fixed <code>coneskymatch</code> cone search verbosity parameter so that
        VERB=3 is not erroneously ignored.</li>
    </ul>
    </p></dd>

<dt>Version 2.4 (27 October 2011)</dt>
<dd><p>
    <dl>
    <dt>Crossmatching:</dt>
    <dd><p>
        <ul>
        <li>Two new asymmetric match options <code>best1</code>
            and <code>best2</code> have been added
            for the <code>find</code> parameter in the pair matching commands 
            <code>tmatch2</code> and <code>tskymatch2</code>.
            They correspond to finding the best match in table B for each row
            in table A, and in crowded fields often provide more intuitive
            semantics than the previous symmetric <code>best</code> option
            (in non-crowded fields there is generally no difference).
            This replicates the matching performed by some other tools,
            including Aladin.</li>
        <li>New matchers have been added to permit matching of general
            elliptical, rather than just circular, regions in both planar
            and sky coordinates; see 
            <ref id="EllipseCartesianMatchEngine"><code>2d_ellipse</code></ref>,
            and
            <ref id="EllipseSkyMatchEngine"><code>skyellipse</code></ref>.</li>
        <li>Another new matcher is available for dealing with per-object
            errors in Cartesian coordinates (previously per-object errors
            could only be handled in sky coords); see
            <ref id="ErrorCartesianMatchEngine"
                 ><em>N</em><code>d_err</code></ref>.
            </li>
        <li>Semantics of the
            <ref id="SkyMatchEngine-err"><code>skyerr</code></ref>
            matcher have changed slightly.</li>
        </ul>
        </p></dd>
    <dt>Expression language functions:</dt>
    <dd><p>
        <ul>
        <li>Algebraic functions involving angles are now mostly available
            using degrees as well as radians.
            The <code>Coords</code> class has been replaced by
            <ref id="uk.ac.starlink.ttools.func.CoordsDegrees"
                                         ><code>CoordsDegrees</code></ref> and
            <ref id="uk.ac.starlink.ttools.func.CoordsRadians"
                                         ><code>CoordsRadians</code></ref>
            classes providing sky coordinate functions,
            and a new class
            <ref id="uk.ac.starlink.ttools.func.TrigDegrees"
                                         ><code>TrigDegrees</code></ref>
            provides normal degree-based trigonometric functions
            alongside the radian-based versions in
            <ref id="uk.ac.starlink.ttools.func.Maths"
                                         ><code>Maths</code></ref>.
            Some of the old function names have changed to make clear that they
            use radians and not degrees.
            This change should be much more convenient in most cases;
            sorry it's taken so long to get round to.</li>
        <li>Add new <code>join</code> function is added to the
            <ref id="uk.ac.starlink.ttools.func.Arrays">Arrays</ref> class
            to combine all the elements of an array into a string.</li>
        </ul>
        </p></dd>
    <dt>taplint:</dt>
    <dd><p>There are several bugfixes and changes related to the
           TAP validator tool <code>taplint</code>, mostly thanks to bug
           reports etc from the TAP community:
        <ul>
        <li>Improve test logic for record limiting queries.</li>
        <li>Errors no longer reported (e.g. E-Qxx-CNAM) 
            for unexpected TAP_SCHEMA table column ordering
            (when running query stage but no metadata acquisition stages).</li>
        <li>Add new stage MDQ, which checks query result columns for all
            tables against declared metadata.</li>
        <li>Add check of versioned and unversioned LANG variants.</li>
        <li>Now uses corrected upload ID 
            (<code>ivo://ivoa.net/std/TAPRegExt#upload-*</code>)
            as per most recent TAPRegExt draft.</li>
        </ul>
        </p></dd>
    <dt>Bug fixes and minor enhancements:</dt>
    <dd><p>
        <ul>
        <li>Add parameter <code>parse</code> to <code>tapquery</code> command,
            allowing pre-send syntax checking of submitted ADQL.</li>
        <li>Add experimental system properties
            <code>star.basicauth.user</code> and 
            <code>star.basicauth.password</code>.</li>
        <li>Improve resilience of <code>coneskymatch</code> in the presence of
            unreliable or inconsistent DAL services.</li>
        <li>A PARAMref element with no referent in a VOTable
            no longer causes an uncaught NullPointerException.</li>
        </ul>
        </p></dd>
    </dl>
    </p></dd>

<dt>Version 2.5 (28 March 2013)</dt>
<dd><p>
    <dl>
    <dt>New coverage-related functionality:</dt>
    <dd><p>
        <ul>
        <li>Add new command <ref id="pixsample"><code>pixsample</code></ref>
            which can sample pixel data from HEALPix table files
            (useful for things like Schlegel dust extinction).
            Also <ref id="addpixsample"><code>addpixsample</code></ref> filter,
            which does the same job.</li>
        <li>Add new command <code><ref id="pixfoot">pixfoot</ref></code>
            which can generate MOC (Multi-Order Coverage) maps.</li>
        <li>Add MOC-based coverage filter to <code>coneskymatch</code>
            when using some Cone Search services (mostly VizieR).
            This uses the Multi-Order Coverage map service operated by CDS.
            It can make VizieR multi-cone queries much faster by not doing
            cone searches that are outside the coverage region of the
            catalogue in question.</li>
        <li>Add new class 
            <ref id="uk.ac.starlink.ttools.func.Coverage">Coverage</ref>
            to the expression language containing MOC-related functions
            (currently, just <code>inMoc</code>).</li>
        </ul>
        </p></dd>
    <dt>Other new capabilities:</dt>
    <dd><p>
        <ul>
        <li>Add IPAC table output format.</li>
        <li>Add new class
            <ref id="uk.ac.starlink.ttools.func.KCorrections">KCorrections</ref>
            to the expression language,
            containing a method for calculating K-corrections
            following the method of Chilingarian and Zolotukhin.</li>
        <li>You can now reference tables in multi-extension FITS files by name
            (EXTNAME or EXTNAME-EXTVER) as an alternative to by HDU index.</li>
        </ul>
        </p></dd>
    <dt>VOTable enhancements:</dt>
    <dd><p>
        <ul>
        <li>VOTable input, output and validation are now supported
            for version 1.3 of the VOTable standard.</li>
        <li>The version of the VOTable format used for VOTable output
            can now be selected,
            by using the <ref id="sysProperties">system property</ref>
            <code>votable.version</code>.
            Output version is VOTable 1.2 by default.</li>
        <li><code>votlint</code> has been changed so that it handles
            different VOTable versions more capably.
            Versions 1.1+ are now validated against a schema
            (which is how those versions are defined) rather than against
            a DTD hacked to do the same job as the schema.
            VOTable 1.3 validation is now provided.</li>
        <li>The <code>votcopy</code> command has a new <code>version</code>
            parameter to control output version,
            and a new <code>nomagic</code> parameter to control whether
            <code>VALUES</code>/<code>null</code> attributes are removed
            where appropriate.</li>
        <li>Infinite floating point values are now correctly encoded
            in VOTable output ("<code>+Inf</code>"/"<code>-Inf</code>",
            not "<code>Infinity</code>"/"<code>-Infinity</code>" as in
            previous versions).</li>
        <li><code>votlint</code> is now stricter about floating point
            <code>TD</code> element contents.</li>
        <li>VOTable output no longer writes the <code>schemaLocation</code>
            attribute by default.</li>
        </ul>
        </p></dd>
    <dt>Other enhancements:</dt>
    <dd><p>
        <ul>
        <li>Add new function <code>hypot</code> (=sqrt(x*x+y*y))
            to the <code>Maths</code> class in expression language.</li>
        <li>Add new <code>split</code> functions for string splitting
            to the <code>Strings</code> class in expression language.</li>
        <li>Add <code>-utype</code> flags for <code>addcol</code>,
            <code>replacecol</code>, <code>colmeta</code> and
            <code>setparam</code> filters,
            and <code>utype</code> option for <code>meta</code> filter.</li>
        <li>Some changes to the <code>toString</code> function:
            it now works on non-numeric values,
            gives the right answer for <code>Long</code> integers
            and character values,
            and returns a blank value rather than the string "null" or "NaN"
            for blank inputs.</li>
        <li>Sexagesimal to numeric angle conversion functions now permit the
            seconds part of the sexagesimal string to be missing.</li>
        <li>Changes to the IPAC format definition are accommodated:
            the "long"/"l" type, which is apparently now official,
            no longer generates a warning, and headers may now use
            minus signs instead of whitespace.</li>
        <li>Add <code>OBS</code> stage (ObsTAP validation)
            to <code>taplint</code>.</li>
        <li>Add more checks to <code>CAP</code> stage of <code>taplint</code>.
            Declared languages (including features) and output formats are
            now checked.</li>
        <li>Tidy up error reporting a bit (fewer duplicate nested messages
            reported).</li>
        <li>PNG graphics output no longer has transparent background.</li>
        <li>Issue a warning for high values of <code>coneskymatch</code>
            <code>parallel</code> parameter.</li>
        <li>Upgrade JSAMP library to version 1.3-3.</li>
        <li>Upgrade Gr&#x00e9;gory Mantelet's ADQL library to version 1.1.</li>
        </ul>
        </p></dd>
    <dt>Bug fixes:</dt>
    <dd><p>
        <ul>
        <li>Fix serious and long-standing bug
            (bad TZERO header, causes subsequent reads to fail)
            for FITS output of boolean array columns.</li>
        <li>Fix small but genuine sky matching bug.
            The effect was that near the poles matches near the specified
            threshold could be missed.  The bug was in the PixTools library,
            fixed at the 2012-07-28 release.</li>
        <li>Fix bug in <code>tmatchn</code> group mode which could result in
            output rows with columns from only a single table,
            i.e. not representing an inter-table match, 
            even when <code>join*=default</code>.</li>
        <li>Fix bug which failed when attempting to read FITS files with
            complex array columns (<code>TFORMn=rC/rM</code>).</li>
        <li>Fix failure when caching very large sequential tables.</li>
        <li>Fix bug in <code>replacecol</code> and <code>replaceval</code>
            filters which could cause truncation of strings in FITS
            and possibly VOTable output when the new value was longer
            than the previously declared maximum length.</li>
        <li>Fix <code>tcat</code>, <code>tcatn</code> so that in most cases
            output column metadata is compatible with all input tables, not
            just the first one in terms of nullability, array shape etc.</li>
        <li>Adjust SQL writer to avoid a type error for MySQL.</li>
        <li>Fix bug in HMS sexagesimal formatting: minus sign was omitted from
            negative angles.  Now the output is forced positive.</li>
        <li>Cope with 1-column CSV files.</li>
        <li>Use the correct form "<code>rows</code>"/"<code>bytes</code>"
            rather than "<code>row</code>"/"<code>byte</code>"
            for TAP capability unit values.</li>
        <li>Fix error bar rendering bug which could result in diagonal lines
            being offset near the edge of plots.</li>  
        </ul>
        </p></dd>
    </dl>
    </p></dd>

<dt>Version 2.5-1 (1 July 2013)</dt>
<dd><p>
    <dl>
    <dt>New functionality</dt>
    <dd><p>
        <ul>
        <li>Add read-only support for
            <webref url="http://cdf.gsfc.nasa.gov/">CDF</webref>
            (NASA Common Data Format) files.</li>
        <li>Add Median Absolute Deviation calculation
            (<code>MedAbsDev</code> and <code>ScMedAbsDev</code>)
            options to <ref id="stats"><code>stats</code></ref> filter.</li>
        <li>Improved handling of HTTP basic authorization.
            401s now generate a useful message about the
            <code>star.basicauth.*</code> system properties if they
            have not been set up.</li>
        </ul>
        </p></dd>
    <dt>Bug fixes and minor enhancements</dt>
    <dd><p>
        <ul>
        <li>Fix CSV regression bug introduced at v2.5
            - CSV files now work again with MSDOS-style line breaks.</li>
        <li>Fixed FITS output bug which could result in badly-formed
            string-valued header cards (no closing quote).</li>
        <li>Source code is now managed by git and not subversion.
            The format of the "Starjava revision" string reported by the
            <code>-version</code> flag has changed accordingly.</li>
        <li>Output mode <code>meta</code> now copes better with array-valued
            table parameters.</li>
        <li>Implemented fixes to reduce the chance of users inadvertently
            overloading external Cone/SIA/SSA services with multicone-like
            queries.
            First, fix it so that abandoned queries are properly terminated,
            rather than continuing to hit the server until completion or JVM
            shutdown.
            Second, implement a sensible default maximum value for the
            <code>parallel</code> parameter of <code>skyconematch</code>
            (though this may be adjusted with a system property).</li>
        <li>Quoting behaviour has changed when generating SQL to write to
            RDBMS tables.  This ought to reduce problems related to mixed-case
            identifiers.  However, it is possible that it could lead to 
            unforseen new anomalies.</li>
        <li>More <code>toString</code> overloads - now works for byte and
            boolean values too.</li>
        </ul>
        </p></dd>
    </dl>
    </p></dd>

    <dt>Next Version</dt>
    <dd><p>
        <ul>
        <li>Add some more colour maps.</li>
        <li>Fix some broken and misdocumented non-table-output JyStilts
            commands (<code>tcube</code>, <code>pixfoot</code>).</li>
        <li>Fix bug which prevented access to long integer array elements
            from expression language.</li>
        <li>The Exact matcher now considers scalar numeric values equal if
            they have the same numeric value; they are no longer required
            to have the same type.</li>
        <li>Fixed a registry client bug which means that the
            <code>regquery</code> command can now successfully talk to
            the NVO/VAO/STSci registry.
            That has been broken since mid-2010.</li>
        <li>Add new command <code>tloop</code> for generating single-column
            tables from a numeric loop variable.</li>
        </ul>
        </p></dd>

</dl>
</p>
</subsect>

</sect>

</appendices>

</docbody>

</sun>
